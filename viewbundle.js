(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* jshint asi:true, laxcomma:true, -W008, -W060 */ 
/* global require, document, console, window */


// imports
var $ = window.$ = require('browserify-zepto')
var proj = require('../index.js')


// output from proj.exportData(), stringified
// probably a better way to do this, but for now...
var polyDat = 
		"vert-xyz,0.9801929302047938,0.3083066053222865,0.9471351215615869,0.784862345084548,0.15859916736371815,0.9861757725011557,0.1863530701957643,0.10370698920451105,0.9388693098444492,0.3674390099477023,0.10392470564693213,0.8928836197592318,0.29110595351085067,0.9032037367578596,0.9764106071088463,0.169013824313879,0.30361274094320834,0.9478694279678166,0.35007836460135877,0.04347379365935922,0.8730044800322503,0.3416295237839222,0.17371833813376725,0.9505822791252285,0.3465759460814297,0.9654305896256119,0.9345154925249517,0.3011684000957757,0.1604594551026821,0.9161720480769873,0.5386213352903724,0.6293971217237413,0.8573086028918624,0.8441043831408024,0.44918812438845634,0.9731046054512262,0.3011684000957757,0.1604594551026821,0.9161720480769873,0.028966869926080108,0.9477637489326298,0.8573086028918624,0.20886043389327824,0.49384338362142444,0.9134058956988156,0.30246810894459486,0.03266419982537627,0.9617403477896005,0.3147328342311084,0.03982547973282635,0.8180202699732035,0.8187641918193549,0.7631892336066812,0.8862765282392502,0.839263842208311,0.7985540942754596,0.8747903383336961,0.008016106905415654,0.6926459558308125,0.8336055693216622,0.6694373735226691,0.5776786357164383,0.9000638138968498,0.39939360646530986,0.9657214214093983,0.594161982415244,0.11243357323110104,0.5398248706478626,0.9827751212287694,0.4436859239358455,0.7310214568860829,0.9930544719099998,0.5237956191413105,0.24007505760528147,0.8817141701001674,0.6244234046898782,0.27553821448236704,0.8964229472912848,0.14168248046189547,0.12941923132166266,0.744606232503429,0.5982797804754227,0.2846989973913878,0.6731532756239176,0.8106535393744707,0.04020758275873959,0.9268876076675951,0.884562558028847,0.6021367835346609,0.9146844260394573,0.3349866126663983,0.03233194095082581,0.6423238555435091,0.2580955501180142,0.728999073849991,0.8930964381434023,0.2993979707825929,0.7674322053790092,0.9575900002382696,0.3065284928306937,0.045565072214230895,0.737513875355944,0.03729349025525153,0.891122821951285,0.839986560633406,0.2148172715678811,0.42722229566425085,0.9025576661806554,0.3065284928306937,0.045565072214230895,0.737513875355944,0.25433402322232723,0.8050299121532589,0.8694807924330235,0.03729349025525153,0.891122821951285,0.839986560633406,0.5557247512042522,0.06359320785850286,0.9353169803507626,0.11859213327988982,0.09241691650822759,0.7875980320386589,0.6044710034038872,0.06422713352367282,0.7236465075984597,0.007515603676438332,0.02033328521065414,0.7470830245874822,0.00159345637075603,0.8229000843130052,0.8162944710347801,0.07880129129625857,0.00011128862388432026,0.8764394498430192,0.3065284928306937,0.045565072214230895,0.7386443766299635,0.044699981808662415,0.6702155263628811,0.8461273317225277,0.23809338570572436,0.7305298685096204,0.8536946061067283,0.2146520430687815,0.2881484350655228,0.7556672957725823,0.692944980924949,0.30956829874776304,0.7212247522547841,0.07579126791097224,0.9821015649940819,0.9607517479453236,0.1858313053380698,0.15819018916226923,0.9816959693562239,0.5671537322923541,0.3169243938755244,0.6984082031995058,0.19631920312531292,0.1851713522337377,0.7569691324606538,0.13503466174006462,0.34142463910393417,0.7213452812284231,0.04972980450838804,0.42683573300018907,0.9978186476510018,0.7444448361638933,0.5747344277333468,0.7178497589193285,0.839263842208311,0.7985540942754596,0.8747903383336961,0.008016106905415654,0.6926459558308125,0.8336055693216622,0.4934302906040102,0.3966941754333675,0.7212802576832473,0.8205987226683646,0.06253965361975133,0.9711090840864927,0.016892407089471817,0.7689652880653739,0.6853969830553979,0.2386400238610804,0.52870107232593,0.7553763065952808,0.5587454247288406,0.980817249044776,0.860979188233614,0.16162259876728058,0.5496038794517517,0.7225836063735187,0.7362978775054216,0.47823283984325826,0.8236545354593545,0.2612683712504804,0.19066295213997364,0.8100780609529465,0.3228901196271181,0.13194374437443912,0.7798947505652905,0.012284382246434689,0.6624377493280917,0.8163980739191175,0.7092334122862667,0.7707963036373258,0.7058352555613965,0.7698627666104585,0.6966388011351228,0.8071705033071339,0.15482777962461114,0.12492527416907251,0.875390731729567,0.4236595849506557,0.2595112381968647,0.9933113176375628,0.2954753472004086,0.005752132041379809,0.44464136846363544,0.26970231742598116,0.26272899890318513,0.935585627797991,0.9528822069987655,0.982395809609443,0.9569508319254965,0.679653636412695,0.7617393368855119,0.4298515892587602,0.2323094152379781,0.04863022128120065,0.9846195331774652,0.35007836460135877,0.04347379365935922,0.8730044800322503,0.5786148691549897,0.3754567678552121,0.5412881025113165,0.3416295237839222,0.17371833813376725,0.9505822791252285,0.5970904196146876,0.06359320785850286,0.9353169803507626,0.11859213327988982,0.09241691650822759,0.7875980320386589,0.4978401034604758,0.11911379918456078,0.6378121543675661,0.25887746131047606,0.27714250213466585,0.9874324863776565,0.5174049206543714,0.6334833903238177,0.8855773718096316,0.09549298696219921,0.006818459369242191,0.48757020686753094,0.5051004888955504,0.4170729210600257,0.9694120248313993,0.9711963983718306,0.7795634167268872,0.464945440646261,0.2863957807421684,0.919888285221532,0.9240237502381206,0.19893813482485712,0.23326318222098053,0.877293567173183,0.5248253787867725,0.8150229218881577,0.768206830136478,0.28091441350989044,0.19092099997214973,0.7083998857997358,0.09160694340243936,0.0289015700109303,0.5033801703248173,0.22987607843242586,0.9809953069780022,0.9584628266748041,0.0919983817730099,0.4265309914480895,0.8913186120335013,0.9667899587657303,0.46713401982560754,0.8254557447507977,0.8365834064316005,0.051519405795261264,0.5425923222210258,0.5741971859242767,0.6193706945050508,0.9784436465706676,0.9325717082247138,0.13324266579002142,0.8212442784570158,0.6073589012958109,0.16937696188688278,0.6349699916318059,0.07745645707473159,0.3467889407183975,0.8513007296714932,0.30246810894459486,0.03266419982537627,0.9200392505154014,0.3147328342311084,0.03982547973282635,0.8180202699732035,0.6809167123865336,0.4471395423170179,0.5652029698248953,0.24545867764391005,0.1956933531910181,0.7055278280749917,0.033024964621290565,0.4444482601247728,0.6081233769655228,0.2100658763665706,0.2195015293546021,0.9857444653753191,0.0011619101278483868,0.237951485440135,0.9794827364385128,0.04825109522789717,0.9141275219153613,0.6463134258519858,0.10578312911093235,0.02801449131220579,0.6712745514232665,0.09160694340243936,0.028059483505785465,0.6854441077448428,0.060917881317436695,0.852420384529978,0.7931979678105563,0.0057444809935987,0.30582272191531956,0.812646760372445,0.43296820274554193,0.6525036161765456,0.6714946979191154,0.38969471072778106,0.06960811163298786,0.6988449543714523,0.5262700812891126,0.612826525233686,0.9160547354258597,0.5982797804754227,0.2846989973913878,0.6731532756239176,0.8106535393744707,0.04020758275873959,0.9268876076675951,0.05103511526249349,0.5550080861430615,0.6742185978218913,0.08051112527027726,0.02523507969453931,0.3866426208987832,0.1887686289846897,0.5433168858289719,0.9273449685424566,0.23757391329854727,0.9400273473002017,0.952493957709521,0.8046380812302232,0.06359320785850286,0.9353169803507626,0.11859213327988982,0.09241691650822759,0.7875980320386589,0.5946605259086937,0.1367825057823211,0.5319571169093251,0.2541356545407325,0.010384813416749239,0.6710960874333978,0.2707609781064093,0.41385058825835586,0.9177355074789375,0.24625118798576295,0.6364656323567033,0.6655409543309361,0.2804349586367607,0.7954919375479221,0.8042301475070417,0.0442131026647985,0.758981061168015,0.5821079185698181,0.05065926839597523,0.8114691616501659,0.8665993264876306,0.1758823897689581,0.8797555274795741,0.4690599818713963,0.45389209571294487,0.053345969412475824,0.8947499245405197,0.3994639569427818,0.6831316261086613,0.8871364442165941,0.25887746131047606,0.27714250213466585,0.8681168297771364,0.19510127766989172,0.12252063932828605,0.7311111639719456,0.5174049206543714,0.6418495422694832,0.6479495742823929,0.5946655794978142,0.8233258600812405,0.9182152024004608,0.33417776064015925,0.44253552542068064,0.8029436527285725,0.047386864898726344,0.00649941130541265,0.5133592877537012,0.7975963386707008,0.06359320785850286,0.9353169803507626,0.11859213327988982,0.09241691650822759,0.7875980320386589,0.678464851109311,0.03630651766434312,0.5096290854271501,0.3214624880347401,0.06359320785850286,0.9720576470717788,0.17955222027376294,0.09241691650822759,0.8479514545761049,0.18412262434139848,0.3393260801676661,0.412083798320964,0.8478343707975,0.12726705591194332,0.9388282184954733,0.29435888421721756,0.7929138306062669,0.5479381380137056,0.21929667191579938,0.1987527988385409,0.7418337010312825,0.3011684000957757,0.1604594551026821,0.9161720480769873,0.028966869926080108,0.6293971217237413,0.8573086028918624,0.26987335295416415,0.43242788477800786,0.45323936082422733,0.2664704518392682,0.870102190412581,0.4046141009312123,0.817282605683431,0.6904256991110742,0.8682748700957745,0.24336898373439908,0.17490447615273297,0.9468571252655238,0.1858313053380698,0.15819018916226923,0.9816959693562239,0.19631920312531292,0.1851713522337377,0.7526829694397748,0.16381595470011234,0.7618436948396266,0.4801064091734588,0.088326659752056,0.00470372661948204,0.6185905667953193,0.05769103625789285,0.08697457681410015,0.7282491137739271,0.08586546848528087,0.1801805947907269,0.8584802008699626,0.937128079123795,0.8393153657671064,0.3656057771295309,0.5043883742764592,0.8055812218226492,0.8540050808805972,0.5294719247613102,0.15455781784839928,0.9844626109115779,0.4886459296103567,0.027272738283500075,0.9583560877945274,0.25992191140539944,0.6633615111932158,0.6606321178842336,0.11889968765899539,0.6125330755021423,0.5802407485898584,0.13503466174006462,0.34142463910393417,0.7213452812284231,0.7444448361638933,0.5747344277333468,0.7178497589193285,0.0645452574826777,0.565917746629566,0.7582224723882973,0.48407126497477293,0.9507678339723498,0.8745453625451773,0.0027117833960801363,0.9052336586173624,0.43873946997337043,0.39583255955949426,0.9900885347742587,0.8748535842169076,0.08508740342222154,0.7652883739210665,0.8763941831421107,0.4613492079079151,0.2047162726521492,0.8294455939903855,0.364056215621531,0.3088241466321051,0.4819746850989759,0.3011684000957757,0.1604594551026821,0.8935820332262665,0.029821830103173852,0.506825883872807,0.7970537226647139,0.2154840906150639,0.8691068205516785,0.4933448303490877,0.27045860700309277,0.08328831917606294,0.8570098811760545,0.6617599066812545,0.9433789264876395,0.7217823001556098,0.742018508259207,0.8455441314727068,0.6018665365409106,0.7644563000649214,0.07500607892870903,0.6323861847631633,0.48833927884697914,0.08432820183224976,0.5796887711621821,0.9453572898637503,0.50274767447263,0.95187828107737,0.2491814426612109,0.8803779752925038,0.3782777392771095,0.21266864403150976,0.426626407308504,0.9965956243686378,0.33268025680445135,0.1098188441246748,0.7862264660652727,0.8365834064316005,0.051519405795261264,0.5425923222210258,0.8546665324829519,0.6255598873831332,0.9784436465706676,0.5674581087660044,0.15682842815294862,0.6309582258109003,0.9331381330266595,0.39437435450963676,0.7037354139611125,0.5669313352555037,0.04902456747367978,0.475338562624529,0.9521622229367495,0.6805033686105162,0.9728285595774651,0.8450884027406573,0.15452789491973817,0.8847893185447901,0.6441773751284927,0.07444972591474652,0.5612028655596077,0.6044045581948012,0.36926642968319356,0.7057614105287939,0.12052826187573373,0.1671818110626191,0.8217450508382171,0.17294252756983042,0.1387119828723371,0.7918434164021164,0.18708577891811728,0.19376115244813263,0.5374238793738186,0.10151671431958675,0.18411668785847723,0.7974424122367054,0.09079693467356265,0.23493389040231705,0.660589401377365,0.044931380078196526,0.10018892725929618,0.691819480387494,0.005542655009776354,0.012423636158928275,0.8929126304574311,0.09193105367012322,0.8035755914170295,0.9281080276705325,0.05075032776221633,0.28405492659658194,0.3189977000001818,0.3186349857132882,0.7819117666222155,0.43498540902510285,0.2600612654350698,0.20007071853615344,0.7320542621891946,0.723597944714129,0.5138242789544165,0.9700398505665362,0.8971812843810767,0.04358768253587186,0.5710810092277825,0.2736628632992506,0.586204435210675,0.6522394553758204,0.4890170758590102,0.9286844911985099,0.9136507634539157,0.8294049126561731,0.7429934374522418,0.9785075054969639,0.6779545664321631,0.24141329107806087,0.46120558865368366,0.2511276053264737,0.3734824154525995,0.695389304542914,0.8839587692636997,0.6887940939050168,0.943678135285154,0.8600453448016196,0.4180010703857988,0.8675914572086185,0.4673361557070166,0.5625435253605247,0.3223061845637858,0.23612375743687153,0.08644772856496274,0.8430460097733885,0.2134522683918476,0.02219502767547965,0.7386466593015939,0.7476045964285731,0.9592602865304798,0.5514541559386998,0.573696524836123,0.9409201934468001,0.5539922134485096,0.24114316259510815,0.40780912851914763,0.9135206579230726,0.7401109153870493,0.04802366090007126,0.6650326922535896,0.2491814426612109,0.8955269937869161,0.45243057212792337,0.33268025680445135,0.1098188441246748,0.7862264660652727,0.07190890121273696,0.9980872455053031,0.8882297740783542,0.33358648233115673,0.4038883908651769,0.7836482431739569,0.19672442157752812,0.6610684969928116,0.5487586450763047,0.07242439733818173,0.321611249120906,0.7905288313049823,0.3073128773830831,0.4059869907796383,0.4656536434777081,0.9358659198042005,0.009617659728974104,0.9199706614017487,0.876138239633292,0.7243298091925681,0.7337370363529772,0.30246810894459486,0.03266419982537627,0.7030595748219639,0.3405832659918815,0.20821114676073194,0.5967382045928389,0.3147328342311084,0.03982547973282635,0.8180202699732035,0.9637165514286608,0.9157923383172601,0.5833935565315187,0.746868088375777,0.9239186393097043,0.666973632061854,0.005528704030439258,0.11230140458792448,0.8662772374227643,0.3405832659918815,0.1913444094825536,0.5967382045928389,0.3147328342311084,0.028992164647206664,0.7950023687444627,0.3161542632151395,0.03846377553418279,0.7242646536324173,0.20860209153033793,0.7301114650908858,0.22185545368120074,0.690100449603051,0.6469687265343964,0.9694851397071034,0.8175951081793755,0.695717956405133,0.9226905682589859,0.8248442376498133,0.7276360453106463,0.9428290005307645,0.3377705819439143,0.23034340725280344,0.9402407668530941,0.46403839671984315,0.4941323562525213,0.2305531045421958,0.9866632502526045,0.05122417095117271,0.2867827406153083,0.016846403246745467,0.6207996131852269,0.9589824336580932,0.9176030710805207,0.6613192211370915,0.8633038781117648,0.2376456472557038,0.6455121382605284,0.9418209625873715,0.21835510525852442,0.45578488311730325,0.9965956243686378,0.3710478078573942,0.11192758148536086,0.1658736690878868,0.695700520882383,0.45979663892649114,0.9931273681577295,0.3786325778346509,0.011982856085523963,0.9557418483309448,0.9891356588341296,0.3858438292518258,0.15110376942902803,0.3011684000957757,0.1604594551026821,0.9167884704656899,0.33944369945675135,0.15736530674621463,0.946092362748459,0.035916609689593315,0.7193625106010586,0.2366144151892513,0.7426440012641251,0.9503348756115884,0.7970632859505713,0.6183948202524334,0.17070559039711952,0.3748631963972002,0.8749992926605046,0.8080700202845037,0.9187314168084413,0.18933388800360262,0.9671630919910967,0.7135808817110956,0.29862184007652104,0.6336226582061499,0.6962114376947284,0.8609052174724638,0.49508027196861804,0.6799346432089806,0.8185179547872394,0.06359320785850286,0.784769703168422,0.15969943325035274,0.09241691650822759,0.7855834006331861,0.38517696550115943,0.026348163606598973,0.5190527625381947,0.041729873744770885,0.3085121251642704,0.2722896272316575,0.41885045007802546,0.4593547882977873,0.9840934965759516,0.3294342702720314,0.8025486583355814,0.8323676735162735,0.8717096021864563,0.9017560190986842,0.7115637243259698,0.8056996962986887,0.6997171160764992,0.962853732984513,0.4297910330351442,0.4840154582634568,0.4124387442134321,0.08092575357295573,0.6479369623120874,0.719809080241248,0.13824655418284237,0.34481492545455694,0.6211528228595853,0.178698624484241,0.4793321571778506,0.7435086509212852,0.2523580598644912,0.35638710437342525,0.9218357929494232,0.2415252176579088,0.3151811915449798,0.1973286783322692,0.6569204237312078,0.9125392693094909,0.9648380526341498,0.9444356162566692,0.5544284333009273,0.3280090701300651,0.7521221756469458,0.5979644674807787,0.7588420913089067,0.88478037645109,0.6354492353275418,0.9965716167353094,0.3011684000957757,0.1604594551026821,0.9161720480769873,0.10645969794131815,0.717385963536799,0.4583150348626077,0.31365887145511806,0.622038520174101,0.708075852598995,0.3214624880347401,0.06359320785850286,0.9486332032829523,0.1717016389593482,0.10201166826300323,0.7024914287030697,0.2803754599299282,0.11374273453839123,0.43117223936133087,0.17382332449778914,0.2695407224819064,0.8392312871292233,0.7883651673328131,0.5698212578427047,0.39820898696780205,0.40042797732166946,0.1338581028394401,0.8441513148136437,0.17925405828282237,0.4107762554194778,0.6982973166741431,0.1624200928490609,0.0664731077849865,0.8312895756680518,0.1518419908825308,0.6151578577701002,0.5508835427463055,0.36366179934702814,0.9781087364535779,0.9891632623039186,0.5417800261639059,0.09090474504046142,0.2677383495029062,0.5837476628366858,0.8508129857946187,0.8231349182315171,0.1624364152085036,0.11722721881233156,0.6891419163439423,0.16100148065015674,0.0385908002499491,0.7018658120650798,0.33322307257913053,0.9615717225242406,0.6877981405705214,0.2532662255689502,0.26756437961012125,0.6477827688213438,0.5917325294576585,0.7005720145534724,0.580425314605236,0.20988106238655746,0.9669480274897069,0.8472250641789287,0.8802614661399275,0.028111437102779746,0.8389750274363905,0.6246567510534078,0.04372455063275993,0.9948438061401248,0.47806178755126894,0.3343763130251318,0.24001168529503047,0.10151671431958675,0.18411668785847723,0.8095543393865228,0.06561197503469884,0.6559026020113379,0.3311033067293465,0.07231651083566248,0.5926715431269258,0.931480323895812,0.5598124563694,0.7170392419211566,0.5378314913250506,0.16896283254027367,0.2668811376206577,0.6775469172280282,0.26047164504416287,0.9570549144409597,0.8567552065942436,0.5601953188888729,0.26470633898861706,0.27119088009931147,0.36787882866337895,0.5691579394042492,0.8684059490915388,0.32174290088005364,0.015535157406702638,0.9323997413739562,0.709250271320343,0.05271867197006941,0.12643636111170053,0.7349317611660808,0.7689039879478514,0.971480896929279,0.09547703643329442,0.8720049902331084,0.9733168021775782,0.4215487693436444,0.8273263040464371,0.6537068076431751,0.30246048350818455,0.032666978193446994,0.7673849416896701,0.33947583637200296,0.2082200979348272,0.6461293664760888,0.41513030556961894,0.4905791603960097,0.8025649895425886,0.23102805111557245,0.22369648749008775,0.9075754832010716,0.0642282331828028,0.7699035154655576,0.3542031922843307,0.8219728579279035,0.7437052568420768,0.371324566192925,0.8524528532288969,0.9551535241771489,0.959522346733138,0.5650988824199885,0.14808214828372002,0.7298302226699889,0.35007836460135877,0.04347379365935922,0.8730044800322503,0.3416295237839222,0.17371833813376725,0.9505822791252285,0.3741276564542204,0.3477467249613255,0.22108824597671628,0.6435410482808948,0.3752361296210438,0.5878750593401492,0.2523501240648329,0.45860482286661863,0.5541094832587987,0.22914886055514216,0.36069745756685734,0.9021298629231751,0.9866632502526045,0.05122417095117271,0.26844283612444997,0.20818478311412036,0.3695753829088062,0.9616849415469915,0.9325717082247138,0.13324266579002142,0.8099024319089949,0.3931453207042068,0.6365392713341862,0.9990944326855242,0.32944550761021674,0.07669612509198487,0.46055037272162735,0.343195702182129,0.33603236777707934,0.5801488810684532,0.46165960701182485,0.08291451400145888,0.415419552475214,0.4886459296103567,0.027272738283500075,0.9516664501279593,0.26545428531244397,0.12141538574360311,0.6724808856379241,0.2946641817688942,0.24842796567827463,0.7359095646534115,0.298799492418766,0.07032988523133099,0.6210933045949787,0.2612638638820499,0.07394742406904697,0.6804565670900047,0.6135363343637437,0.5351959276013076,0.9277541183400899,0.42149480944499373,0.13364110956899822,0.44868190470151603,0.26026648632250726,0.49916574847884476,0.6585645216982812,0.46165960701182485,0.08291451400145888,0.415419552475214,0.4886459296103567,0.027272738283500075,0.9583560877945274,0.25992191140539944,0.6633615111932158,0.6606321178842336,0.8717096021864563,0.9409574130550027,0.7544448268599808,0.679861162090674,0.45658266940154135,0.7223940470721573,0.7932235880289227,0.5089137849863619,0.55429204297252,0.12601109594106674,0.6735131903551519,0.49908432946540415,0.18160366942174733,0.1762434164993465,0.9148763462435454,0.09675308782607317,0.9719158161897212,0.6170211657881737,0.34198911348357797,0.014938286039978266,0.3678205965552479,0.09324082196690142,0.5913766867015511,0.6838071139063686,0.12753356201574206,0.5715116271749139,0.9782622612547129,0.354831034084782,0.0027601264882832766,0.28724109288305044,0.7419405109249055,0.8123738602735102,0.971480896929279,0.6766695599071681,0.9582234222907573,0.7689606605563313,0.33299741824157536,0.8127778784837574,0.9241680449340492,0.7482806351035833,0.6680892035365105,0.7993355428334326,0.3354672642890364,0.45487682544626296,0.3041098592802882,0.36822903994470835,0.0999326400924474,0.8190885982476175,0.15176080912351608,0.9895144102629274,0.7877765332814306,0.7063979955855757,0.5943396538496017,0.42071393574588,0.41513030556961894,0.4905791603960097,0.8025649895425886,0.23102805111557245,0.22369648749008775,0.9075754832010716,0.2573284516111016,0.20777101954445243,0.31444236310198903,0.17382332449778914,0.2695407224819064,0.8392312871292233,0.5545594750437886,0.0642322301864624,0.720687352353707,0.623815567465499,0.4706785096786916,0.4642303299624473,0.7573188308160752,0.9240041873417795,0.921993947820738,0.653604436898604,0.9933353099040687,0.30811230302788317,0.8530384474433959,0.6020735632628202,0.7905987533740699,0.0011619101278483868,0.237951485440135,0.9794827364385128,0.04825109522789717,0.5387801595497876,0.6463134258519858,0.15472109941765666,0.2222613648045808,0.3913795363623649,0.29647671431303024,0.08543681958690286,0.49849797249771655,0.2612638638820499,0.07370657869614661,0.6812335620634258,0.2825093057472259,0.13544285483658314,0.8338029249571264,0.28876988566480577,0.5159904039464891,0.5090833471622318,0.5440601643640548,0.6064041412901133,0.890421663178131,0.6561682149767876,0.23157645598985255,0.613752115983516,0.8219728579279035,0.7269198754802346,0.4192810256499797,0.6882411348633468,0.25552795035764575,0.738436923827976,0.8117703723255545,0.9892196494620293,0.8542409685906023,0.10875207046046853,0.24850715976208448,0.5745555339381099,0.01393507863394916,0.9672236416954547,0.7308914358727634,0.010775313945487142,0.08042646711692214,0.6985930157825351,0.4140070294961333,0.26380564784631133,0.7634275176096708,0.38130614068359137,0.7765459842048585,0.48016880126670003,0.7578803992364556,0.26981135248206556,0.7586781177669764,0.7903980924747884,0.6299170420970768,0.9277541183400899,0.05437498912215233,0.9191976867150515,0.43003376317210495,0.21220513805747032,0.826011196943,0.6307706395164132,0.5580093066673726,0.8076491255778819,0.3908519372344017,0.4548882588278502,0.15825930889695883,0.809016132960096,0.5081923087127507,0.9786498420871794,0.7882951819337904,0.10151671431958675,0.18411668785847723,0.8095543393865228,0.07231651083566248,0.5926715431269258,0.9126901014242321,0.06149472272954881,0.8679676121100783,0.26464934390969574,0.2763872698415071,0.7114036730490625,0.3279319326393306,0.18947764113545418,0.3508443182799965,0.7708495364058763,0.5144306041765958,0.46379960235208273,0.8771778242662549,0.05353026860393584,0.8790656453929842,0.9669661384541541,0.2538666676264256,0.3763550641015172,0.9588971550110728,0.9658638532273471,0.9596218303777277,0.04411271493881941,0.36696061631664634,0.09619089169427752,0.8190885982476175,0.011246104491874576,0.6572334745433182,0.499001978430897,0.10032922518439591,0.5171466663014144,0.6471679492387921,0.23495850968174636,0.34794135577976704,0.04105698736384511,0.8907272298820317,0.3670957812573761,0.9433273142203689,0.05189946200698614,0.8054605640936643,0.9788841241970658,0.14231766271404922,0.2017178637906909,0.9965956243686378,0.23685375996865332,0.3664107273798436,0.0011120648123323917,0.2058324282988906,0.1485875528305769,0.9652450617868453,0.6935410830192268,0.02542744344100356,0.20014779549092054,0.09253983804956079,0.5187980348709971,0.9724032357335091,0.4490452578756958,0.24018277716822922,0.7892658344935626,0.21372944442555308,0.8227346946951002,0.46467014378868043,0.024995259707793593,0.8552649060729891,0.7583341284189373,0.2600612654350698,0.20007071853615344,0.7320542621891946,0.0605980409309268,0.9896980440244079,0.832647634902969,0.34822357608936727,0.7039981733541936,0.967979451874271,0.9586387139279395,0.9999450701288879,0.1478765676729381,0.1507408209145069,0.1442115067038685,0.13026287336833775,0.1664821736048907,0.9174807427916676,0.984796333592385,0.1624200928490609,0.00207267003133893,0.8312895756680518,0.6456380495801568,0.6363716996274889,0.9870992586947978,0.9674419667571783,0.9737136936746538,0.14615514827892184,0.44096221146173775,0.6704125909600407,0.8105872839223593,0.42911468469537795,0.27216488192789257,0.9312041308730841,0.4800328337587416,0.8436635877005756,0.47727410425432026,0.7205273821018636,0.17137485812418163,0.5285954084247351,0.19748275517486036,0.6443451072555035,0.37258439254947007,0.4891285733319819,0.9187363730743527,0.7483102874830365,0.050675880862399936,0.18267458071932197,0.8144739856943488,0.9991118034813553,0.584185115294531,0.17156587936915457,0.9716313388198614,0.5171126218046993,0.8612797425594181,0.6385075068101287,0.7492754980921745,0.9002699987031519,0.40473562106490135,0.5337156062014401,0.7049861180130392,0.6853797307703644,0.7119215372949839,0.6109306910075247,0.10607398371212184,0.2812646005768329,0.6127132277470082,0.17382332449778914,0.2695407224819064,0.7400518406648189,0.3562723791692406,0.4706785096786916,0.2995251836255193,0.08798559755086899,0.861934145912528,0.8881847108714283,0.7236487632617354,0.3822930527385324,0.10094103682786226,0.42112421174533665,0.11092963465489447,0.8880711037199944,0.9031281899660826,0.0010335792321711779,0.9330198874231428,0.7969716018997133,0.9115096961613744,0.9903660740237683,0.23401525150984526,0.9452955857850611,0.3947403887286782,0.5578852293547243,0.31837439094670117,0.5364221332129091,0.4163082044105977,0.7698591372463852,0.7884797258302569,0.8921062082517892,0.9989672855008394,0.27757455105893314,0.15066920896060765,0.8682135730050504,0.8477678704075515,0.7956751135643572,0.06934461067430675,0.851180340629071,0.6348501187749207,0.5566116517875344,0.9859652167651802,0.9958520140498877,0.16916377400048077,0.0753194757271558,0.22424363275058568,0.5174496106337756,0.6579714049585164,0.24207956297323108,0.5773714762181044,0.46578455972485244,0.2027693372219801,0.05279908259399235,0.7870784534607083,0.6194607696961612,0.16284151677973568,0.5020589975174516,0.9077992199454457,0.2074311540927738,0.5845655568409711,0.7996323376428336,0.6481590224429965,0.8237436763010919,0.9997165245003998,0.8745903398375958,0.15653972863219678,0.8418639143928885,0.20552444458007812,0.7791396756656468,0.8147158918436617,0.6080520253162831,0.9746082974597812,0.9151158533059061,0.9200926492922008,0.47800288372673094,0.6878767837770283,0.5872732657007873,0.5502030404750258,0.3973956408444792,0.9761902070604265,0.8816578828264028,0.18528688186779618,0.71434091264382,0.8196364957839251,0.01183064398355782,0.7439116185996681,0.4191069435328245,0.3718481087125838,0.28372805495746434,0.6683029734995216,0.23495850968174636,0.34794135577976704,0.04105698736384511,0.10320346802473068,0.5551969145890325,0.9788841241970658,0.5308478036895394,0.7234791859518737,0.8856186347547919,0.6832168139517307,0.2816481599584222,0.991615834645927,0.055727976374328136,0.9387573366984725,0.7806295179761946,0.5841464842669666,0.9355377454776317,0.13208529190160334,0.2299806654918939,0.4706469608936459,0.6709258097689599,0.21070018177852035,0.25269362260587513,0.3817464611493051,0.46179855545051396,0.7697955316398293,0.8501654269639403,0.22520494787022471,0.21503311092965305,0.2792134063784033,0.26239230087958276,0.5927309251856059,0.918397270841524,0.21751554170623422,0.9707769495435059,0.7049433116335422,0.63816401315853,0.007833320880308747,0.21457277121953666,0.8232072794344276,0.3278482260648161,0.7600006917491555,0.47102807625196874,0.2254065964370966,0.9172908158507198,0.18469130573794246,0.6500781828071922,0.8068259179126471,0.23320608353242278,0.4942792702931911,0.338011208223179,0.13207065546885133,0.23132095392793417,0.7379225061740726,0.37024875404313207,0.9943821600172669,0.10913684987463057,0.6832168139517307,0.2816481599584222,0.991615834645927,0.055727976374328136,0.9387573366984725,0.7806295179761946,0.5096262425649911,0.6801035527605563,0.309935737401247,0.1230900464579463,0.2739546191878617,0.7703213067725301,0.980060180881992,0.6195360484998673,0.8004964245483279,0.8341750563122332,0.8952116693835706,0.966124237049371,0.3863607491366565,0.05875409604050219,0.18033127207309008,0.846302977995947,0.45132785430178046,0.7306406451389194,0.9864346657413989,0.8646570208948106,0.10519146593287587,0.7186661818996072,0.2525866078212857,0.9374439262319356,0.6341771020088345,0.35450188955292106,0.8343451481778175,0.9155297914985567,0.6474101543426514,0.19368953490629792,0.569645136827603,0.503631035098806,0.8244129298254848,0.8464178801514208,0.39723807387053967,0.8573515021707863,0.4380906680598855,0.06292498833499849,0.39874547673389316,0.5792576044332236,0.01708348491229117,0.9633834089618176,0.5586205399595201,0.7387216470669955,0.5129788282793015,0.30258904956281185,0.7484308346174657,0.8778149993158877,0.47585245803929865,0.7763956235721707,0.3098496545571834,0.14167940290644765,0.03053027205169201,0.6872239322401583,0.3172272832598537,0.8918750546872616,0.7995346090756357,0.1823417297564447,0.8875903089065105,0.12729096389375627,0.1963105252943933,0.12426464166492224,0.9449030100367963,0.1556010830681771,0.20121669583022594,0.07832609629258513,0.06846298277378082,0.8856205916963518,0.9978725395631045,0.33093405584804714,0.9566313701216131,0.7948559457436204,0.3993240366689861,0.07979417080059648,0.08358911541290581,0.423624140676111,0.08471960690803826,0.9955645783338696,0.7401465990114957,0.8927510224748403,0.7901963070034981,0.38853522343561053,0.9186014698352665,0.8303756145760417,0.11909548891708255,0.9771939935162663,0.4616520428098738,0.3552267453633249,0.24968478945083916,0.5753661906346679,0.4286057355348021,0.016291072824969888,0.6245659729465842,0.7161701298318803,0.30430561932735145,0.3839172173757106,0.7375481256749481,0.735018040984869,0.8579508762340993,0.8200346338562667,0.7046778118237853,0.44192785932682455,0.17758699040859938,0.9991270762402564,0.9305707672610879,0.22301589860580862,0.2534058045130223,0.4899109418038279,0.48833927884697914,0.08432820183224976,0.5796887711621821,0.8485911693423986,0.41067872173152864,0.4973880627658218,0.8433877702336758,0.23573398892767727,0.7848517305683345,0.037671508733183146,0.9851755367126316,0.38472169847227633,0.2146520430687815,0.2292461923789233,0.7556672957725823,0.692944980924949,0.8157735650893301,0.7212247522547841,0.7266088000033051,0.00924772652797401,0.03262541186995804,0.5186900566332042,0.022307467414066195,0.8588202896062285,0.6782170955557376,0.4071773828472942,0.9694409966468811,0.16404760698787868,0.8529117279686034,0.8296975146513432,0.2386060745920986,0.19992337399162352,0.22559353336691856,0.20318657672032714,0.07827626005746424,0.8052706997841597,0.8593095804098994,0.9652934966143221,0.915323972934857,0.7967587080784142,0.3214914968702942,0.7619061844889075,0.32224276987835765,0.41456241672858596,0.17628059769049287,0.12052826187573373,0.1671818110626191,0.8550093795638531,0.11178049142472446,0.8876574914902449,0.20611303369514644,0.17294252756983042,0.14684561965987086,0.7918434164021164,0.8219728579279035,0.7813821635209024,0.4192810256499797,0.5047477898187935,0.8992597397882491,0.7440119250677526,0.5882170556578785,0.6081467356998473,0.6886444641277194,0.7731486773118377,0.6667874569538981,0.9159205395262688,0.6922092323657125,0.9613471620250493,0.8548726921435446,0.917253470979631,0.970669882837683,0.07748330710455775,0.07896380079910159,0.5991433423478156,0.26668401691131294,0.11718141054734588,0.33225093223154545,0.772835839074105,0.15325789200142026,0.3709826522972435,0.8082421261351556,0.10617406689561903,0.07381015224382281,0.7073286490049213,0.6823488054797053,0.3724743314087391,0.7101243247743696,0.1869414623361081,0.14248606516048312,0.4299461795017123,0.9041659410577267,0.7236080220900476,0.545803491724655,0.4872288180049509,0.4495840750169009,0.9895962150767446,0.9745155717246234,0.0224950578995049,0.31174784898757935,0.4748894532676786,0.5568265963811427,0.9724385684821755,0.4899001831654459,0.18244069092907012,0.7545790967997164,0.9989723679609597,0.1946083726361394,0.11913026217371225,0.35622764844447374,0.47397298994474113,0.47404245007783175,0.17905904492363334,0.8853904858697206,0.5362396584823728,0.6837614965625107,0.11152025707997382,0.8353612904902548,0.5697422185912728,0.9583192751742899,0.7534585411194712,0.9697815137915313,0.9835077153984457,0.10407330980524421,0.4809976906981319,0.37831797497347,0.9876610916107893,0.13132865238003433,0.7947316598147154,0.7322661078069359,0.32171075022779405,0.7438642557244748,0.4283222125377506,0.8766682965215296,0.2745903024915606,0.6796647238079458,0.8839587692636997,0.6887940939050168,0.943678135285154,0.8600453448016196,0.4180010703857988,0.8675914572086185,0.35342237167060375,0.05056876363232732,0.028681215131655335,0.809331837343052,0.9995356930885464,0.12124430271796882,0.839263842208311,0.8201278785709292,0.7650104577187449,0.2051754028070718,0.3169208583422005,0.9498062245547771,0.9529396682046354,0.968803534982726,0.04043274465948343,0.005602405173704028,0.9898154092952609,0.8713613357394934,0.5450420081615448,0.4513697070069611,0.9230101453140378,0.31815378670580685,0.24703242583200336,0.2205404865089804,0.2398908098693937,0.1914304462261498,0.8510453004855663,0.18093564524315298,0.269559642765671,0.7632115175947547,0.809331837343052,0.9995356930885464,0.12124430271796882,0.29784000269137323,0.4758842249866575,0.8476090987678617,0.8170984375756234,0.6003034943714738,0.8654634470585734,0.36696061631664634,0.09619089169427752,0.8190885982476175,0.011246104491874576,0.6572334745433182,0.499001978430897,0.18083597160875797,0.5289951127488166,0.514101306675002,0.08283610455691814,0.6740888978820294,0.3268915922380984,0.2966580579522997,0.8217653930187225,0.9082426764070988,0.11549235647544265,0.2521645277738571,0.5963628136087209,0.9151158533059061,0.9200926492922008,0.5332020618952811,0.08458329271525145,0.7936129753943533,0.7096885323990136,0.5128995336126536,0.36061936407350004,0.5871272527147084,0.809331837343052,0.9995356930885464,0.12124430271796882,0.839263842208311,0.7985540942754596,0.8747903383336961,0.008016106905415654,0.6926459558308125,0.8336055693216622,0.03721043048426509,0.7953587556257844,0.42486418480984867,0.5142892657313496,0.5975800817832351,0.7219371858518571,0.8807237304281443,0.6352351843379438,0.6825501488056034,0.5447796306107193,0.03655192814767361,0.7685516357887536,0.422005302272737,0.04591642878949642,0.09667675220407546,0.7574332493823022,0.5599029161967337,0.9636081629432738,0.7903980924747884,0.6299170420970768,0.9277541183400899,0.709250271320343,0.15413976600393653,0.12643636111170053,0.6460132766515017,0.8303948175162077,0.7741824493277818,0.809331837343052,0.9995356930885464,0.12124430271796882,0.839263842208311,0.8201278785709292,0.7650104577187449,0.23302219156175852,0.5562290179077536,0.9406559732742608,0.8560167108662426,0.7868222263641655,0.9004110540263355,0.19847666518762708,0.8822940092068166,0.20813772664405406,0.40335158514790237,0.487757466500625,0.7169061964377761,0.9042002547066659,0.9200926492922008,0.5255199109669775,0.841790403239429,0.9930159575305879,0.43764441716484725,0.47476895386353135,0.2464858628809452,0.8596750351134688,0.7273580657783896,0.37837982433848083,0.019194228807464242,0.42531558801420033,0.913553252350539,0.9748028323519975,0.4955964924301952,0.996266957372427,0.8263263043481857,0.5706852679140866,0.04021396138705313,0.9818468687590212,0.9835952480789274,0.2583744314033538,0.31971933715976775,0.8125810117926449,0.07878075377084315,0.5168281311634928,0.9190533692017198,0.07215287862345576,0.5533656941261142,0.3202495030127466,0.6034970397595316,0.6057388172484934,0.07419402967207134,0.6632630175445229,0.6570863979868591,0.012603281298652291,0.2356733293272555,0.4253952018916607,0.7969716018997133,0.9115096961613744,0.9903660740237683,0.23401525150984526,0.9452955857850611,0.3947403887286782,0.993218717398122,0.1172348209656775,0.04654554044827819,0.7311150077730417,0.11842682608403265,0.872039774665609,0.5214363182894886,0.6204346583690494,0.8905161961447448,0.9042002547066659,0.9200926492922008,0.5448702361900359,0.841790403239429,0.9930159575305879,0.43764441716484725,0.16754105500876904,0.4699842450208962,0.8213784496765584,0.9174419320188463,0.029454734176397324,0.14933899487368762,0.3214624880347401,0.06359320785850286,0.9486332032829523,0.1717016389593482,0.09241691650822759,0.7024914287030697,0.9821726277004927,0.07702307822182775,0.21737927687354386,0.5405943118967116,0.9771946375258267,0.8969527299050242,0.8319433289580047,0.08556520845741034,0.6827712613157928,0.11562313279137015,0.9802424616646022,0.021816325606778264,0.22738749510608613,0.5205850647762418,0.775559903588146,0.4962923410348594,0.8793254783377051,0.998983466764912,0.7613375803921372,0.006771798012778163,0.9360594218596816,0.36993814166635275,0.8925982043147087,0.22919050278142095,0.8222327535040677,0.3931954256258905,0.6305531328544021,0.06025841482914984,0.2616548486985266,0.07815574202686548,0.1834255524445325,0.991694528143853,0.7275841007940471,0.1867145267315209,0.7008693660609424,0.9892505102325231,0.5580093066673726,0.37380401394329965,0.3908519372344017,0.5081923087127507,0.9786498420871794,0.9810580951161683,0.5986851116176695,0.7492165993899107,0.4180899381171912,0.6940959042403847,0.9909223800059408,0.10474992543458939,0.1210234840400517,0.3759712630417198,0.9198822597973049,0.881197729613632,0.9344535132404417,0.7636061098892242,0.407665700186044,0.07979417080059648,0.08358911541290581,0.9071985322516412,0.43811737606301904,0.8897232008166611,0.7387453571427613,0.6670328406617045,0.8116893717087805,0.09141881112009287,0.279151173774153,0.8670100446324795,0.5762683153152466,0.6275572045706213,0.3419213162269443,0.2872256434056908,0.5110104701016098,0.5755962824914604,0.5409703168552369,0.8375433986075222,0.039143930189311504,0.33358648233115673,0.4038883908651769,0.7836482431739569,0.6745389830321074,0.9188928713556379,0.960478306747973,0.699827240081504,0.4107762554194778,0.6982973166741431,0.1518419908825308,0.9048457276076078,0.2481618602760136,0.40439163614064455,0.5096510392613709,0.8294333962257951,0.9897158369421959,0.3289977707900107,0.04431371740065515,0.8419504843186587,0.07167979842051864,0.7542158181313425,0.9107815364841372,0.6746427132748067,0.9771196912042797,0.5982797804754227,0.2846989973913878,0.6731532756239176,0.530630802968517,0.6138864085078239,0.17527976632118225,0.8106535393744707,0.04020758275873959,0.9268876076675951,0.22520494787022471,0.209290653700009,0.2792134063784033,0.21751554170623422,0.9297222602181137,0.6590081041213125,0.21545265498571098,0.8926788729149848,0.8349241993855685,0.918631668202579,0.04561649030074477,0.6606364196632057,0.14043120644055307,0.6443285448476672,0.6531033311039209,0.9720533934887499,0.30899384221993387,0.45405366783961654,0.09079693467356265,0.16289064288139343,0.660589401377365,0.044931380078196526,0.9196925170253962,0.800092758378014,0.0683096197899431,0.19080150709487498,0.30311826104298234,0.8219728579279035,0.7269198754802346,0.4192810256499797,0.6618542731739581,0.25365877989679575,0.658029078040272,0.4145961955655366,0.9743261213880032,0.6855183364823461,0.18528688186779618,0.71434091264382,0.45974392257630825,0.01183064398355782,0.7399635363835841,0.4191069435328245,0.1249926530290395,0.01802582456730306,0.8835500429850072,0.0765856490470469,0.9832517963368446,0.18545623193494976,0.19893813482485712,0.24202858773060143,0.876079540932551,0.8586241793818772,0.6381921775173396,0.6989508818369359,0.10793747706338763,0.2790713356807828,0.43954004999250174,0.06486059981398284,0.22546988329850137,0.3702724224422127,0.4304176764562726,0.8029916887171566,0.9464150057174265,0.9018139750696719,0.8996426297817379,0.36853827838785946,0.6343399714678526,0.6059275642037392,0.6170847518369555,0.3726476749870926,0.5085524003952742,0.7688678312115371,0.088326659752056,0.0337734567001462,0.5931214566808194,0.13132865238003433,0.7947316598147154,0.7322661078069359,0.15901485411450267,0.7438642557244748,0.4283222125377506,0.7356129535473883,0.00924772652797401,0.03262541186995804,0.5186900566332042,0.036716746632009745,0.8573889276012778,0.601530575659126,0.6275347452610731,0.8632672287058085,0.8717096021864563,0.9017560190986842,0.7115637243259698,0.6218994499649853,0.9902597351465374,0.07784449635073543,0.8056996962986887,0.6997171160764992,0.962853732984513,0.809331837343052,0.9995356930885464,0.12124430271796882,0.839263842208311,0.8201278785709292,0.7650104577187449,0.16977086570113897,0.4341279265936464,0.8647661525756121,0.874320290517062,0.05261840973980725,0.4362150982487947,0.48407126497477293,0.165432722074911,0.8745453625451773,0.766432577976957,0.9052336586173624,0.43873946997337043,0.407665700186044,0.07979417080059648,0.08358911541290581,0.41931367572396994,0.10277732531540096,0.780488851480186,0.8646359809208661,0.5064378583338112,0.88523557363078,0.9042002547066659,0.9157324947882444,0.5448702361900359,0.841790403239429,0.9930159575305879,0.43764441716484725,0.42925992351956666,0.8214251899626106,0.7653079309966415,0.3897369459737092,0.9502817890606821,0.4302816563285887,0.6005235856864601,0.010123134590685368,0.799812507815659,0.7536812131293118,0.014191592577844858,0.516328267287463,0.9044838000554591,0.8918111212551594,0.5316231069155037,0.8353454135358334,0.9981405402068049,0.43764441716484725,0.32201544963754714,0.7243651074822992,0.7765462612733245,0.720634184544906,0.04839010210707784,0.35136777767911553,0.4841773668304086,0.965813972754404,0.4388914240989834,0.8390360116027296,0.8095429562963545,0.9546114415861666,0.12601109594106674,0.6735131903551519,0.5329153838101774,0.18160366942174733,0.24969384260475636,0.9074825013522059,0.3507500463165343,0.06973942345939577,0.30327392159961164,0.5587454247288406,0.980817249044776,0.860979188233614,0.3564994689077139,0.3933828277513385,0.15983659424819052,0.16162259876728058,0.5496038794517517,0.7225836063735187,0.28425921918824315,0.23590902518481016,0.6879465482197702,0.02220465545542538,0.6873762081377208,0.7506683194078505,0.3857213584706187,0.20201799157075584,0.3041605856269598,0.2804349586367607,0.7954919375479221,0.8042301475070417,0.34198911348357797,0.17385620204731822,0.35641096462495625,0.0442131026647985,0.758981061168015,0.5821079185698181,0.5587454247288406,0.980817249044776,0.860979188233614,0.16162259876728058,0.5496038794517517,0.7225836063735187,0.9261925055179745,0.2140830799471587,0.1569037006702274,0.9627964636310935,0.23729553492739797,0.7716433012392372,0.993218717398122,0.1172348209656775,0.04143171897158027,0.6995088742114604,0.08667506207711995,0.9250702776480466,0.8747202828526497,0.9289385001175106,0.47614297666586936,0.2006528463680297,0.3506429735571146,0.3629853592719883,0.44665992679074407,0.9285106703173369,0.8989472829271108,0.4106460514012724,0.639298727735877,0.8753919978626072,0.98573137097992,0.2855607196688652,0.08625964168459177,0.5427232088986784,0.00486661889590323,0.7747984272427857,0.40735222888179123,0.5355791766196489,0.5519853122532368,0.3233778977300972,0.9889878935646266,0.7793396604247391,0.9251971235498786,0.14394631749019027,0.40337670943699777,0.9603531742468476,0.5259753896389157,0.6516096268314868,0.5096262425649911,0.6801035527605563,0.309935737401247,0.1230900464579463,0.2739546191878617,0.7703213067725301,0.709250271320343,0.05271867197006941,0.12643636111170053,0.658692151773721,0.7689039879478514,0.971480896929279,0.3223050758242607,0.5492687972728163,0.6332593085244298,0.7814881703816354,0.00600758264772594,0.6791750364936888,0.34478910197503865,0.45460303081199527,0.8163555064238608,0.9340181997977197,0.2317365393973887,0.2337961937300861,0.06338107376359403,0.17647310928441584,0.014472505543380976,0.011580969905480742,0.6241173609159887,0.9466395801864564,0.2489076571073383,0.9379301916342229,0.7675216379575431,0.283529048319906,0.8428547568619251,0.47219519363716245,0.43912739329971373,0.12448965199291706,0.668738221982494,0.20155223505571485,0.9600231798831373,0.5874191280454397,0.016211444977670908,0.9832517963368446,0.04763543140143156,0.6658914983272552,0.8788153394125402,0.807546752737835,0.6857441077008843,0.22627977142110467,0.8684486576821655,0.8341750563122332,0.8952116693835706,0.966124237049371,0.846302977995947,0.45132785430178046,0.7306406451389194,0.48124267160892487,0.692108976887539,0.02647978183813393,0.30045333481393754,0.10726623749360442,0.028378673130646348,0.28876343672163785,0.020910612773150206,0.6984043072443455,0.22572924685664475,0.040692567359656096,0.9935047675389796,0.874320290517062,0.059052790980786085,0.4097735721152276,0.8226819096598774,0.016993146622553468,0.45675020036287606,0.9926239144988358,0.8094740668311715,0.8518592012114823,0.38133637653663754,0.17637788713909686,0.06124957255087793,0.8205987226683646,0.06253965361975133,0.9711090840864927,0.016892407089471817,0.7689652880653739,0.6853969830553979,0.31271830666810274,0.27038361481390893,0.5670466856099665,0.6756824194453657,0.8606172008439898,0.30524250119924545,0.5141769153997302,0.8202864965423942,0.8453230580780655,0.686429703142494,0.09356799186207354,0.9516664501279593,0.5200045632664114,0.0005355195607990026,0.09923160378821194,0.4246239843778312,0.13158944714814425,0.6659068681765348,0.0345665174536407,0.27414610935375094,0.04185605770908296,0.19893301487900317,0.7120749331079423,0.6850768546573818,0.4369785147719085,0.6451381025835872,0.986940969247371,0.7115048463456333,0.5060656813438982,0.9110066455323249,0.11562313279137015,0.9802424616646022,0.021816325606778264,0.04297928581945598,0.9667375301942229,0.7808429906144738,0.3236975586041808,0.7033450391609222,0.19690611609257758,0.1391131323762238,0.8131528978701681,0.8015892580151558,0.35744480788707733,0.6054110501427203,0.7148292134515941,0.24834118341095746,0.8905757004395127,0.34456128324382007,0.36973249074071646,0.9980261046439409,0.8559725671075284,0.459924956317991,0.26841413346119225,0.5104607699904591,0.28261155146174133,0.26831085444428027,0.4519035790581256,0.7329189253505319,0.8464264618232846,0.3661560493055731,0.08498054184019566,0.6949299725238234,0.8928223776165396,0.7644563000649214,0.07500607892870903,0.6323861847631633,0.48833927884697914,0.08432820183224976,0.5796887711621821,0.8485911693423986,0.41067872173152864,0.4973880627658218,0.8300031279213727,0.8028192475903779,0.29843239882029593,0.5844760187901556,0.9142588158138096,0.7657360238954425,0.03011937625706196,0.30831332015804946,0.6443478525616229,0.7103433760348707,0.11313747754320502,0.398102909559384,0.5458599531557411,0.47667170292697847,0.330523116979748,0.736386532895267,0.8524591524619609,0.9786589983850718,0.43073272821493447,0.680615289369598,0.7792163547128439,0.6086253458634019,0.3854381993878633,0.2602230275515467,0.8906268528662622,0.4631755957379937,0.6675458059180528,0.6617231569252908,0.5964021445252001,0.09593454701825976,0.5079591921530664,0.9166975445114076,0.7484935903921723,0.00583571451716125,0.5887416312471032,0.8623278161976486,0.3993240366689861,0.07979417080059648,0.08358911541290581,0.423624140676111,0.08471960690803826,0.9955645783338696,0.6299566512461752,0.19249880337156355,0.6269505338277668,0.43118998198769987,0.036992942448705435,0.9892491647042334,0.43948860955424607,0.3650846118107438,0.1284368943888694,0.44350857799872756,0.16238351142965257,0.5879708353895694,0.31500788033008575,0.004346114117652178,0.7850945151876658,0.2294672834686935,0.09241691650822759,0.7017017244361341,0.03764498862437904,0.16873031086288393,0.2169781767297536,0.19370332453399897,0.24182805488817394,0.5566360796801746,0.2548161600716412,0.28891988610848784,0.16918402351439,0.8778035091236234,0.9904101768042892,0.9778835773468018,0.40120790735818446,0.9260788594838232,0.6266532668378204,0.0006084104534238577,0.048862865660339594,0.7948687828611583,0.28159942757338285,0.8719692674931139,0.2786810777615756,0.7903980924747884,0.7105844295583665,0.9277541183400899,0.709250271320343,0.15012787096202374,0.12643636111170053,0.37175156525336206,0.2276396038942039,0.6422803266905248,0.874320290517062,0.05261840973980725,0.3947734469547868,0.9926239144988358,0.20883483719080687,0.7302567393053323,0.6806277208961546,0.8022059944923967,0.5709438037592918,0.9042002547066659,0.9200926492922008,0.5448702361900359,0.841790403239429,0.9930159575305879,0.43764441716484725,0.40509927086532116,0.068786641350016,0.7123011643998325,0.07867904240265489,0.5415185748133808,0.6872903667390347,0.8472842962946743,0.27560250530950725,0.7734097307547927,0.2422113239299506,0.9911575433798134,0.23364213574677706,0.1535824527963996,0.3778685596771538,0.5010830271057785,0.18100152886472642,0.3959328895434737,0.6938644864130765,0.45991692948155105,0.6642242600210011,0.4956456699874252,0.2763872698415071,0.7114036730490625,0.3279319326393306,0.9913920627441257,0.35482086217962205,0.585312039591372,0.18947764113545418,0.3508443182799965,0.7708495364058763,0.28425921918824315,0.23590902518481016,0.6879465482197702,0.729663091013208,0.8383396961726248,0.23527674959041178,0.11842841608449817,0.9207061168272048,0.7602690674830228,0.08378644404001534,0.48949563200585544,0.5131630836986005,0.12489826162345707,0.00652717612683773,0.1867707367055118,0.07446205383166671,0.5832128636538982,0.9832512391731143,0.7463045553304255,0.9880399559624493,0.6822437217924744,0.03083887160755694,0.9988722749985754,0.8464990239590406,0.9391459063626826,0.048653698759153485,0.15230598859488964,0.8644987575244159,0.028820553794503212,0.460914438823238,0.9623205924872309,0.08107181079685688,0.7067364708054811,0.5447222515940666,0.8004678697325289,0.5085518707055598,0.8101390835363418,0.9832517963368446,0.02343059075064957,0.6731119912583381,0.6719696619547904,0.6633910820819438,0.18081099446862936,0.8644558161031455,0.9858735864982009,0.26256473711691797,0.34790845424868166,0.920458345208317,0.18269816972315311,0.5272545763291419,0.5303370563779026,0.43539037997834384,0.7761233851779252,0.2178201312199235,0.874320290517062,0.05261840973980725,0.4097735721152276,0.9926239144988358,0.8272663510870188,0.7634065703023225,0.9848593205679208,0.3523906304035336,0.49458818952552974,0.8714667609892786,0.9952843270730227,0.638646668754518,0.6940959042403847,0.9909223800059408,0.10474992543458939,0.27113046194426715,0.6740373116917908,0.9214768384117633,0.377056541852653,0.3903366541489959,0.9980944963172078,0.22272279160097241,0.9655808946117759,0.05666466569527984,0.5638152034953237,0.9844745798036456,0.6081836654338986,0.36696061631664634,0.09619089169427752,0.81361761293374,0.8038493832573295,0.04065099125728011,0.010487444698810577,0.15176080912351608,0.9563103695400059,0.8388271508738399,0.7921635806560516,0.9812779400963336,0.1810812430921942,0.15636421414092183,0.8634312257636338,0.5691246117930859,0.7006985316984355,0.8958659160416573,0.9106916135642678,0.5910785442683846,0.7369602331891656,0.5204083919525146,0.13016954786144197,0.5972400160972029,0.20188578707166016,0.006101203383877873,0.30701210373081267,0.9376112408936024,0.7262759385630488,0.8829621477052569,0.5737981353886425,0.17758699040859938,0.9991270762402564,0.8347257166169584,0.24524647067300975,0.39377024257555604,0.2502934895455837,0.051399967866018414,0.8551363022997975,0.3315142791252583,0.0037336356472223997,0.18792935740202665,0.7144770498853177,0.37117949733510613,0.8417664559092373,0.6125092855654657,0.4380906680598855,0.06292498833499849,0.4733167183585465,0.5893149578478187,0.5361744477413595,0.9310061347205192,0.6492708125151694,0.3673172548878938,0.2532103799749166,0.44848989858292043,0.7669470594264567,0.8473149735946208,0.10793747706338763,0.2790713356807828,0.43954004999250174,0.06486059981398284,0.22546988329850137,0.3702724224422127,0.16385090700350702,0.874915522756055,0.8423331684898585,0.005430025747045875,0.58639578637667,0.03746328013949096,0.13867964502424002,0.32870954158715904,0.7762627450283617,0.210508331656456,0.9497893359512091,0.46529030008241534,0.44056599983014166,0.33201164775528014,0.7722198558039963,0.8328074107412249,0.9736448756884784,0.41824376909062266,0.08378644404001534,0.8458946521859616,0.844537056516856,0.11197633063420653,0.002803175477311015,0.0329017483163625,0.01925635291263461,0.531890140613541,0.7774638677947223,0.019383857492357492,0.9832517963368446,0.04293679678812623,0.0022091311402618885,0.8746903983410448,0.9391760276630521,0.7729253605939448,0.7869800962507725,0.671596678905189,0.9042002547066659,0.9157324947882444,0.5448702361900359,0.841790403239429,0.9930159575305879,0.43764441716484725,0.2885216400027275,0.8449574045371264,0.664843798847869,0.7812465960159898,0.12293010973371565,0.929908842779696,0.6497448838781565,0.9838664340786636,0.5479381380137056,0.062369636725634336,0.7842387717682868,0.16929085389710963,0.20099087106063962,0.6501069511286914,0.7659202378708869,0.8700229008682072,0.9142821526620537,0.8122000051662326,0.14114447822794318,0.36464786319993436,0.05964743997901678,0.28686155611649156,0.11087481840513647,0.31776260980404913,0.22572924685664475,0.019680152647197247,0.9504348512273282,0.31516034295782447,0.022511592600494623,0.36879495927132666,0.06561197503469884,0.9971319616306573,0.19536827434785664,0.004903500434011221,0.6611482335720211,0.6423769870307297,0.028999567963182926,0.14594276901334524,0.7990664553362876,0.8101390835363418,0.9832517963368446,0.02343059075064957,0.49572437768802047,0.7149395486339927,0.6666647358797491,0.6665203887969255,0.362347265239805,0.9466943314764649,0.23495850968174636,0.34794135577976704,0.05669241794385016,0.3390073445625603,0.8226508474908769,0.6669488593470305,0.38016767310909927,0.8819430824369192,0.912916689645499,0.28089347458444536,0.23590902518481016,0.6879465482197702,0.729663091013208,0.8705507183913141,0.23527674959041178,0.33788573602214456,0.45946488180197775,0.7111387739423662,0.8852248957846314,0.9200926492922008,0.5205479585565627,0.8418479054234922,0.9981405402068049,0.44641820527613163,0.20226193056441844,0.7612220963928849,0.6661194001790136,0.7706757590640336,0.5503110866993666,0.3729697819799185,0.17321939789690077,0.31236687349155545,0.8513809856958687,0.3427616823464632,0.4516583781223744,0.4084318217355758,0.41931367572396994,0.08507233345881104,0.9955645783338696,0.8806033628061414,0.8916956044267863,0.2886866289190948,0.419500331627205,0.45632661134004593,0.34427482448518276,0.28425921918824315,0.23590902518481016,0.39717937144450843,0.7361066336743534,0.8474737531505525,0.756695133401081,0.39299874380230904,0.4616374762263149,0.4727343257982284,0.8883144191931933,0.9289385001175106,0.48306973720900714,0.9374192417599261,0.9250410126987845,0.7493588337674737,0.11955423699691892,0.7937253583222628,0.39361390960402787,0.709250271320343,0.05271867197006941,0.12643636111170053,0.7349317611660808,0.5891728051938117,0.971480896929279,0.6035920109134167,0.23608874110504985,0.5242534175049514,0.9092946376185864,0.06584186805412173,0.8112045861780643,0.6510577250737697,0.0005559194833040237,0.7121046129614115,0.8346416193526238,0.017079841811209917,0.09552420699037611,0.2804349586367607,0.8642964097671211,0.8042301475070417,0.13779788906686008,0.4064236308913678,0.5182687947526574,0.1719091550912708,0.3699057281482965,0.29576623486354947,0.9151158533059061,0.9200926492922008,0.5351066184230149,0.8057091624941677,0.778308967826888,0.7972017752472311,0.12034948403015733,0.3619778335560113,0.2854910884052515,0.2849910669028759,0.24408980878069997,0.5978977107442915,0.30910384585149586,0.5574396448209882,0.7030998200643808,0.47913634264841676,0.8726290971972048,0.31484639551490545,0.46021158108487725,0.8501167667564005,0.2888414904009551,0.7332965184468776,0.5838191085495055,0.5935046540107578,0.49365317611955106,0.625391885638237,0.733241356909275,0.3644054173491895,0.015709818340837955,0.2182415146380663,0.5736465086229146,0.3787008097860962,0.7464701114222407,0.5621691804844886,0.5596472003962845,0.648882128065452,0.28425921918824315,0.23590902518481016,0.39717937144450843,0.7361066336743534,0.845729399472475,0.9311180608347058,0.07481863931752741,0.934019798412919,0.28429685439914465,0.26256473711691797,0.34790845424868166,0.920458345208317,0.33560122968629,0.6411459795199335,0.161464641103521,0.18269816972315311,0.5272545763291419,0.5303370563779026,0.8949929785449058,0.9200926492922008,0.5333983167074621,0.841790403239429,0.9981405402068049,0.4303263803012669,0.015483086230233312,0.7619656920433044,0.646920622792095,0.705420944141224,0.20490034925751388,0.7176377407740802,0.41493063955567777,0.04591642878949642,0.13938163057900965,0.2985854104626924,0.3521603266708553,0.7516057407483459,0.11562313279137015,0.9802424616646022,0.021816325606778264,0.017816434847190976,0.49444430926814675,0.7517737275920808,0.5788009457755834,0.568360906559974,0.834033666877076,0.11305178212933242,0.7363968749996275,0.15579334483481944,0.13695050193928182,0.6124439227860421,0.6159805667120963,0.3926596501842141,0.22048329864628613,0.8353396484162658,0.3238787343725562,0.19690374261699617,0.039718813030049205,0.31699986453168094,0.8932239422574639,0.6073937560431659,0.04287075134925544,0.9267586029600352,0.9597053106408566,0.5844819631893188,0.46636972739361227,0.04019708978012204,0.18933388800360262,0.7190003350842744,0.7352750930003822,0.2146520430687815,0.2292461923789233,0.8305842941626906,0.09152080188505352,0.9972719310317189,0.3816580029670149,0.17558253440074623,0.9195129969157279,0.9226272492669523,0.16519472072832286,0.2943584725726396,0.30068758712150156,0.8856345012318343,0.9289385001175106,0.49122933484613895,0.9374192417599261,0.9282365140970796,0.8406085956376046,0.476311887614429,0.6945418389514089,0.2710171148646623,0.8856345012318343,0.9289385001175106,0.49007896799594164,0.9374192417599261,0.9250410126987845,0.7493588337674737,0.2006528463680297,0.32558488263748586,0.3630730740260333,0.5551384123973548,0.8981787865050137,0.563204281963408,0.6388341789133847,0.39643969060853124,0.3006438962183893,0.49808113905601203,0.45201921463012695,0.7378680382389575,0.17397834616713226,0.8307847182732075,0.7975148586556315,0.715658180648461,0.6744873099960387,0.7510404398199171,0.5785037984605879,0.9879043924156576,0.05241160001605749,0.052157784113660455,0.8622819285374135,0.577779277227819,0.20603556744754314,0.9461771722417325,0.34981131041422486,0.5128430440090597,0.052467358531430364,0.6719225056003779,0.874320290517062,0.05261840973980725,0.4362150982487947,0.9667364310007542,0.2239402576815337,0.7471641472075135,0.5363900447264314,0.39354108762927353,0.41394915827549994,0.8219728579279035,0.7765218822751194,0.4192810256499797,0.452586711384356,0.08579379972070456,0.6048439708538353,0.5723511150572449,0.9703987762331963,0.5726104362402111,0.4496390428394079,0.8829621477052569,0.5737981353886425,0.8208735336083919,0.7894355987664312,0.4597056235652417,0.5121783681679517,0.5176052837632596,0.5603052643127739,0.11878420459106565,0.9990540291182697,0.543306462932378,0.2457844358868897,0.7245866388548166,0.3521942915394902,0.20981235941872,0.8853341185022146,0.697241572663188,0.8433524004649371,0.003686749842017889,0.5844416425097734,0.9977910502348095,0.38862448814325035,0.14095380925573409,0.9791255802847445,0.9969106714706868,0.8638974537607282,0.23673979425802827,0.214376715477556,0.9652782999910414,0.2290060743689537,0.9903792075347155,0.5964546096511185,0.5334044420160353,0.9958067804109305,0.026105330791324377,0.6977200913242996,0.7778002130798995,0.6351475461851805,0.5714017890859395,0.9530276951845735,0.5672463406808674,0.29714201763272285,0.27015022304840386,0.37859394727274776,0.28089347458444536,0.23590902518481016,0.6879465482197702,0.5194335530977696,0.8705507183913141,0.23527674959041178,0.1908156219869852,0.38846000120975077,0.6560671154875308,0.46165960701182485,0.08291451400145888,0.3699558535590768,0.4886459296103567,0.027272738283500075,0.7105363588780165,0.7044024188071489,0.3867015710566193,0.4981563254259527,0.874320290517062,0.05261840973980725,0.4362150982487947,0.9759289510548115,0.14579321979545057,0.8904989587608725,0.25304856267757714,0.8501091003417969,0.25138416420668364,0.17382332449778914,0.2695407224819064,0.8147759714629501,0.7883651673328131,0.5698212578427047,0.39820898696780205,0.6923536763060838,0.56970313959755,0.3604039615020156,0.28261155146174133,0.26831085444428027,0.4519035790581256,0.7329189253505319,0.8464264618232846,0.37308419472537935,0.615701911970973,0.97754748724401,0.7472743529360741,0.8717096021864563,0.9409574130550027,0.7544448268599808,0.6218994499649853,0.9902597351465374,0.09475395176559687,0.679861162090674,0.8530990765430033,0.7223940470721573,0.1741333599202335,0.40351317659951746,0.10390656581148505,0.07265381584875286,0.9528841250576079,0.5348357150796801,0.37982033588923514,0.5280975727364421,0.9306843306403607,0.5171296498738229,0.7113551127258688,0.5495094505604357,0.7607445509638637,0.9143963735550642,0.8051365888677537,0.24219340714626014,0.5523544915486127,0.21216501598246396,0.2849910669028759,0.24408980878069997,0.7773425090126693,0.7381154482718557,0.8383396961726248,0.5666320878081024,0.7367919941898435,0.8984587925951928,0.22164971008896828,0.009860638994723558,0.90582639654167,0.1442544290330261,0.11878420459106565,0.9990540291182697,0.543306462932378,0.5182207776233554,0.5841287190560251,0.8768176753073931,0.7896878148894757,0.6963254457805306,0.06787077663466334,0.2120891991071403,0.2985267152544111,0.9237437911797315,0.7115128349978477,0.5708909945096821,0.5720582662615925,0.8056996962986887,0.6997171160764992,0.962853732984513,0.4297910330351442,0.4840154582634568,0.4124387442134321,0.4258704110980034,0.7765180165879428,0.1857642801478505,0.7736071520484984,0.9735953263007104,0.2411902262829244,0.9037313857115805,0.8893572788219899,0.6026344657875597,0.25502446899190545,0.3957185638137162,0.7155688269995153,0.9018139750696719,0.8996426297817379,0.3614279313478619,0.22008045809343457,0.3526213236618787,0.29821236291900277,0.6673176111653447,0.6387714683078229,0.8981991179753095,0.8219728579279035,0.7813821635209024,0.4192810256499797,0.5047477898187935,0.8992597397882491,0.7440119250677526,0.6732608648017049,0.022503417916595936,0.3940968916285783,0.9984256522729993,0.4798855532426387,0.1562552647665143,0.8567303547170013,0.4311354476958513,0.48994742101058364,0.9411709983833134,0.03830978460609913,0.9101082079578191,0.42040826566517353,0.9502817890606821,0.4302816563285887,0.6228659239131957,0.11889334721490741,0.799812507815659,0.5836897674016654,0.341280265012756,0.3248512027785182,0.19993597432039678,0.6810675908345729,0.07958383508957922,0.46637392067350447,0.412884900579229,0.6646698059048504,0.3068720609880984,0.5899889152497053,0.8098223442211747,0.8248442376498133,0.8311153508257121,0.9428290005307645,0.2299888301640749,0.7159204392228276,0.13790634949691594,0.6909099610056728,0.9000884636770934,0.47220610710792243,0.528887630905956,0.5934581148903817,0.08106993231922388,0.8194944870192558,0.8344854724127799,0.9199299525935203,0.44940686714835465,0.951930008130148,0.5513370379339904,0.007515603676438332,0.14862822834402323,0.7470830245874822,0.08546039811335504,0.09507313813082874,0.1758393459022045,0.168691486120224,0.8325527627021074,0.6288031262811273,0.2763872698415071,0.7114036730490625,0.3279319326393306,0.18947764113545418,0.3508443182799965,0.7708495364058763,0.5290532519575208,0.9499395415186882,0.4496294856071472,0.28261155146174133,0.22749596741050482,0.4056559079326689,0.24803966702893376,0.3712403029203415,0.1527526651043445,0.1907010308932513,0.8984389333054423,0.9898769755382091,0.46021158108487725,0.5866129763890058,0.3200720651075244,0.2532662255689502,0.26756437961012125,0.6477827688213438,0.5917325294576585,0.7005720145534724,0.580425314605236,0.709250271320343,0.15449594496749341,0.12643636111170053,0.7540380235295743,0.9046867722645402,0.7528901109471917,0.4769292555283755,0.5569686160888523,0.6686087620910257,0.709250271320343,0.05271867197006941,0.12643636111170053,0.7349317611660808,0.8004657018464059,0.971480896929279,0.3008076949045062,0.6689436621963978,0.4477563339751214,0.23495850968174636,0.34794135577976704,0.03972197650000453,0.7095576722640544,0.46341422316618264,0.8379192845895886,0.3390073445625603,0.8226508474908769,0.6669488593470305,0.4380906680598855,0.06292498833499849,0.47172579471953213,0.6434631585143507,0.29437841940671206,0.09595593204721808,0.5792576044332236,0.6393640975002199,0.974366054404527,0.14231766271404922,0.2017178637906909,0.8948352853767574,0.3710478078573942,0.10393561748787761,0.19854623638093472,0.32430274318903685,0.07724358420819044,0.4455238445661962,0.9824028541333973,0.2656897802371532,0.15483106183819473,0.29971641791053116,0.7012849352322519,0.5490035321563482,0.9989281732123345,0.35658152401447296,0.8343160469084978,0.7056148077826947,0.9025520645081997,0.3487940598279238,0.4483324324246496,0.6800930541940033,0.20849398174323142,0.8294049126561731,0.7429934374522418,0.9785075054969639,0.7337038302794099,0.8531809288542718,0.4192810256499797,0.8918269299902022,0.3657941799610853,0.2545947413891554,0.36787882866337895,0.3653349061496556,0.8607741640880704,0.28188538388349116,0.3722165604121983,0.0376698721665889,0.3457714067772031,0.34283648058772087,0.7167476348113269,0.030139907728880644,0.926165011478588,0.7797790244221687,0.46021158108487725,0.8501167667564005,0.2888414904009551,0.2532662255689502,0.26756437961012125,0.6477827688213438,0.7332965184468776,0.755738910054788,0.5935046540107578,0.5003776911180466,0.26132406503893435,0.2438519166316837,0.9184921036940068,0.2538908508140594,0.30947032873518765,0.5934680902864784,0.37404333148151636,0.9745703442022204,0.009860638994723558,0.9334935848601162,0.7343827807344496,0.18974317121319473,0.7786298419814557,0.5941492817364633,0.08546039811335504,0.0904027649667114,0.1990870505105704,0.5910785442683846,0.7369602331891656,0.5204083919525146,0.13016954786144197,0.5972400160972029,0.20188578707166016,0.9000111892819405,0.1344918585382402,0.8043912737630308,0.8277659802697599,0.7891370740253478,0.3182232666295022,0.4667678165715188,0.7698591372463852,0.7884797258302569,0.3499307530000806,0.7775641861371696,0.4198631630279124,0.3698348072357476,0.6960633667185903,0.54896788764745,0.7598425797186792,0.7697286999318749,0.19658315181732178,0.5963479697238654,0.9087572037242353,0.7795893861912191,0.9821726277004927,0.07947518024593592,0.1681395119521767,0.5171296498738229,0.7113551127258688,0.5495094505604357,0.7607445509638637,0.9143963735550642,0.8051365888677537,0.9032856826670468,0.5893000843934715,0.42903399374336004,0.8545837306883186,0.649489879142493,0.09672781801782548,0.6454953541979194,0.1123978877440095,0.9964857560116798,0.997179281199351,0.813515008892864,0.20237899594940245,0.9333158975932747,0.1749606530647725,0.4597647222690284,0.5343134365975857,0.3725834130309522,0.8596352988388389,0.8219728579279035,0.7765218822751194,0.4192810256499797,0.654328168136999,0.20386928203515708,0.9557646214962006,0.7983779369387776,0.7363338903523982,0.14643216039985418,0.7903980924747884,0.7561607353854924,0.9277541183400899,0.709250271320343,0.15833568014204502,0.12643636111170053,0.5854197724256665,0.07317896489985287,0.4653627281077206,0.9812373907770962,0.4936897538136691,0.40860260208137333,0.07116551138460636,0.508626562776044,0.6431658451911062,0.6196498684585094,0.8226714488118887,0.46653483156114817,0.709250271320343,0.05271867197006941,0.12643636111170053,0.7349317611660808,0.747591424966231,0.971480896929279,0.4194302437826991,0.6940403876360506,0.42023337609134614,0.7874818805139512,0.9533703494817019,0.19205576879903674,0.49777580332010984,0.8964549503289163,0.8151952524203807,0.8905495922081172,0.8587163244374096,0.5105275204405189,0.8219728579279035,0.7437052568420768,0.4192810256499797,0.7208395451307297,0.14705564710311592,0.6856539298314601,0.4346109756734222,0.6466705407947302,0.4098950009793043,0.1728342273272574,0.8623504329007119,0.22381410840898752,0.7488696840591729,0.06193939642980695,0.728410214651376,0.6645629559643567,0.7179100182838738,0.5618227075319737,0.5637428150512278,0.8826191299594939,0.3228891249746084,0.8599732934962958,0.349430293077603,0.6525804214179516,0.27854157937690616,0.8689664697740227,0.5384206268936396,0.3457714067772031,0.34283648058772087,0.6819340300280601,0.0963417929597199,0.9625599917490035,0.6154131244402379,0.12164677307009697,0.4414746018592268,0.21558316051959991,0.6435410482808948,0.3752361296210438,0.5878750593401492,0.2523501240648329,0.45860482286661863,0.5541094832587987,0.19803620665334165,0.7971624978817999,0.3709146261680871,0.2877683131955564,0.2924892292357981,0.3728150296956301,0.24803966702893376,0.3712403029203415,0.1527526651043445,0.23070059879682958,0.8859603358432651,0.9868510416708887,0.3660864916164428,0.670756526524201,0.6009551943279803,0.794612004654482,0.47504661325365305,0.6371776873711497,0.684774647699669,0.8738557612523437,0.27340871654450893,0.7356129535473883,0.00924772652797401,0.03262541186995804,0.4557276270352304,0.05106253386475146,0.7570730929728597,0.5828600784298033,0.6016441811807454,0.7217147711198777,0.6610480665694922,0.5770284745376557,0.23883621441200376,0.90160823892802,0.8915635934099555,0.650267394259572,0.5529172141104937,0.3558635220397264,0.6210743067786098,0.8055873746052384,0.6691319609526545,0.9524872198235244,0.98573137097992,0.2855607196688652,0.08625964168459177,0.8043520385399461,0.16807914315722883,0.4690184372011572,0.7361775042954832,0.151248223381117,0.990424694493413,0.9084408953785896,0.018494613468647003,0.08634061389602721,0.9881949501577765,0.04988645762205124,0.4309887948911637,0.6649743835441768,0.8599553969688714,0.24429290113039315,0.6642668624408543,0.15774102415889502,0.7941245259717107,0.9851350812241435,0.18356477259658277,0.46870810352265835,0.6918122870847583,0.9389657010324299,0.913176812697202,0.7863734585698694,0.22865019785240293,0.516341790324077,0.9706997056491673,0.2759733833372593,0.07730519119650126,0.874320290517062,0.05261840973980725,0.4362150982487947,0.9759289510548115,0.12509451596997678,0.8904989587608725,0.35738991503603756,0.6744697289541364,0.17915869364514947,0.36070241359993815,0.8431133276317269,0.31291559105739,0.8688608943484724,0.769329871982336,0.9832555854227394,0.29085149778984487,0.9386696487199515,0.20920570893213153,0.9169328908901662,0.3512301912996918,0.6224797291215509,0.41493063955567777,0.04591642878949642,0.11780332634225488,0.959167406661436,0.8334997864440084,0.7627673007082194,0.7393647392746061,0.8945092491339892,0.446640697773546,0.242972896900028,0.9853823855519295,0.1405997108668089,0.7200419900473207,0.2629209205042571,0.9141242064069957,0.6890893210656941,0.918078540591523,0.4141826566774398,0.9087499189190567,0.04284340841695666,0.6901230541989207,0.5818740238901228,0.8816365664824843,0.39585318276658654,0.7780030623544008,0.27883616858161986,0.005767149617895484,0.5815083601046354,0.39854404563084245,0.8048065525945276,0.5696786448825151,0.8545808894559741,0.6886961713898927,0.8902032407931983,0.4595617961604148,0.5232355708722025,0.8362594614736736,0.6741224483121186,0.09319517738185823,0.08394012087956071,0.5840872963890433,0.8808043727185577,0.28261155146174133,0.28620701376348734,0.4330024332739413,0.7258039053995162,0.7521636819001287,0.2665328842122108,0.7512052333913743,0.709563052514568,0.7974191405810416,0.3230983268003911,0.5735297715291381,0.8048916298430413,0.11150551680475473,0.5560241448692977,0.12104826793074608,0.23729839362204075,0.14347111247479916,0.5686185054946691,0.46263147704303265,0.0005091046914458275,0.5010567477438599,0.5566254511941224,0.3189045910257846,0.8157258427236229,0.6826619261410087,0.0005083824507892132,0.17526961537078023,0.7356129535473883,0.009105991804972291,0.06513531692326069,0.40654341340996325,0.589069162029773,0.8670633151195943,0.4940778666641563,0.2039970753248781,0.5582144903019071,0.7356129535473883,0.009105991804972291,0.11377059295773506,0.29809674620628357,0.6236251359805465,0.7465297225862741,0.5780947499442846,0.689519140869379,0.6300760419107974,0.7356129535473883,0.013588430592790246,0.06431162753142416,0.4727975269779563,0.00887998123653233,0.5182241844013333,0.49497646396048367,0.9552292423322797,0.9059456221293658,0.5179367298260331,0.5244377611670643,0.6112579866312444,0.4855845475103706,0.18189087160862982,0.7157246577553451,0.2835216314997524,0.7467358757276088,0.1607506142463535,0.7903980924747884,0.8415479601826519,0.9277541183400899,0.709250271320343,0.15833568014204502,0.12643636111170053,0.4432501937262714,0.5118209586944431,0.43325409898534417,0.874320290517062,0.05261840973980725,0.40435657650232315,0.9926239144988358,0.20883483719080687,0.76507298508659,0.8193175760097802,0.03953477926552296,0.317344450391829,0.8193175760097802,0.03953477926552296,0.31986751966178417,0.8720040286425501,0.21486330963671207,0.7572997785173357,0.9726810541469604,0.3045168768148869,0.40945906774140894,0.1787587737198919,0.4251522764097899,0.7298930690158159,0.3972537296358496,0.07548193540424109,0.22792845917865634,0.2855395295191556,0.26315556024201214,0.5284481467679143,0.9913786218967289,0.3289977707900107,0.04431371740065515,0.8671713599469513,0.06694327434524894,0.7414256224874407,0.5336051897611469,0.7924656919203699,0.7004006442148238,0.23729108506813645,0.806266063824296,0.6237252152059227,0.10219058278016746,0.4482455688994378,0.7811448762658983,0.6654253562446684,0.45571662159636617,0.08039264916442335,0.7903980924747884,0.6299170420970768,0.9277541183400899,0.7084162349347025,0.15413976600393653,0.12643636111170053,0.05437498912215233,0.9191976867150515,0.43003376317210495,0.7874818805139512,0.9556282113771886,0.20625439216382802,0.8852990360464901,0.9120319555513561,0.7154913682024926,0.25508256535977125,0.9039738937281072,0.5619448963552713,0.7831962858326733,0.16943614021874964,0.9240602981299162,0.6613678683061153,0.9838664340786636,0.5479381380137056,0.5926203497219831,0.9563860003836453,0.011654233327135444,0.5432208471465856,0.6320477649569511,0.528105886420235,0.7665468810591847,0.9034369813743979,0.17335558449849486,0.276992125203833,0.22989739896729589,0.7821037615649402,0.2637529482599348,0.8099398342892528,0.490919770905748,0.6872128469403833,0.8547431479673833,0.11869318597018719,0.8690036658663303,0.4491479378193617,0.8722744525875896,0.12856627674773335,0.39273152709938586,0.42632340639829636,0.7159416889771819,0.6176996997091919,0.6004537071567029,0.6480982978828251,0.7038175698835403,0.4545083208940923,0.4140070294961333,0.26239669253118336,0.7775298713240772,0.3739877361804247,0.9620520926546305,0.24260343494825065,0.4234875102993101,0.5384690531063825,0.458377841161564,0.5429062298499048,0.9395698346197605,0.755827713990584,0.10783174214884639,0.2971249483525753,0.32316986029036343,0.6436228735838085,0.8127339070197195,0.3991700897458941,0.2849910669028759,0.24408980878069997,0.5978977107442915,0.07563057588413358,0.6456818170845509,0.7206875605043024,0.24928989680483937,0.3927262728102505,0.15900928573682904,0.44210561900399625,0.9761647062841803,0.2603133169468492,0.08309913519769907,0.6577794384211302,0.4520950654987246,0.15428253798745573,0.6913631267379969,0.7639796019066125,0.7356129535473883,0.009105991804972291,0.09559740242548287,0.4876313842833042,0.9879735969007015,0.8189948054496199,0.5189707544632256,0.0726447191555053,0.5608627803158015,0.6435410482808948,0.3752361296210438,0.5878750593401492,0.2523501240648329,0.45860482286661863,0.5541094832587987,0.7506693787872791,0.7773385308682919,0.3328182306140661,0.18933388800360262,0.9671630919910967,0.7135808817110956,0.29862184007652104,0.6280452101491392,0.6962114376947284,0.018313033040612936,0.7030325848609209,0.06439044373109937,0.874320290517062,0.0560125692281872,0.40435657650232315,0.8193175760097802,0.03953477926552296,0.3110535116866231,0.8720040286425501,0.42972594616003335,0.7572997785173357,0.8288798583671451,0.42858581780456007,0.4328600044827908,0.42776877735741436,0.5796523552853614,0.07977471151389182,0.3027067717630416,0.4017344848252833,0.9587891919072717,0.9600698533467948,0.42592672747559845,0.3682295475155115,0.6772688787896186,0.7964920699596405,0.5170792783610523,0.49620575457811356,0.588882289128378,0.5832481572870165,0.5391637661959976,0.4823595865163952,0.3328441334888339,0.7708049945067614,0.6718682888895273,0.3489174065180123,0.7837423768360168,0.4980194775853306,0.786789410514757,0.1716399567667395,0.8165126056410372,0.31242079799994826,0.2405860887374729,0.6945809388998896,0.2616428865585476,0.20299910311587155,0.30311699002049863,0.8924292179290205,0.2849910669028759,0.24408980878069997,0.5978977107442915,0.07563057588413358,0.6456818170845509,0.7206875605043024,0.4632548042573035,0.8591455610003322,0.1471193132456392,0.7899073897860944,0.7114036730490625,0.3220153155270964,0.3389797655399889,0.3513926868326962,0.5878750593401492,0.25612425711005926,0.3120654849335551,0.5541094832587987,0.6948175502475351,0.012865012744441628,0.6536844759248197,0.2107938453555107,0.9319060482084751,0.7862087222747505,0.6021882912609726,0.002844837959855795,0.02335981000214815,0.277369522722438,0.4086474967189133,0.7167476348113269,0.16362359141930938,0.858128150459379,0.5040135974995792,0.32537533389404416,0.5808151171077043,0.24183977721258998,0.3242868292145431,0.5279175343457609,0.13325801026076078,0.6836240170523524,0.6830039324704558,0.5682359794154763,0.2354945749975741,0.27433420112356544,0.7608800751622766,0.18100152886472642,0.3959328895434737,0.6938644864130765,0.45991692948155105,0.6642242600210011,0.2343929628841579,0.5453424255829304,0.9058424802497029,0.5300492716487497,0.6819765798281878,0.9500228341203183,0.14783239178359509,0.615127612836659,0.8210663951467723,0.5354678062722087,0.8131822883151472,0.26627304032444954,0.7741453328635544,0.5570128466933966,0.8359687339980155,0.050815874710679054,0.1424480238929391,0.41605415963567793,0.446548129664734,0.5425517426338047,0.5406893980689347,0.9580369947943836,0.1027716277167201,0.9301932153757662,0.4095236628782004,0.33391965948976576,0.6165549182333052,0.249680798035115,0.5666147351730615,0.6357269731815904,0.7961443737149239,0.5245016841217875,0.5508429994806647,0.2834050231613219,0.6924489841330796,0.10545026673935354,0.8465167577378452,0.44655175297521055,0.014287319034337997,0.32454065093770623,0.14231766271404922,0.2017178637906909,0.9965956243686378,0.3710478078573942,0.0975898802280426,0.1386175099760294,0.23685375996865332,0.37143715703859925,0.3190605822019279,0.3457714067772031,0.34283648058772087,0.7167476348113269,0.3349347119219601,0.33341038040816784,0.39619223680347204,0.10286004771478474,0.9165322654880583,0.3413097565062344,0.32721857470460236,0.9140127198770642,0.6039620540104806,0.9976124444510788,0.9855683213099837,0.2132662369403988,0.636606584303081,0.3959037286695093,0.6358299618586898,0.31656684167683125,0.48747633513994515,0.3434901833534241,0.8248442376498133,0.8311153508257121,0.9459868241101503,0.570873575983569,0.5827263561077416,0.16328093712218106,0.6300060434732586,0.44520303211174905,0.3315172588918358,0.6816866830922663,0.9923011078499258,0.7682998990640044,0.6805726354941726,0.35148523934185505,0.3514835708774626,0.7332426893990487,0.49192128446884453,0.7918793940916657,0.8765500725712627,0.5051896125078201,0.4763831184245646,0.3333346510771662,0.971329815685749,0.1829173406586051,0.8724496348295361,0.14088358893059194,0.7489568537566811,0.7327581455465406,0.9657978359609842,0.629084189189598,0.7138202358037233,0.3340569988358766,0.07251227600499988,0.19818799244239926,0.39174612308852375,0.3000290261115879,0.44709070725366473,0.7466056798584759,0.6969323789235204,0.42652003234252334,0.6066791405901313,0.4512181843165308,0.6717534665949643,0.0976688105147332,0.652754281880334,0.5539895882830024,0.14595296024344862,0.11039017676375806,0.3674036515876651,0.5545736763160676,0.684646459762007,0.6386354914866388,0.4086474967189133,0.7167476348113269,0.24114368064329028,0.4080834051128477,0.18943707970902324,0.16362359141930938,0.858128150459379,0.5414365713950247,0.2262054744642228,0.24886882863938808,0.08691893424838781,0.34916913555935025,0.6489001708105206,0.40557933948002756,0.5120171958114952,0.6752186524681747,0.9535422583576292,0.44210561900399625,0.9761647062841803,0.2603133169468492,0.08309913519769907,0.6577794384211302,0.6019493024796247,0.8216128216590732,0.31842927099205554,0.5828871561679989,0.088326659752056,0.00470372661948204,0.5987127521075308,0.08378644404001534,0.9189707445912063,0.8126678983680904,0.11197633063420653,0.002803175477311015,0.0329017483163625,0.919740607496351,0.786160628311336,0.10814064554870129,0.8734831120818853,0.29486560565419495,0.717482962179929,0.7087174872867763,0.3751085454132408,0.6170847346074879,0.9897158369421959,0.3289977707900107,0.04431371740065515,0.8905693546403199,0.07167979842051864,0.8571653172839433,0.19820565939880908,0.885116224642843,0.5410241740755737,0.6624068750534207,0.5311393588781357,0.3526476623956114,0.7175830854102969,0.7496883203275502,0.3691697297617793,0.06093998742289841,0.4037087990436703,0.7176183077972382,0.8433524004649371,0.003686749842017889,0.4754525937605649,0.9918122275266796,0.45299036242067814,0.08133098483085632,0.8238918567076325,0.4852769367862493,0.8825697395950556,0.8433524004649371,0.008298137225210667,0.5054724793881178,0.7764889115933329,0.5895844739861786,0.6930353282950819,0.9004702067468315,0.18609023443423212,0.23990925308316946,0.28089347458444536,0.23590902518481016,0.6879465482197702,0.3168211476877332,0.45946488180197775,0.7111387739423662,0.4383505641017109,0.9647567044012249,0.03911298746243119,0.303425736958161,0.6225869960617274,0.13325801026076078,0.2354945749975741,0.27433420112356544,0.7608800751622766,0.5113285153638572,0.5090851273853332,0.5427605886943638,0.46165960701182485,0.1589553141966462,0.8884039558470249,0.5272582713514566,0.007196941412985325,0.008915606653317809,0.7004576618783176,0.8366570870857686,0.5390834694262594,0.705420944141224,0.20490034925751388,0.7176377407740802,0.7043954867403954,0.5895980291534215,0.6712430829647928,0.6154825871344656,0.8028820615727454,0.046252985717728734,0.5522892165463418,0.611139869550243,0.10516901058144867,0.8025942877866328,0.814592219889164,0.7598559518810362,0.5916076109278947,0.48724799416959286,0.5682176779955626,0.28261155146174133,0.27671613031998277,0.508430088404566,0.24803966702893376,0.3712403029203415,0.29833924653939903,0.17248077783733606,0.7852600212208927,0.626106575364247,0.6256699529476464,0.5983164252247661,0.23084120661951602,0.5580093066673726,0.37380401394329965,0.3908519372344017,0.4548882588278502,0.15825930889695883,0.809016132960096,0.2020224672742188,0.4811003122013062,0.4355722051113844,0.25210892129689455,0.40565688791684806,0.4259362332522869,0.36560940044000745,0.7407948947511613,0.568357766373083,0.21319499495439231,0.733829490840435,0.54896788764745,0.535837130388245,0.6094718193635345,0.6838547836523503,0.7598425797186792,0.7697286999318749,0.19658315181732178,0.7780030623544008,0.27883616858161986,0.005767149617895484,0.5815083601046354,0.39854404563084245,0.8048065525945276,0.769851899240166,0.8933879849500954,0.6186121620703489,0.31656684167683125,0.48747633513994515,0.3434901833534241,0.8248442376498133,0.8311153508257121,0.9459868241101503,0.6871519321575761,0.3133567622862756,0.13790634949691594,0.49179667769931257,0.5335358923766762,0.21312173968181014,0.2019537021405995,0.2577531118877232,0.9414033186621964,0.5534211618360132,0.7877926214132458,0.27216610102914274,0.6540902880951762,0.3945362768135965,0.5046709068119526,0.709250271320343,0.19735799566842616,0.12643636111170053,0.4587102667428553,0.21145530021749437,0.7900327469687909,0.088326659752056,0.0337734567001462,0.5381695388350636,0.09485088055953383,0.008025092538446188,0.0848583709448576,0.13132865238003433,0.9644502911251038,0.7971005532890558,0.5027436395175755,0.48371416609734297,0.3010473223403096,0.7814005198888481,0.6718682888895273,0.3912144163623452,0.8366221284959465,0.2969038626179099,0.7261746749281883,0.5637936040293425,0.47426785808056593,0.2633293359540403,0.8230480374768376,0.34861036902293563,0.9129797841887921,0.5779890560079366,0.6948604483623058,0.24174758628942072,0.7084381685126573,0.21196449035778642,0.9324706869665533,0.5926203497219831,0.917718589073047,0.011654233327135444,0.69811876793392,0.5937405561562628,0.47261147992685437,0.1393197705037892,0.7126607589889318,0.22193629993125796,0.22118779923766851,0.9121885087806731,0.8932374056894332,0.32853429787792265,0.3319273686502129,0.29880524962209165,0.35920881084166467,0.3933828277513385,0.15964453015476465,0.09507627040147781,0.7692843519616872,0.948800150770694,0.4181233949493617,0.562676596455276,0.304748052963987,0.28261155146174133,0.27671613031998277,0.6161181074567139,0.29706505802460015,0.2754037471022457,0.2957228298764676,0.3867088926490396,0.4169917937833816,0.5008183890022337,0.8856345012318343,0.9289385001175106,0.46864158962853253,0.9374192417599261,0.9282365140970796,0.8161835281644017,0.8192871825303882,0.8388911152724177,0.12737533845938742,0.6892727175727487,0.4214140335097909,0.5777598642744124,0.7536497365217656,0.5885484891477972,0.005814400734379888,0.6806145047303289,0.9295589039102197,0.8283906828146428,0.8242623049300164,0.5219448474235833,0.6538654314354062,0.6672508730553091,0.5678901018109173,0.6136361674871296,0.08215354126878083,0.4239763799123466,0.1436472584027797,0.28371829679235816,0.18259875755757093,0.4853265138808638,0.3223669861909002,0.568025732645765,0.47316310135647655,0.26256479835137725,0.8113235426135361,0.4519501714967191,0.09141881112009287,0.279151173774153,0.8670100446324795,0.5848487978801131,0.716206612996757,0.379995240829885,0.33695916808210313,0.6275572045706213,0.16144125582650304,0.6018510607536882,0.3658868067432195,0.2343815490603447,0.8519170896615833,0.07985245296731591,0.32276683091185987,0.7044066523667425,0.7902827949728817,0.8504081184510142,0.3754376305732876,0.9810242538806051,0.2786840551998466,0.6890893210656941,0.918078540591523,0.41397742624394596,0.9087499189190567,0.04284340841695666,0.7123712359461933,0.5453592140693218,0.12095645582303405,0.6285829253029078,0.9829932833090425,0.8009204578120261,0.21310875681228936,0.9894858619663864,0.8168613286688924,0.5633365157991648,0.7755046188831329,0.7199350134469569,0.40440826187841594,0.3629474549088627,0.6648159560281783,0.10808128141798079,0.577100291615352,0.27646340779028833,0.8914647332858294,0.5891887091565877,0.32106692204251885,0.7724681461695582,0.769851899240166,0.8933879849500954,0.6186121620703489,0.6783496660646051,0.5045377768110484,0.01093997061252594,0.08378644404001534,0.9414511080831289,0.5064025050960481,0.12489826162345707,0.00652717612683773,0.22528651379980147,0.03036471805535257,0.060104180593043566,0.6690942652057856,0.5595440599136055,0.176656007533893,0.32757147611118853,0.6343711179215461,0.8359102250542492,0.7051595014054328,0.6465752786025405,0.7734031178988516,0.3672420079819858,0.5703530439641327,0.5426162246149033,0.39314242685213685,0.24541272944770753,0.3322937472257763,0.8361325901933014,0.11826245486736298,0.8745572858024389,0.17018104624003172,0.4009536348748952,0.39273152709938586,0.41995195392519236,0.527335406979546,0.507174109108746,0.6006872311700135,0.43793949810788035,0.483467114623636,0.3770510018803179,0.14191484730690718,0.8324863230809569,0.5383501357864588,0.08826129417866468,0.728129651164636,0.15112126292660832,0.14843207667581737,0.11383096501231194,0.7075982224196196,0.6906121878419071,0.5187715711072087,0.13804894057102501,0.32895805477164686,0.5822632403578609,0.6729668457992375,0.7709629314485937,0.7014093787875026,0.5852280685212463,0.19336384255439043,0.46421257965266705,0.4355722051113844,0.6761961651500314,0.46290327003225684,0.45942177390679717,0.821891663596034,0.6504453329835087,0.5007781013846397,0.2523580598644912,0.35638710437342525,0.9218357929494232,0.2415252176579088,0.3151811915449798,0.1973286783322692,0.32129003084264696,0.11822579219006002,0.2759666792117059,0.9997165245003998,0.2846482931636274,0.05503778043203056,0.515013734344393,0.5622440474107862,0.545495732454583,0.8080935964826494,0.16323714167810977,0.7912985472939909,0.06876636832021177,0.03373099444434047,0.3618544330820441,0.04676732188090682,0.6843430383596569,0.3164255223236978,0.09152080188505352,0.17245140601880848,0.7135250612627715,0.9965145410969853,0.8287268436979502,0.5487294371705502,0.9824218349531293,0.8049615635536611,0.8407317558303475,0.6620317755732685,0.3601313515100628,0.0014843218959867954,0.39285285910591483,0.39351878850720823,0.6835841787979007,0.6172770892735571,0.7040458652190864,0.10363686992786825,0.07330135721713305,0.4989530313760042,0.6027510005515069,0.3242868292145431,0.5279175343457609,0.13325801026076078,0.4533822999801487,0.6830039324704558,0.5682359794154763,0.4017238086089492,0.8560507413931191,0.6877774095628411,0.31007046648301184,0.7059679336380213,0.1508048828691244,0.8129776276182383,0.49808442406356335,0.5948647439945489,0.5643549219239503,0.17279448569752276,0.6403939097654074,0.5660029137507081,0.43283352069556713,0.6378863181453198,0.5712083706166595,0.5862863278016448,0.22676390339620411,0.8097640741616488,0.6874380584340543,0.5191550320014358,0.8219728579279035,0.7437052568420768,0.4192810256499797,0.7208395451307297,0.2722102424595505,0.6503127992618829,0.6173863988369703,0.3493942962959409,0.3113448270596564,0.8277659802697599,0.7891370740253478,0.3147854406852275,0.4163082044105977,0.7698591372463852,0.7884797258302569,0.8921062082517892,0.9989672855008394,0.27757455105893314,0.34916913555935025,0.589523198781535,0.32541768765076995,0.42241326346993446,0.6757413451559842,0.537509050918743,0.25806988682597876,0.5567476572468877,0.5178567285183817,0.2647682011593133,0.38157847826369107,0.9384997396264225,0.2415252176579088,0.3415302033536136,0.17585012200288475,0.763890125323087,0.6322548938915133,0.2662821670528501,0.2857008457649499,0.6149103667121381,0.19395176274701953,0.22653947747312486,0.8381909653544426,0.5377521603368223,0.29911190713755786,0.04019244131632149,0.6482896630186588,0.38375437329523265,0.5388529431074858,0.18638979108072817,0.23122255876660347,0.3106235549785197,0.3021941620390862,0.2390120136551559,0.47211887524463236,0.8913922135252506,0.088326659752056,0.00470372661948204,0.6243327939882874,0.12489826162345707,0.0026966393925249577,0.2436915896832943,0.04464997351169586,0.010213475674390793,0.5109830249566585,0.7669724780134857,0.7380043403245509,0.008463150123134255,0.49666740908287466,0.5267108816187829,0.41568604740314186,0.2624677731655538,0.5469247356522828,0.9547633605543524,0.31007046648301184,0.7059679336380213,0.1508048828691244,0.8129776276182383,0.49808442406356335,0.5948647439945489,0.9873090807814151,0.5582974911667407,0.6313054212369025,0.8219728579279035,0.7437052568420768,0.371324566192925,0.26667875214479864,0.56164111639373,0.21330710384063423,0.7164283646270633,0.2738367721904069,0.7923310049809515,0.28261155146174133,0.27422013599425554,0.4682364803738892,0.3686017126310617,0.539618665818125,0.21347858314402401,0.10199141479097307,0.8133951465133578,0.6949510837439448,0.2020224672742188,0.46421257965266705,0.4355722051113844,0.25210892129689455,0.40565688791684806,0.4259362332522869,0.2165622366592288,0.858561226632446,0.5139871600549668,0.8300031279213727,0.8028192475903779,0.29843239882029593,0.5844760187901556,0.9397420692257583,0.7657360238954425,0.8217094710562378,0.9657982736825943,0.3103527862112969,0.407665700186044,0.10098486416973174,0.17065027472563088,0.41931367572396994,0.10277732531540096,0.9143716644030064,0.8806033628061414,0.8916956044267863,0.2886866289190948,0.2681128659751266,0.6440660287626088,0.2679290927480906,0.6300060434732586,0.34449880942702293,0.3315172588918358,0.6816866830922663,0.9923011078499258,0.7733742571435869,0.17464702879078686,0.5014570318162441,0.042746094055473804,0.3030381053686142,0.42173943342640996,0.49695990164764225,0.7519905150402337,0.7552660531364381,0.8321786110755056,0.5409703168552369,0.8375433986075222,0.039143930189311504,0.33358648233115673,0.4038883908651769,0.7836482431739569,0.22593910992145538,0.6610684969928116,0.5487586450763047,0.8300261674448848,0.07344790454953909,0.12697882135398686,0.9684757601935416,0.1708364300429821,0.7983154451940209,0.7693121118936688,0.6089147680904716,0.44536544545553625,0.5352213315200061,0.16928965249098837,0.5098532217089087,0.4201501097995788,0.32796671451069415,0.8467806717380881,0.5194480658974499,0.9367060961667448,0.011169557925313711,0.3729877658188343,0.9725871817208827,0.4783933414146304,0.726073187077418,0.7508062494453043,0.4116338677704334,0.4069393021054566,0.9963669467251748,0.47455183207057416,0.088326659752056,0.00470372661948204,0.6162371281534433,0.05769103625789285,0.03342511155642569,0.41436214256100357,0.07403017790056765,0.9773041871376336,0.3338355866726488,0.10723933833651245,0.9992906188126653,0.6208293638192117,0.4223369776736945,0.5100971444044262,0.6402901164256036,0.0008953453507274389,0.43563195294700563,0.10169192194007337,0.4418369212653488,0.009144587442278862,0.04587314021773636,0.6004504770971835,0.833366796374321,0.9913977831602097,0.9456635483074933,0.38386761979199946,0.32533012493513525,0.5889445070642978,0.8162522751372308,0.18425271520391107,0.9416689882054925,0.3982054740190506,0.6957671386189759,0.039329873630777,0.49155316432006657,0.4806726493407041,0.7848400746006519,0.04892408009618521,0.9056451732758433,0.9763900863472372,0.23236441635526717,0.3949106056243181,0.5633496344089508,0.8308701992500573,0.057407147251069546,0.7356129535473883,0.009105991804972291,0.09559740242548287,0.4876313842833042,0.9719286446925253,0.8189948054496199,0.5101550384424627,0.3153637698851526,0.44248068192973733,0.8342715799808502,0.02711299411021173,0.8031046644318849,0.6272659543901682,0.8019276205450296,0.4653260095510632,0.8340813382528722,0.2111866322811693,0.08646865142509341,0.5561513665597886,0.2595312180928886,0.08260889817029238,0.9791333472821862,0.21059039910323918,0.6053538399282843,0.28010303410701454,0.24265785398893058,0.6656317666638643,0.8025559862144291,0.153914128895849,0.009157093008980155,0.8830278341192752,0.5561849675141275,0.5048438338562846,0.3224715502001345,0.9443030604161322,0.839593049371615,0.14162742136977613,0.46881282748654485,0.8042301475070417,0.610907752532512,0.4861356553155929,0.2229586581233889,0.815138136735186,0.7875075696501881,0.32630394119769335,0.9238015501759946,0.27495919563807547,0.24069205881096423,0.8349061338230968,0.18218661099672318,0.14396509644575417,0.07702541607432067,0.7146803357172757,0.9638834088109434,0.8949929785449058,0.9200926492922008,0.5351066184230149,0.841790403239429,0.991622019559145,0.4754035556688905,0.8015088543761522,0.9611598511692137,0.3379498925060034,0.088326659752056,0.00470372661948204,0.5874468176625669,0.05769103625789285,0.003601666074246168,0.5134409384336323,0.1326040478888899,0.8515137063805014,0.24617574433796108,0.28188538388349116,0.3722165604121983,0.0376698721665889,0.3457714067772031,0.34283648058772087,0.7167476348113269,0.0963417929597199,0.5520895477384329,0.5911661386489868,0.5318944756872952,0.8751286086626351,0.32757147611118853,0.8353377892635763,0.4047577914316207,0.3122005555778742,0.6343711179215461,0.8359102250542492,0.7051595014054328,0.5560874419752508,0.7149504167027771,0.42484869761392474,0.23282239260151982,0.4476484751794487,0.10848890338093042,0.29340159124694765,0.4887448945082724,0.8098037648014724,0.6540902880951762,0.38615251588635147,0.4824659980367869,0.709250271320343,0.21397328097373247,0.12643636111170053,0.6473745366092771,0.9904980794526637,0.7331811224576086,0.31048512691631913,0.36279960279352963,0.34957024664618075,0.17905331612564623,0.7733901634346694,0.17221863707527518,0.23533155233599246,0.8405948327854276,0.8202812662348151,0.7241862106602639,0.16506422637030482,0.34800240444019437,0.7273580657783896,0.37837982433848083,0.019194228807464242,0.42531558801420033,0.913553252350539,0.9748028323519975,0.47956707701087,0.9161744096782058,0.27545305644162,0.6145365594420582,0.8103480660356581,0.38224257435649633,0.765340150333941,0.5969425349030644,0.683470263145864,0.7048352269921452,0.8711111904121935,0.0660858922637999,0.6382579861674458,0.992757530650124,0.29785601841285825,0.7100799509789795,0.5540090736467391,0.977190665435046,0.9083640773314983,0.6256220242939889,0.17894429829902947,0.3151131172198802,0.6554617693182081,0.22343080886639655,0.9332557264715433,0.10227888962253928,0.9348932623397559,0.5889445070642978,0.8162522751372308,0.15774979046545923,0.9331381330266595,0.39437435450963676,0.7037354139611125,0.5669313352555037,0.04902456747367978,0.475338562624529,0.35920881084166467,0.3933828277513385,0.15964453015476465,0.3200633868109435,0.5491684067528695,0.22732693585567176,0.08807275351136923,0.8089505084790289,0.948800150770694,0.46568867308087647,0.7756461286917329,0.30297571467235684,0.30997898802161217,0.37433640472590923,0.5404180674813688,0.8408723373431712,0.6932328743860126,0.49167638807557523,0.46165960701182485,0.007620605872943997,0.3499284915160388,0.686429703142494,0.04301287326961756,0.9516664501279593,0.5895323983859271,0.01167897880077362,0.033265634905546904,0.5889445070642978,0.8226844419259578,0.2040652190335095,0.627168868901208,0.5707074368838221,0.4328600044827908,0.9331381330266595,0.4115639734081924,0.6957671386189759,0.7356129535473883,0.009105991804972291,0.09559740242548287,0.48511413810774684,0.9373942848760635,0.8189948054496199,0.4004488654900342,0.6376059716567397,0.41660673497244716,0.7903980924747884,0.6299170420970768,0.9277541183400899,0.709250271320343,0.15413976600393653,0.12643636111170053,0.5523469746112823,0.3996266652829945,0.2752897646278143,0.8219728579279035,0.7437052568420768,0.4192810256499797,0.7208395451307297,0.30903938296251,0.6856539298314601,0.6028651217930019,0.25771837681531906,0.224144286243245,0.5519058888312429,0.019275140715762973,0.33586507057771087,0.7112707502674311,0.03470274223946035,0.2437697967980057,0.49160494026727974,0.5511586845386773,0.7450757492333651,0.9918122275266796,0.4155366828199476,0.06806514412164688,0.22148796007968485,0.7919425393920392,0.3739690331276506,0.5977001176215708,0.10189823945984244,0.8819038863293827,0.7700335630215704,0.6609628307633102,0.038794450694695115,0.6215821790974587,0.14869724889285862,0.4098355264868587,0.4988971031270921,0.3584478225093335,0.8706833738833666,0.277369522722438,0.4086474967189133,0.7167476348113269,0.16362359141930938,0.858128150459379,0.5040135974995792,0.1095526316203177,0.8549458496272564,0.09819688554853201,0.8659432525746524,0.18820135691203177,0.32333203707821667,0.9253349129576236,0.5562315750867128,0.370980262523517,0.854546970454976,0.5588942435570061,0.6236144569702446,0.4741808206308633,0.6654437473043799,0.08625659393146634,0.1982244667597115,0.4086122689768672,0.5290694332215935,0.4061315895523876,0.49242565128952265,0.7023320451844484,0.8036823249422014,0.6709109558723867,0.37510844180360436,0.9275123190600425,0.49494993942789733,0.2444442838896066,0.3999430469702929,0.16361956601031125,0.6980393331032246,0.8036823249422014,0.6709109558723867,0.34190206066705287,0.8873845210764557,0.6321565019898117,0.27937105228193104,0.4547874256968498,0.2898588499519974,0.6949806611519307,0.5937370490282774,0.5060656813438982,0.7262759467121214,0.11562313279137015,0.9802424616646022,0.022021468728780746,0.017816434847190976,0.637407947331667,0.5664377405773848,0.5522892165463418,0.611139869550243,0.219068301608786,0.8025942877866328,0.814592219889164,0.801570542389527,0.6764794162008911,0.32442496297881007,0.2921486818231642,0.5637936040293425,0.47426785808056593,0.2633293359540403,0.6475303021725267,0.1818674944806844,0.13605314120650291,0.9524594836402684,0.34861036902293563,0.9129797841887921,0.8637906238436699,0.19426308176480234,0.256534282816574,0.8678151941858232,0.602659406606108,0.2985896454192698,0.9562065843492746,0.683179764309898,0.7542216854635626,0.4816977169830352,0.35386778553947806,0.3819997487589717,0.5323834782466292,0.2931685105431825,0.19111756491474807,0.43013561400584877,0.8488962396513671,0.7349591634701937,0.734992093173787,0.651149884564802,0.23255600198172033,0.5337128646206111,0.5685103479772806,0.8938713013194501,0.4837941275909543,0.1037051985040307,0.181623762473464,0.5762658957391977,0.48371416609734297,0.3328441334888339,0.7814005198888481,0.6718682888895273,0.3965914899017662,0.04296335647813976,0.35748794698156416,0.5785536633338779,0.5813151358161122,0.28524153237231076,0.40903858095407486,0.434591184835881,0.3037929506972432,0.2585219913162291,0.4172185305505991,0.5668830217327923,0.6402410494629294,0.4967382641043514,0.8514021618757397,0.5055724896956235,0.31801236630417407,0.802595300367102,0.7491660558152944,0.2522447903174907,0.38790806173346937,0.051498247776180506,0.5900792926549911,0.8182090502232313,0.07525376253761351,0.42040826566517353,0.9502817890606821,0.4302816563285887,0.6228659239131957,0.11889334721490741,0.799812507815659,0.6255203599575907,0.309436259791255,0.47532637882977724,0.8320542555302382,0.22512766788713634,0.7202986504416913,0.9427250702865422,0.4960872558876872,0.1051224498078227,0.1595973069779575,0.5014570318162441,0.04022597963921726,0.3030381053686142,0.42173943342640996,0.49695990164764225,0.4719105341937393,0.5204899290110916,0.7634128793142736,0.7357003020588309,0.6256220242939889,0.18290284625254571,0.5877618149388582,0.2579945952165872,0.6723345750942826,0.5692301646340638,0.59004858112894,0.44471830618567765,0.24941360112279654,0.45408514817245305,0.8551197641063482,0.026671166298910975,0.9367645783349872,0.05030525359325111,0.5457348115742207,0.7200586546678096,0.3937592983711511,0.11577258678153157,0.9879484486300498,0.45089511782862246,0.14076894195750356,0.3815758186392486,0.24190252250991762,0.08884429838508368,0.35367818525992334,0.6040243862662464,0.8436794155277312,0.02711299411021173,0.8031046644318849,0.8340813382528722,0.21130005875602365,0.08646865142509341,0.8528082037810236,0.29056111234240234,0.40716523746959865,0.7356129535473883,0.014027372002601624,0.06431162753142416,0.4202984035946429,0.6308482775930315,0.5895593704190105,0.4734658491797745,0.9859627678524703,0.6414316995069385,0.4683063509874046,0.5527799595147371,0.7893820891622454,0.44569065468385816,0.29461102560162544,0.14077605144120753,0.5835429457947612,0.2060364510398358,0.3642786967102438,0.26256473711691797,0.34790845424868166,0.920458345208317,0.13158797239884734,0.9240130709949881,0.21093822782859206,0.33560122968629,0.6411459795199335,0.161464641103521,0.702429388416931,0.3951450588647276,0.618340847780928,0.889153660973534,0.5171138325240463,0.30945335305295885,0.6919239736162126,0.35386909637600183,0.3649422072339803,0.4967382641043514,0.8514021618757397,0.5114036204759032,0.31801236630417407,0.7620727862231433,0.6604666619095951,0.3559544642921537,0.8017886292655021,0.11845995811745524,0.23147945338860154,0.8116311966441572,0.7648129723966122,0.3228901196271181,0.13194374437443912,0.07988067087717354,0.21440384071320295,0.8875917908735573,0.4437226941809058,0.7874818805139512,0.9615634724032134,0.19205576879903674,0.173122379463166,0.9950759361963719,0.18501912686042488,0.09433203260414302,0.4315311696846038,0.9063096495810896,0.32416752516292036,0.5981697449460626,0.1589413066394627,0.22424363275058568,0.5174496106337756,0.6579714049585164,0.24207956297323108,0.5832937960512936,0.46578455972485244,0.8397945922333747,0.6190865244716406,0.512131063034758,0.8362594614736736,0.6741224483121186,0.0767383046913892,0.39962032064795494,0.3727749667596072,0.693428149446845,0.7285414100624621,0.42559170979075134,0.05041389702819288,0.536534383893013,0.37124815699644387,0.33586655650287867,0.5898298739921302,0.9604245570953935,0.8953824595082551,0.49181043612770736,0.7964910382870585,0.18457912164740264,0.8754009655676782,0.17588587966747582,0.9678185298107564,0.7306999396532774,0.30767699517309666,0.12907621241174638,0.44495686958543956,0.7756461286917329,0.294600066030398,0.30997898802161217,0.37433640472590923,0.5404180674813688,0.33074232120998204,0.7017478221096098,0.4449575541075319,0.8385206088423729,0.7085324279032648,0.745211424306035,0.8075332327280194,0.12405945407226682,0.06088782986626029,0.6924081195611507,0.1961044913623482,0.4711762988008559,0.5587454247288406,0.980817249044776,0.889382409164682,0.3564994689077139,0.3933828277513385,0.15983659424819052,0.3200633868109435,0.5257674306631088,0.22732693585567176,0.21758681116625667,0.49111592886038125,0.320874901721254,0.26757317036390305,0.5069977287203074,0.4862831817008555,0.8509679052513093,0.4819807403255254,0.4673894641455263,0.5911959041841328,0.32181267673149705,0.4780175967607647,0.709250271320343,0.15449594496749341,0.12643636111170053,0.5483909461181611,0.5608454991597682,0.6668065642006695,0.6723773558624089,0.26171057345345616,0.29537018155679107,0.5480264495126903,0.4387110825628042,0.6081926268525422,0.9013501696754247,0.21076321648433805,0.36636856687255204,0.02173333428800106,0.07995747937820852,0.7563169358763844,0.04676732188090682,0.892828420503065,0.37279163859784603,0.30708933831192553,0.8832077304832637,0.1399936529342085,0.8659432525746524,0.18820135691203177,0.32457663025707006,0.9343661456368864,0.5698309284634888,0.3007744918577373,0.5591990237589926,0.3118109062779695,0.6425299381371588,0.47867785510607064,0.7529566697776318,0.9208496327046305,0.4530985194724053,0.29461102560162544,0.13249554415233433,0.621986762387678,0.21529250545427203,0.214118464384228,0.6453248902689666,0.2041766899637878,0.3657828157301992,0.16052339621819556,0.8829621477052569,0.5737981353886425,0.48827726556919515,0.6632899628020823,0.32757147611118853,0.006352942204102874,0.26698249764740467,0.08696390339173377,0.08051112527027726,0.06392625020816922,0.2506054781842977,0.18532298528589308,0.5518588267732412,0.925725991372019,0.8123082350939512,0.18948062183335423,0.29978332086466253,0.576531584141776,0.3265350384172052,0.16000003484077752,0.3017248089890927,0.6727420506067574,0.802781589794904,0.5631557167507708,0.2797558233141899,0.4844342616852373,0.8906805703882128,0.2271412592381239,0.31557182292453945,0.6364822045434266,0.6018136602360755,0.4622878166846931,0.7573188308160752,0.9240041873417795,0.921993947820738,0.653604436898604,0.9933353099040687,0.30811230302788317,0.1781149550806731,0.5658574341796339,0.031197472475469112,0.7312894077040255,0.68096958193928,0.5547799116466194,0.6675107670016587,0.3041175459511578,0.145502740284428,0.6702331453561783,0.09946159459650517,0.5607575527392328,0.5096601687837392,0.4544931501150131,0.456901186844334,0.2718555845785886,0.6249292416032404,0.6037766148801893,0.271032395074144,0.6128380929585546,0.1991296939086169,0.23473373986780643,0.9892260492779315,0.1055391242261976,0.3791974813211709,0.4038883908651769,0.7561708900611848,0.5407211291603744,0.4509032585192472,0.3956036698073149,0.36487303441390395,0.4026864212937653,0.2448948798701167,0.35622764844447374,0.47397298994474113,0.47404245007783175,0.17905904492363334,0.8853904858697206,0.5362396584823728,0.5889445070642978,0.8193119443021715,0.15774979046545923,0.40738342283293605,0.6253178063780069,0.41854200582019985,0.46120213344693184,0.9661458218470216,0.6781926199328154,0.8637906238436699,0.19426308176480234,0.256534282816574,0.6574289854615927,0.5461373806465417,0.6905543294269592,0.8678151941858232,0.44117777119390666,0.30690614809282124,0.800508061889559,0.12980914139188826,0.3339732806198299,0.5745640923269093,0.8342409809119999,0.13970924564637244,0.372579941758886,0.8819896071217954,0.7801581576932222,0.7356129535473883,0.009105991804972291,0.33861179556697607,0.6060992276761681,0.5311393588781357,0.3526476623956114,0.3124209351371974,0.7496883203275502,0.5587281957268715,0.5686857502441853,0.49155389075167477,0.19014723924919963,0.5478198498021811,0.8477432827930897,0.1650591695215553,0.1489606413524598,0.5345090385526419,0.8930192694533616,0.5464775885920972,0.1685550445690751,0.3650436846073717,0.5253282675985247,0.6786051434464753,0.8704130167607218,0.3530422162730247,0.7017000911291689,0.012431777780875564,0.45515353488735855,0.46139552257955074,0.12714751856401563,0.6337871763389558,0.4302603171672672,0.6240274028386921,0.21125474362634122,0.5478823764715344,0.4958084090612829,0.6764609834644943,0.39960935851559043,0.4958143108524382,0.7454810149502009,0.1624445258639753,0.5575874955393374,0.43630696390755475,0.6518416579347104,0.19148501777090132,0.8482613635715097,0.18712505022995174,0.5840120897628367,0.40754218166694045,0.6202984864357859,0.5812133818399161,0.5305771555285901,0.5484079103916883,0.07936674309894443,0.12076728302054107,0.9132088767364621,0.23619410558603704,0.15721240197308362,0.7792245498858392,0.3440511031076312,0.8611188437789679,0.2465471331961453,0.6627684393897653,0.576531584141776,0.3265350384172052,0.08269463968463242,0.9190533692017198,0.07215287862345576,0.5533656941261142,0.3202495030127466,0.6034970397595316,0.6057388172484934,0.28261155146174133,0.27671613031998277,0.508430088404566,0.24803966702893376,0.3712403029203415,0.2821664488874376,0.08946319646202028,0.8541647579986602,0.4504075038712472,0.06765915616415441,0.3374415775761008,0.8510421973187476,0.22720138705335557,0.5022420715540648,0.26997362030670047,0.24524484062567353,0.4453939276281744,0.11905077868141234,0.8251806469634175,0.5301460009068251,0.40718986582942307,0.6010634410195053,0.3334471278358251,0.7896577056962997,0.5052444010507315,0.3781743450090289,0.04255576548166573,0.009860638994723558,0.90582639654167,0.6703997384756804,0.08546039811335504,0.09507313813082874,0.1758393459022045,0.08060778328217566,0.9406894026324153,0.38935989094898105,0.9997165245003998,0.7420432684011757,0.1279465751722455,0.9856124252546579,0.5150876233819872,0.175911208614707,0.7518162166234106,0.12006065994501114,0.9310135093983263,0.8659432525746524,0.25891642016358674,0.3250153544358909,0.8425283597316593,0.6285723834298551,0.30460868193767965,0.8825167119503021,0.15676393709145486,0.6035053951200098,0.4009536348748952,0.37993153068237007,0.4179247603751719,0.527335406979546,0.6692503313533962,0.7037296178750694,0.6327075303997844,0.5989823811687529,0.11130100232549012,0.2900998976547271,0.75009123259224,0.14525171602144837,0.506787077523768,0.6785118258558214,0.2183918096125126,0.3534348951652646,0.3491211421787739,0.8688765855040401,0.30559248267672956,0.5981697449460626,0.1589413066394627,0.2659330340102315,0.5005033838097006,0.4122279428411275,0.569645136827603,0.503631035098806,0.6607411403674632,0.38851507753133774,0.32903172355145216,0.3870632494799793,0.6141555013600737,0.6488646664656699,0.004152619745582342,0.10588218132033944,0.022001955192536116,0.84064024919644,0.7241862106602639,0.16506422637030482,0.3465028915088624,0.7273580657783896,0.37837982433848083,0.019194228807464242,0.6600938637275249,0.7756366576068103,0.8654170969966799,0.6140477254521102,0.5445765962358564,0.5411698033567518,0.9416866761166602,0.5037835508119315,0.493056149687618,0.468605536269024,0.32294060196727514,0.19631322682835162,0.7204339969903231,0.009105991804972291,0.28928686678409576,0.44449722999706864,0.3947564645204693,0.29699933575466275,0.6191761789377779,0.5431347615085542,0.6435846504755318,0.4828504144679755,0.25650319224223495,0.8625129209831357,0.30374173051677644,0.7369919556658715,0.07789300940930843,0.5497809709049761,0.230037956032902,0.28937834897078574,0.514279249124229,0.33398326486349106,0.6468152664601803,0.9156038749497384,0.4136804884765297,0.08900644909590483,0.9687896715477109,0.6944188422057778,0.49395093554630876,0.36526213423348963,0.8420837158337235,0.20061232964508235,0.12917798734270036,0.5758001718204468,0.09822156722657382,0.4572131659369916,0.5327219795435667,0.9289463586173952,0.543755728052929,0.23831280134618282,0.8668777903076261,0.9982067656237632,0.7406757236458361,0.23219319572672248,0.5951687572523952,0.4758934660349041,0.12426460417918861,0.9041659410577267,0.726229493971914,0.545803491724655,0.7974300663918257,0.5863404280971736,0.36674015782773495,0.8027805075980723,0.17669574404135346,0.3104001635219902,0.855271227657795,0.2214466924779117,0.407805691473186,0.9919931646436453,0.7150556826964021,0.4160694077145308,0.6447429256513715,0.2738151219673455,0.39875882863998413,0.7288628008682281,0.33587335888296366,0.48207915714010596,0.6190687515772879,0.7724995829630643,0.42439781525172293,0.5940092578530312,0.2809655494056642,0.31557182292453945,0.6906121878419071,0.545238271355629,0.13804894057102501,0.7026617128867656,0.6806303279008716,0.41917388373985887,0.7043527462519705,0.6664829137735069,0.6646221964620054,0.6451153941452503,0.4638894791714847,0.1442191102541983,0.9874330698512495,0.3083066053222865,0.6315918553154916,0.5723449962679297,0.35748378676362336,0.4453462592791766,0.5800353558734059,0.7057316098362207,0.29312636284157634,0.2327138485852629,0.44952586805447936,0.008109665708616376,0.268295124405995,0.4857029803097248,0.9198967418633401,0.7486676250118762,0.26121842861175537,0.1737475444097072,0.5436744173057377,0.411688344553113,0.09944497188553214,0.7629210453014821,0.4603824866935611,0.9438755260780454,0.6192191338632256,0.13124600099399686,0.5297402148135006,0.8849982460960746,0.4883882936555892,0.3218638536054641,0.9926045094616711,0.8948233826085925,0.36497784056700766,0.8826877949759364,0.0971509066876024,0.5173826368991286,0.7644563000649214,0.08387975371442735,0.6099719651974738,0.8168944844510406,0.10661290842108428,0.0888981050811708,0.9960168623365462,0.963185170898214,0.18919926462695003,0.904775456758216,0.9989672855008394,0.1262087661307305,0.9832416784483939,0.3653491036966443,0.9004803947173059,0.5621739560738206,0.3932526013813913,0.02073944127187133,0.5107138070743531,0.5118629971984774,0.3382102972827852,0.4190671145915985,0.5199919738806784,0.8549746288917959,0.7755046188831329,0.7199350134469569,0.40440826187841594,0.8693015242461115,0.7076404481194913,0.7011667371261865,0.47445114981383085,0.6648159560281783,0.10808128141798079,0.5637936040293425,0.584185115294531,0.2633293359540403,0.6475303021725267,0.1818674944806844,0.13502175360918045,0.9308289047330618,0.5171126218046993,0.8142476272769272,0.253154227277264,0.7470103288069367,0.06077961344271898,0.2139679656829685,0.46928852098062634,0.7929174792952836,0.10226789419539273,0.7769737094640732,0.35883215605281293,0.5096601687837392,0.4544931501150131,0.456901186844334,0.5804933819454163,0.5740635525435209,0.1486672202590853,0.2718555845785886,0.6249292416032404,0.6037766148801893,0.49179667769931257,0.5335358923766762,0.21312173968181014,0.4879612224176526,0.6249162815511227,0.10059198969975114,0.2019537021405995,0.2577531118877232,0.8941986414138228,0.5848487978801131,0.716206612996757,0.379995240829885,0.33695916808210313,0.6275572045706213,0.1312505998648703,0.2832354474812746,0.585159583715722,0.6948882210999727,0.03675725916400552,0.532250318210572,0.4576402313541621,0.4495381226297468,0.4350257038604468,0.33395815384574234,0.56084746401757,0.4930489098187536,0.4145127795636654,0.19074832904152572,0.6104634082876146,0.1396233702544123,0.08122821431607008,0.3942252735141665,0.40251511498354375,0.2577893261332065,0.5461543602868915,0.6628187005408108,0.9960168623365462,0.12598870717920363,0.047933362890034914,0.9640605405438691,0.07087514270097017,0.9041229996364564,0.9833559633698314,0.8588637569919229,0.2492623550351709,0.24539375095628202,0.7081248108297586,0.04519281652756035,0.32277225726284087,0.39101301808841527,0.9385386125650257,0.043860963778570294,0.6427467600442469,0.21724326303228736,0.5637936040293425,0.6264919876120985,0.2633293359540403,0.6213321380782872,0.18335443921387196,0.13605314120650291,0.8025942877866328,0.814592219889164,0.801570542389527,0.3327705906704068,0.6040663849562407,0.10859884857200086,0.033235360868275166,0.32616367866285145,0.8691249806433916,0.33992169005796313,0.6012993196491152,0.2206043794285506,0.5188433127477765,0.26566452998667955,0.8191903203260154,0.7125390635337681,0.17491801385767758,0.3694956935942173,0.11845184653066099,0.8415708621032536,0.00783296930603683,0.2376456472557038,0.00880074710585177,0.1785690498072654,0.22170508303679526,0.2017178637906909,0.9986995353829116,0.3637202789541334,0.002377468626946211,0.01515063177794218,0.06433741003274918,0.7200014046393335,0.15801191632635891,0.36428962042555213,0.605813198722899,0.8300078921020031,0.9144179366994649,0.3266044508200139,0.20394332078285515,0.576531584141776,0.3198200552724302,0.7211061369162053,0.5234666271135211,0.32075799023732543,0.3127893863711506,0.599073737859726,0.6584209720604122,0.15409788279794157,0.7411598498001695,0.4986248619388789,0.028853952419012785,0.9911562486086041,0.41779124177992344,0.5578417698852718,0.6347905211150646,0.49322010879404843,0.6003774874843657,0.5059715157840401,0.661939634475857,0.06940306187607348,0.5691134149674326,0.5560588038060814,0.3055761989671737,0.7453001856338233,0.6800283386837691,0.8120321948081255,0.253154227277264,0.6514155394397676,0.025554818799719214,0.23534423345699906,0.5263342219404876,0.8671596013009548,0.5966457021422684,0.5219399675261229,0.29392723157070577,0.4556222117971629,0.6627429206855595,0.12467661593109369,0.338492444017902,0.35482086217962205,0.6206524153240025,0.4784308476373553,0.5191023275256157,0.44091810192912817,0.018881601048633456,0.5630247793160379,0.8205232294276357,0.2487315470352769,0.010200105141848326,0.36019880045205355,0.24052721913903952,0.1050744706299156,0.0034659577067941427,0.5941421631723642,0.7622474837116897,0.015557551058009267,0.33358648233115673,0.4038883908651769,0.7802449015434831,0.6179156962316483,0.8597055091522634,0.38801816664636135,0.8490151618607342,0.16570209641940892,0.2928454717621207,0.8648058250546455,0.6066692657768726,0.3388324570842087,0.6239504106342793,0.4942561583593488,0.55132174375467,0.3200633868109435,0.5587632225360721,0.18159300042316318,0.14851836604066193,0.7749213767237961,0.9589689648710191,0.10927013540640473,0.6998808104544878,0.041680996771901846,0.7356129535473883,0.009105991804972291,0.24265202437527478,0.6547904091421515,0.2410201297607273,0.34247021982446313,0.17469284473918378,0.8725118492729962,0.5949496512766927,0.3055842025205493,0.06723209889605641,0.004954095231369138,0.6935410830192268,0.02542744344100356,0.20014779549092054,0.09253983804956079,0.5187980348709971,0.9724032357335091,0.32416752516292036,0.5981697449460626,0.1589413066394627,0.2659330340102315,0.5005033838097006,0.4122279428411275,0.6570027130655944,0.5395719329826534,0.6051890132948756,0.4009536348748952,0.39273152709938586,0.09933203458786011,0.527335406979546,0.6176996997091919,0.7037296178750694,0.6746839645784348,0.7315975367091596,0.37270612735301256,0.4231176860630512,0.34032555553130805,0.8957202134188265,0.5982157890684903,0.6488646664656699,0.004152619745582342,0.3185811771545559,0.6673961188644171,0.27419994468800724,0.6055661761201918,0.7114036730490625,0.20886056823655963,0.4838061868213117,0.591734743444249,0.17097415938042104,0.6955450410023332,0.7441065318416804,0.7941245259717107,0.2262054744642228,0.2929045329801738,0.039219980826601386,0.23612375743687153,0.08644772856496274,0.8430460097733885,0.2134522683918476,0.013718700502067804,0.2907273282762617,0.2956404017750174,0.4463550930377096,0.23777561238966882,0.22807030123658478,0.6926459558308125,0.7222597105428576,0.20597907528281212,0.9464957567397505,0.21179249044507742,0.9972897546831518,0.8873289693146944,0.042132181115448475,0.7413349626585841,0.39650432858616114,0.3972058086656034,0.8989995722658932,0.28377937828190625,0.7307829442434013,0.24803966702893376,0.3712403029203415,0.1527526651043445,0.1412872038781643,0.8603045744821429,0.1281988052651286,0.05176765285432339,0.8231310097035021,0.8883324544876814,0.671459163306281,0.5551912931259722,0.6710802437737584,0.8731061134021729,0.25533462036401033,0.23617521673440933,0.8346256369259208,0.6725534643046558,0.2589676242787391,0.5982797804754227,0.2846989973913878,0.6731532756239176,0.4051518503110856,0.6138864085078239,0.17527976632118225,0.22653360874392092,0.6334884350653738,0.3155107453931123,0.9897158369421959,0.3289977707900107,0.04431371740065515,0.8905693546403199,0.07167979842051864,0.8826160058379173,0.9757201089523733,0.38445338141173124,0.23540378012694418,0.9809234053827822,0.2666143928654492,0.39737473521381617,0.5947576020844281,0.4771330726798624,0.48444185499101877,0.7763507449999452,0.5377892679534853,0.27801296883262694,0.7143059833906591,0.009105991804972291,0.3853168848436326,0.604112392757088,0.5108737540431321,0.3526476623956114,0.609708389500156,0.027535149594768882,0.42152119847014546,0.1535824527963996,0.3778685596771538,0.5578855690546334,0.18422690266743302,0.3959328895434737,0.048342471942305565,0.9327595450449735,0.36570654646493495,0.5525267401244491,0.5889445070642978,0.8162522751372308,0.17826487915590405,0.3682758789509535,0.984178404090926,0.10863437061198056,0.014523641671985388,0.4013834339566529,0.8690833766013384,0.5652747342828661,0.058536674128845334,0.26416133251041174,0.7062659740913659,0.7358032779302448,0.42882808414287865,0.6644446712452918,0.44323871773667634,0.4605340885464102,0.12280906550586224,0.9591411054134369,0.6376326838508248,0.36311620962806046,0.7871242470573634,0.46209070878103375,0.3170080715790391,0.5460124050732702,0.05362218664959073,0.6894272263161838,0.4777597424108535,0.5567570587154478,0.7404692503623664,0.6043396240565926,0.005814400734379888,0.6994068673811853,0.34634240344166756,0.5905176652595401,0.35616985498927534,0.3619038697797805,0.47404245007783175,0.4174228087067604,0.5658655180595815,0.020635017892345786,0.383022247813642,0.6538654556497931,0.6567055038176477,0.6099729719571769,0.08855911577120423,0.06890624412335455,0.11059323442168534,0.9625486386939883,0.5492736652959138,0.5894262620713562,0.7735115475952625,0.5331735897343606,0.4009536348748952,0.39273152709938586,0.4179247603751719,0.527335406979546,0.6176996997091919,0.7037296178750694,0.42238114099018276,0.38342150300741196,0.029268717858940363,0.8288798583671451,0.42858581780456007,0.4328600044827908,0.9374219616875052,0.43064681347459555,0.6366934843827039,0.42776877735741436,0.5796523552853614,0.07977471151389182,0.0918582291342318,0.7446100073866546,0.26668401691131294,0.22036299598403275,0.8585065973456949,0.11049349186941981,0.08463341346941888,0.270773870870471,0.7721197726204991,0.5633458539377898,0.034223222406581044,0.8841095343232155,0.5429130073171109,0.5129419050645083,0.08439421630464494,0.6545070358552039,0.09850014839321375,0.18029581615701318,0.8905799500644207,0.24672472733072937,0.5522859969642013,0.8193164230324328,0.29197476152330637,0.5049620007630438,0.7426268083509058,0.5080201807431877,0.09135440085083246,0.5759700378403068,0.4936980945058167,0.6878454517573118,0.3963515958748758,0.4597706052009016,0.3449513886589557,0.2770189007278532,0.5563992753159255,0.11431741714477539,0.30571790784597397,0.6291161915287375,0.24315695790573955,0.11577258678153157,0.9879484486300498,0.3367220228537917,0.0593668723013252,0.788200881332159,0.5655313446186483,0.8421957944519818,0.42308876011520624,0.43301884341053665,0.5363833473529667,0.1491652256809175,0.6439148832578212,0.5389479263685644,0.2426460194401443,0.06838504457846284,0.6610480665694922,0.5770284745376557,0.23883621441200376,0.24375524697825313,0.3712403029203415,0.2540037271101028,0.90160823892802,0.8915635934099555,0.650267394259572,0.007050482789054513,0.4813536920119077,0.9032680415548384,0.18147417437285185,0.9988640388473868,0.19441921869292855,0.7854343021754175,0.9027649182826281,0.04531356948427856,0.006352942204102874,0.283540969947353,0.1321178290527314,0.01418535690754652,0.927937546512112,0.16982233710587025,0.40934772859327495,0.6644007861614227,0.8401938425377011,0.8656028679106385,0.14200600888580084,0.2959636671002954,0.6617231569252908,0.5964021445252001,0.09593454701825976,0.5079591921530664,0.9166975445114076,0.7484935903921723,0.11548119154758751,0.6553354812785983,0.17272365116514266,0.20136586320586503,0.389203253434971,0.737324197543785,0.15478096203878522,0.6700731806922704,0.22924438887275755,0.5453592140693218,0.23831280134618282,0.8757259512785822,0.9804260137025267,0.7228081151843071,0.23219319572672248,0.8034985379781574,0.16822705883532763,0.028146876487880945,0.0500057521276176,0.9492590418085456,0.826672664610669,0.84825085173361,0.9835077153984457,0.16748169413767755,0.012401840882375836,0.9767530763056129,0.14032278233207762,0.8596084520686418,0.6991256230976433,0.11212576529942453,0.9930241431575269,0.8241756192874163,0.4955925748217851,0.7336228527128696,0.35187120363116264,0.5244427435100079,0.29247830947861075,0.5841411408036947,0.06365655921399593,0.2818580116145313,0.6706909104250371,0.6651149883400649,0.12815664638765156,0.6508221293333918,0.4024020368233323,0.1593208748381585,0.6562829231843352,0.0292987828142941,0.6890893210656941,0.918078540591523,0.41332618496380746,0.4104877330828458,0.8635435197502375,0.6881726903375238,0.6644916594959795,0.1793600746896118,0.6544320194516331,0.8596084520686418,0.6991256230976433,0.0714766897726804,0.9953021793626249,0.7551183274481446,0.40313981263898313,0.386693112552166,0.5449438614305109,0.18638979108072817,0.23122255876660347,0.8166316617280245,0.3021941620390862,0.2532662255689502,0.26756437961012125,0.6402960526756942,0.2790255560539663,0.6232239915989339,0.08104972308501601,0.3236363644246012,0.5732663052622229,0.7479701586998999,0.5652000012341887,0.8440486979670823,0.29874478094279766,0.6356207623612136,0.6863608341664076,0.034181466326117516,0.7605795457493514,0.5173404819797724,0.4551992672495544,0.7385975485667586,0.34848774736747146,0.6373464018106461,0.23795594670809805,0.865065242163837,0.014663810608908534,0.267533665522933,0.6480896247085184,0.8159616424236447,0.106072211638093,0.3257921924814582,0.29596226825378835,0.36487303441390395,0.4026864212937653,0.21265520923770964,0.47290387749671936,0.6872544116340578,0.2167383066844195,0.43865957856178284,0.521354871802032,0.6968713840469718,0.2253337623551488,0.8187595163471997,0.014663810608908534,0.23846109071746469,0.6480896247085184,0.36242904025129974,0.013831795193254948,0.8274618494324386,0.7483106048312038,0.059547019423916936,0.10378772765398026,0.47393724229186773,0.04798318911343813,0.9876041591633111,0.4842479007784277,0.2103520529344678,0.7902617848012596,0.16633335873484612,0.7560494060162455,0.6237876669038087,0.1961373055819422,0.6152413284871727,0.22226602723821998,0.5249105540569872,0.6812398303300142,0.2472827541641891,0.4034077657852322,0.82712416886352,0.6741224483121186,0.09319517738185823,0.7684222157113254,0.5348555441014469,0.6967704819981009,0.7317034837324172,0.3076841237489134,0.3325918612536043,0.17279754835180938,0.7552939441520721,0.15610793023370206,0.5039180442690849,0.861482726642862,0.05679731070995331,0.14374426379799843,0.5248357828240842,0.9096267563290894,0.2724970015697181,0.9053993155248463,0.34787541744299233,0.11305178212933242,0.7363968749996275,0.15579334483481944,0.13695050193928182,0.6124439227860421,0.6159805667120963,0.9770785011351109,0.5655074722599238,0.11231600190512836,0.9124121477361768,0.786160628311336,0.03245250228792429,0.8734831120818853,0.18198589840903878,0.9726735518779606,0.5637428150512278,0.8172843467909843,0.3228891249746084,0.7711170916445553,0.42381494329310954,0.14148592785932124,0.7906468599103391,0.3077843673527241,0.6525804214179516,0.6807103580795228,0.6404145308770239,0.1256686644628644,0.8399617029353976,0.2764899677131325,0.4749184977263212,0.6736029007006437,0.4548980090767145,0.5161366062238812,0.2020224672742188,0.46421257965266705,0.4355722051113844,0.256720254663378,0.46290327003225684,0.45942177390679717,0.13269042456522584,0.4330098496284336,0.2214587319176644,0.6316926064901054,0.741375454235822,0.06088175647892058,0.6632329160347581,0.6586211882531643,0.28840093105100095,0.8176581193692982,0.32876777020283043,0.7667223850730807,0.6010822879616171,0.3265350384172052,0.8482091480400413,0.529281311435625,0.25060301017947495,0.1886778399348259,0.8215338222216815,0.35527325607836246,0.07813089340925217,0.5551435749512166,0.021592253353446722,0.33586507057771087,0.7112707502674311,0.043838118901476264,0.24424392078071833,0.36384615139104426,0.660500387661159,0.5320938958320767,0.8219728579279035,0.7437052568420768,0.4192810256499797,0.7478702142834663,0.4717199874576181,0.29141591023653746,0.629703326150775,0.28076733695343137,0.4009151151403785,0.1556010830681771,0.39489094307646155,0.10174131323583424,0.32347854715771973,0.8873267038725317,0.050929793156683445,0.0381604831200093,0.9139566966332495,0.9583252442535013,0.27082862984389067,0.62170175393112,0.19395176274701953,0.2444053937215358,0.8279127336572856,0.5377521603368223,0.3499989702831954,0.6100373964291066,0.37642954871989787,0.6399058713577688,0.7417043058667332,0.13336343178525567,0.33584425784647465,0.704606412909925,0.3090214361436665,0.46637392067350447,0.8513053203932941,0.6646698059048504,0.6234601773321629,0.5110030744690448,0.42276364914141595,0.6461973418481648,0.20470241596922278,0.0460976124741137,0.651840996928513,0.049190151738002896,0.6369597229640931,0.7700335630215704,0.6609628307633102,0.038794450694695115,0.7279045397881418,0.4150585497263819,0.43945141485892236,0.924342108424753,0.41045253816992044,0.6238126512616873,0.5505163855850697,0.6117778748739511,0.04742794204503298,0.26965475105680525,0.5431141809094697,0.564946330152452,0.7897247492801398,0.6484556053765118,0.4870023096445948,0.5800353558734059,0.7076645437628031,0.29137979773804545,0.2304623289965093,0.44952586805447936,0.008222250733524561,0.22510367492213845,0.45804694085381925,0.7971712213475257,0.8555415226146579,0.10092184809036553,0.5235056658275425,0.4816977169830352,0.35386778553947806,0.3819997487589717,0.5323834782466292,0.2931685105431825,0.19111756491474807,0.39285285910591483,0.3929388942196965,0.6627318633254617,0.17075358773581684,0.19024078454822302,0.38089202996343374,0.6706125470809639,0.7551684880163521,0.05282534146681428,0.5637936040293425,0.6264919876120985,0.1332583271432668,0.8025942877866328,0.814592219889164,0.7097538504749537,0.32520970702171326,0.3901878206524998,0.25110866292379797,0.3698273089248687,0.6815446822438389,0.35283440025523305,0.338492444017902,0.35482086217962205,0.5973553822841495,0.452287059975788,0.5418149526230991,0.14274582592770457,0.5663087680004537,0.2681081455666572,0.8392312871292233,0.65874726139009,0.27959988871589303,0.012065271148458123,0.7232287805527449,0.16506422637030482,0.2395353016909212,0.16197656840085983,0.6256220242939889,0.18395170848816633,0.5092906411737204,0.5380342330317944,0.4455949456896633,0.15695037436671555,0.7463699399959296,0.460849832277745,0.5837757936678827,0.6198919101152569,0.2832755979616195,0.6445930681657046,0.7994011989794672,0.4785231414716691,0.5180045876186341,0.7606479460373521,0.3284020312130451,0.7560494060162455,0.38538111094385386,0.17687411233782768,0.6152413284871727,0.22226602723821998,0.5305725168436766,0.9190113074146211,0.13127274834550917,0.3772938880138099,0.09171238797716796,0.8027127722743899,0.12281009834259748,0.565306224161759,0.5202042807359248,0.705197726842016,0.47614859812892973,0.4954482913017273,0.2558375142980367,0.788827090524137,0.47855590796098113,0.4008297803811729,0.7067099497653544,0.24345643166452646,0.07372588431462646,0.7019311424810439,0.3987928095739335,0.6074963347055018,0.1084999730810523,0.614019628148526,0.4482320419047028,0.09324082196690142,0.6391393728554249,0.6295851895119995,0.797230621566996,0.971703089075163,0.0040362230502069,0.3406930749770254,0.3286009621806443,0.5824940011370927,0.49110351339913905,0.6020446331240237,0.3560640432406217,0.5560697107575834,0.590170219540596,0.13970924564637244,0.8483638896141201,0.5350959135685116,0.03929162654094398,0.016211444977670908,0.9832517963368446,0.2534393223468214,0.10704934992827475,0.4905361991841346,0.7850241744890809,0.38344719843007624,0.7416821096558124,0.553963920334354,0.4088394057471305,0.7775641861371696,0.4198631630279124,0.2059965543448925,0.5201106071472168,0.10258653131313622,0.7166187739931047,0.6854606021661311,0.5280640607234091,0.7316508297808468,0.4579967779573053,0.39550294005312026,0.7104599492158741,0.3522720797918737,0.15185802103951573,0.9977910502348095,0.376679468434304,0.12676690029911697,0.9770580732729286,0.7608103554230183,0.6538203118834645,0.9955676093231887,0.8197068150620908,0.29084401740692556,0.7711170916445553,0.456527711590752,0.1442191102541983,0.7906468599103391,0.38969869166612625,0.6521213578525931,0.5547757975291461,0.2364288333337754,0.27440385869704187,0.30045333481393754,0.9832517963368446,0.07237661257386208,0.38467662688344717,0.9628510267939419,0.5326612654607743,0.987092301947996,0.744181266753003,0.464565904578194,0.3327705906704068,0.5018417178653181,0.10859884857200086,0.33992169005796313,0.6012993196491152,0.24901807494461536,0.38660054840147495,0.4690928973723203,0.7106632743962109,0.6234294499736279,0.5350959135685116,0.020208662375807762,0.10547840013168752,0.49061602051369846,0.320874901721254,0.725480408873409,0.5069977287203074,0.7262204994913191,0.12545011402107775,0.484996282029897,0.22834292682819068,0.45241075521335006,0.9120764371473342,0.0712486996781081,0.1803613556548953,0.8227278008125722,0.7599674481898546,0.9960168623365462,0.002886077156290412,0.047933362890034914,0.6231101679150015,0.005329985404387116,0.35913727316074073,0.37193477735854685,0.6265560563188046,0.6469960785470903,0.8596084520686418,0.6991256230976433,0.18999298778362572,0.7494854144752026,0.3308754393365234,0.4488092015963048,0.8472147318534553,0.24295384204015136,0.41504430677741766,0.8123082350939512,0.18948062183335423,0.29978332086466253,0.5745648192241788,0.3265350384172052,0.16000003484077752,0.9190533692017198,0.07215287862345576,0.5912897435482591,0.253154227277264,0.6887227476108819,0.0622130308765918,0.299236245919019,0.7011499891523272,0.1761182143818587,0.23303613648749888,0.5148806977085769,0.809834415325895,0.7306660658214241,0.3851010019425303,0.8832887138705701,0.17112313187681139,0.9119208182673901,0.04475629283115268,0.17551670130342245,0.6724526786711067,0.11702674021944404,0.28261155146174133,0.2746125082485378,0.47570410394109786,0.24803966702893376,0.9092625519260764,0.27140767173841596,0.29706505802460015,0.2754037471022457,0.2957228298764676,0.561552295461297,0.2695407224819064,0.6739315278828144,0.7241862106602639,0.16506422637030482,0.34800240444019437,0.7273580657783896,0.37837982433848083,0.019194228807464242,0.2591475558001548,0.19066295213997364,0.8951237536966801,0.3228901196271181,0.13194374437443912,0.07988067087717354,0.3505849477369338,0.028278165496885777,0.06403690134175122,0.9766428947914392,0.7112348177470267,0.23838624637573957,0.8188091539777815,0.393236611969769,0.47271832381375134,0.8351848751772195,0.2582669232506305,0.3265717688482255,0.8268901340197772,0.9365839085076004,0.16020330344326794,0.9458978194743395,0.7781494706869125,0.43228039308451116,0.07050340576097369,0.9827211510855705,0.4446016827132553,0.6154081001877785,0.3310460529755801,0.09011327382177114,0.5036826175637543,0.33646180015057325,0.15996599290519953,0.5746378116309643,0.2165937360841781,0.7865633403416723,0.9770785011351109,0.9514068407006562,0.280122846364975,0.9137097743805498,0.14256568462587893,0.6320128794759512,0.601334573701024,0.3795271480921656,0.12211405020207167,0.5538401189260185,0.7494282864499837,0.42484869761392474,0.23282239260151982,0.4476484751794487,0.10848890338093042,0.24880868382751942,0.41064266092143953,0.49806350003927946,0.5889445070642978,0.8162522751372308,0.2002178707625717,0.30511590209789574,0.5962846700567752,0.0833969556260854,0.6771635154727846,0.7694608045276254,0.7470237561501563,0.9913786218967289,0.37755089113488793,0.12920245854184031,0.9202998448163271,0.04121855250559747,0.8571653172839433,0.8578898371197283,0.3365379876922816,0.0421161416452378,0.3580880304798484,0.002886077156290412,0.2997548447456211,0.4015225579496473,0.046483280370011926,0.5842047217302024,0.7988274460658431,0.0032533665653318167,0.14314670930616558,0.6142506515607238,0.01558026485145092,0.062489460688084364,0.6110747687052935,0.3612557081505656,0.6238920192699879,0.5796115109696984,0.30743115628138185,0.34027403546497226,0.28261155146174133,0.28620701376348734,0.46923819836229086,0.7258039053995162,0.7521636819001287,0.2665328842122108,0.2652260067407042,0.3712403029203415,0.28983549284748733,0.28829218866303563,0.8481093689333647,0.14021172188222408,0.5885904852766544,0.5165149273816496,0.7270351254846901,0.09646238503046334,0.6509570919442922,0.15768075129017234,0.7648105083499104,0.741375454235822,0.008463150123134255,0.6831665833014995,0.646354514406994,0.802883169380948,0.3920192695222795,0.43722510361112654,0.21230410458520055,0.9997165245003998,0.8077735730912536,0.27641514129936695,0.6137606939300895,0.47538964240811765,0.3328441334888339,0.9386934356298298,0.3938076850026846,0.41369116911664605,0.544180179014802,0.8444737878162414,0.07152980705723166,0.9529425476212054,0.3619604848790914,0.7340153669938445,0.2921277405694127,0.9432766162790358,0.20528088882565498,0.7800481067970395,0.7380043403245509,0.07263111788779497,0.6626552580855787,0.6430972982198,0.4981638500466943,0.49666740908287466,0.611097693676129,0.43911896203644574,0.3327705906704068,0.6040663849562407,0.045048948377370834,0.33992169005796313,0.6012993196491152,0.2206043794285506,0.8289759929757565,0.776478135259822,0.7379854882601649,0.34916913555935025,0.31511138612404466,0.16183209675364196,0.36028221738524735,0.42795152752660215,0.14718081313185394,0.3259479620028287,0.042017280822619796,0.6929518945980817,0.9723370249848813,0.3310460529755801,0.09011327382177114,0.538906974485144,0.33646180015057325,0.18401527288369834,0.5119708522688597,0.2917800659779459,0.7244122319389135,0.6040257425047457,0.7114036730490625,0.1311520377639681,0.34916913555935025,0.589523198781535,0.32541768765076995,0.42241326346993446,0.6757413451559842,0.537509050918743,0.1840609614737332,0.4868493278045207,0.29950738954357803,0.11577258678153157,0.9879484486300498,0.45089511782862246,0.14076894195750356,0.4641527538187802,0.24190252250991762,0.06876636832021177,0.03436963865533471,0.36928718839772046,0.11801525647751987,0.0006165830418467522,0.1326707734260708,0.1110850372351706,0.01933885063044727,0.4899398251436651,0.544180179014802,0.8502662300597876,0.05326709500513971,0.2532365231309086,0.943322058999911,0.24570114095695317,0.40289134392514825,0.9734490546397865,0.6800061969552189,0.2763872698415071,0.7114036730490625,0.3279319326393306,0.338492444017902,0.35482086217962205,0.585312039591372,0.4856054331175983,0.591734743444249,0.06407241080887616,0.17487874417565763,0.6256220242939889,0.12164611089974642,0.40200277348048985,0.5317688516806811,0.4689292344264686,0.43388840020634234,0.7285169877577573,0.3844679188914597,0.6022275735158473,0.7420593029819429,0.03706030989997089,0.10141203668899834,0.2929045329801738,0.31067266152240336,0.33176809805445373,0.3481130653526634,0.6240245013032109,0.5545046858023852,0.7328914972022176,0.1422487327363342,0.23423668136820197,0.7035450059920549,0.31061670975759625,0.1982244667597115,0.4086122689768672,0.5161442803218961,0.9037313857115805,0.7903762366622686,0.026738387532532215,0.9960168623365462,0.002886077156290412,0.047933362890034914,0.7676897051278502,0.23205652995966375,0.8935710510704666,0.253154227277264,0.6508634416386485,0.03548547439277172,0.2853954907041043,0.8744185208342969,0.06365655921399593,0.23534423345699906,0.5269633329007775,0.8671596013009548,0.5637936040293425,0.6264919876120985,0.016695973929017782,0.8025942877866328,0.7169232985470444,0.7068382885772735,0.48156574298627675,0.5072058893274516,0.23913472122512758,0.8050464026164263,0.6709109558723867,0.2884200904518366,0.9976124444510788,0.30568773206323385,0.46386079560033977,0.40586724784225225,0.26240671635605395,0.20883753965608776,0.41801765840500593,0.5466787251643836,0.45771512715145946,0.43388840020634234,0.6990144003648311,0.1902016296517104,0.4467502385377884,0.5408030657563359,0.31149329664185643,0.00478660617955029,0.9832517963368446,0.21439849282614887,0.13489623251371086,0.9300156361423433,0.5882876077666879,0.008265876909717917,0.8479900609236211,0.156516641844064,0.9084408953785896,0.018494613468647003,0.08634061389602721,0.9881949501577765,0.04988645762205124,0.46025264891795814,0.936857886845246,0.009481612825766206,0.41083852108567953,0.7235052115283906,0.6501145511865616,0.33799729286693037,0.5745579805225134,0.5543678370304406,0.0257203106302768,0.9690137996803969,0.5136620218399912,0.590829070424661,0.44187443470582366,0.5106704672798514,0.024009135784581304,0.33059132378548384,0.320709640160203,0.19241448678076267,0.40177296358160675,0.4741309469100088,0.726769627770409,0.28188538388349116,0.3722165604121983,0.0376698721665889,0.3457714067772031,0.34283648058772087,0.6856870239134878,0.3419465802144259,0.3877289183437824,0.21704317582771182,0.20556881511583924,0.9563844730146229,0.323898610426113,0.15341143123805523,0.9849256365559995,0.00434576440602541,0.10728463833220303,0.5653140628710389,0.6116156969219446,0.82712416886352,0.6741224483121186,0.09319517738185823,0.7317034837324172,0.3076841237489134,0.21569408848881721,0.6207592736463994,0.25303424522280693,0.6302114250138402,0.8035503753926605,0.6709109558723867,0.3781668208539486,0.9215868024621159,0.47474809805862606,0.24693679809570312,0.5725787219125777,0.4033494789618999,0.3085271765012294,0.6022275735158473,0.7093629245646298,0.345131664769724,0.2262054744642228,0.24700600421056151,0.11913671344518661,0.23598442785441875,0.24306468851864338,0.468116894364357,0.17112313187681139,0.9833357196766883,0.26788482815027237,0.024580563884228468,0.7377404510043561,0.4187960659619421,0.2487315470352769,0.07269193325191736,0.2434796430170536,0.8433524004649371,0.003686749842017889,0.43796343356370926,0.9918122275266796,0.38862448814325035,0.16931141074746847,0.9220858803018928,0.4509862072300166,0.31398647488094866,0.7800481067970395,0.7528681268449873,0.008463150123134255,0.8219728579279035,0.7437052568420768,0.36818802217021585,0.6207802384160459,0.5831356092821807,0.5426074708811939,0.36487303441390395,0.4026864212937653,0.2278748892713338,0.3561235307715833,0.3619038697797805,0.47404245007783175,0.47290387749671936,0.6872544116340578,0.2167383066844195,0.04713432630524039,0.10630805208347738,0.16654309164732695,0.0345665174536407,0.24057860928587615,0.08451099717058241,0.1970001843292266,0.9129520114511251,0.665840565925464,0.9225651882588863,0.5029778040479869,0.028853952419012785,0.7455397336743772,0.25369748822413385,0.32951409299857914,0.9911562486086041,0.45872709853574634,0.5578417698852718,0.253154227277264,0.6514155394397676,0.0550863235257566,0.2853954907041043,0.989661737345159,0.06365655921399593,0.2139679656829685,0.5126273473724723,0.7929174792952836,0.11614797520451248,0.9957279693335295,0.3311975405085832,0.26167991221882403,0.5615172521211207,0.2711665378883481,0.21925586485303938,0.5689469294156879,0.3082452949602157,0.8036823249422014,0.6709109558723867,0.34190206066705287,0.5653261749539524,0.4197669913992286,0.28770101093687117,0.8764360842760652,0.6321565019898117,0.27937105228193104,0.905845815083012,0.7977574479300529,0.03593588760122657,0.7652373111341149,0.27647990244440734,0.7345597085077316,0.8367272871546447,0.43042762763798237,0.13641391578130424,0.8659432525746524,0.25891642016358674,0.3250153544358909,0.9343661456368864,0.5728153127711266,0.2741366387344897,0.8425283597316593,0.46914381021633744,0.30460868193767965,0.02875820896588266,0.9832517963368446,0.13856976851820946,0.021854045800864697,0.8479900609236211,0.018087350530549884,0.32638860028237104,0.9344870916102082,0.7427254933863878,0.04806552384980023,0.139960375148803,0.15469322120770812,0.06025841482914984,0.2616548486985266,0.016961616231128573,0.1834255524445325,0.9804984338115901,0.7275841007940471,0.34916913555935025,0.5491913629230112,0.17623118264600635,0.36028221738524735,0.3811096935532987,0.14718081313185394,0.3492850724142045,0.5610005641356111,0.5721247678156942,0.20556881511583924,0.9563844730146229,0.323898610426113,0.15341143123805523,0.9849256365559995,0.05814039055258036,0.09255352965556085,0.06159177771769464,0.5128136433195323,0.44187443470582366,0.5089463666081429,0.1207847238983959,0.33059132378548384,0.320709640160203,0.26279345620423555,0.6905226714443415,0.9936152314767241,0.5103802455123514,0.5360476358328015,0.20309558743610978,0.09156597568653524,0.5175938305910677,0.2773792711086571,0.12497292598709464,0.59034135309048,0.3675237367860973,0.675534802256152,0.8051399271935225,0.706744666211307,0.3165979927871376,0.6407521744258702,0.726890854537487,0.38918977230787277,0.44574165949597955,0.47685002884827554,0.1826691390015185,0.7800481067970395,0.7380043403245509,0.008463150123134255,0.6626379704102874,0.6430972982198,0.56214968720451,0.5665921156760305,0.5317019326612353,0.3172778289299458,0.5941421631723642,0.7551196073181927,0.015557551058009267,0.23473373986780643,0.8843696652911603,0.10076860873959959,0.33358648233115673,0.4038883908651769,0.7561708900611848,0.9972897546831518,0.8873289693146944,0.042132181115448475,0.7441548446658999,0.39650432858616114,0.5133621937129647,0.7183518356177956,0.37422974198125303,0.3156660811509937,0.3580880304798484,0.002886077156290412,0.23986937873996794,0.4423039834946394,0.045009488705545664,0.5915435624774545,0.912837052019313,0.04744360665790737,0.02938333572819829,0.031631854828447104,0.5437606018967927,0.14376057824119925,0.3842683625407517,0.8420837158337235,0.16926938714459538,0.1484336240682751,0.9757927560713142,0.5463756145909429,0.9997165245003998,0.8648504221346229,0.1646645125001669,0.5489251515828073,0.23658565245568752,0.5440826951526105,0.9677132149226964,0.26976955868303776,0.1458634042646736,0.03286188142374158,0.9577615943271667,0.010395578807219863,0.008265876909717917,0.8427238382864743,0.21781760803423822,0.06884199962951243,0.9405950331129134,0.6230928821023554,0.788827090524137,0.4971843250095844,0.4298845457378775,0.7065200763754547,0.24345643166452646,0.07372588431462646,0.5200901285279542,0.2482370832003653,0.34468056028708816,0.27609448693692684,0.9847391243092716,0.023759112460538745,0.2096707271412015,0.9037476270459592,0.8065585386939347,0.6510973998811096,0.9595123114995658,0.016044713789597154,0.006352942204102874,0.3061490503605455,0.07016035448759794,0.08051112527027726,0.08080530678853393,0.12755280709825456,0.0031279136892408133,0.1362597302068025,0.6435095460619777,0.253154227277264,0.7267880265135318,0.10276409098878503,0.2853954907041043,0.7895326598081738,0.06365655921399593,0.2088397976476699,0.6882713839877397,0.6697304134722799,0.9997165245003998,0.7602161443792284,0.14672391978092492,0.900594562292099,0.9157864428125322,0.27177560911513865,0.6941211263183504,0.3897224811371416,0.413601215230301,0.7134242022875696,0.4580048096831888,0.2659854171797633,0.6622069757431746,0.4955388812813908,0.03227843530476093,0.6705255375709385,0.4779392033815384,0.5322352743241936,0.6387721586506814,0.09059942420572042,0.5063703078776598,0.802431283518672,0.04065099125728011,0.013744138414040208,0.9861048180609941,0.01577629568055272,0.3098747073672712,0.1187037427444011,0.9975482854060829,0.18699816265143454,0.1741333599202335,0.42801613779738545,0.10390656581148505,0.23612361960113049,0.9721117585431784,0.536785491509363,0.5737328415270895,0.7543992567807436,0.2042373523581773,0.23282239260151982,0.4476484751794487,0.008222250733524561,0.5419179040472955,0.6553686752449721,0.6123997555114329,0.019870679592713714,0.16224873927421868,0.6471444666385651,0.07145922095514834,0.9921673068311065,0.14883157680742443,0.1610676369164139,0.9571699921507388,0.027645971393212676,0.292885605012998,0.8918664129450917,0.05434629088267684,0.185284111648798,0.5790339808445424,0.588595048058778,0.1472839352209121,0.68541627866216,0.18056646641343832,0.7236976667772979,0.11613080557435751,0.18327492475509644,0.9020971164572984,0.002254761988297105,0.03443313087336719,0.34234633250162005,0.8674104099627584,0.6037566801533103,0.7715599774383008,0.681836472125724,0.18014572048559785,0.7435593600384891,0.4327706890180707,0.3629368164110929,0.5986298457719386,0.22827800828963518,0.27834631595760584,0.82712416886352,0.6741224483121186,0.09319517738185823,0.6606484358198941,0.17637788713909686,0.03455521631985903,0.7804251913912594,0.5348555441014469,0.692321861628443,0.5743243296165019,0.2595312180928886,0.11449702456593513,0.8632166220340878,0.5292385742068291,0.36036557937040925,0.8731001703999937,0.20220987778156996,0.33650895999744534,0.11735091754235327,0.2385172862559557,0.4248627226334065,0.05769103625789285,0.0064180027693510056,0.012250847415998578,0.1298554134555161,0.004126399522647262,0.37373446649871767,0.5737328415270895,0.7858876795507967,0.42484869761392474,0.23282239260151982,0.4476484751794487,0.07131272717379034,0.29205098911188543,0.3877037847414613,0.31365525466389954,0.544180179014802,0.8502662300597876,0.05326709500513971,0.3157320087775588,0.943322058999911,0.2671829662285745,0.7721237200312316,0.320219982881099,0.48508577910251915,0.13341915467754006,0.5427910601720214,0.17318014451302588,0.2262054744642228,0.2929045329801738,0.022776903584599495,0.2415012998972088,0.08644772856496274,0.6044766171835363,0.788827090524137,0.47855590796098113,0.4298845457378775,0.7065200763754547,0.24345643166452646,0.07372588431462646,0.7706246508751065,0.622674185782671,0.2927325794007629,0.6097382199950516,0.7741556991823018,0.061127890134230256,0.19370332453399897,0.24182805488817394,0.5624687094241381,0.2548161600716412,0.28891988610848784,0.1690322991926223,0.17271046107634902,0.8851475780829787,0.3239834187552333,0.016211444977670908,0.5890553495846689,0.013200561981648207,0.23271903186105192,0.6080909548327327,0.45432625617831945,0.6751129531767219,0.3240824791137129,0.2097870740108192,0.3781372851226479,0.775419014506042,0.5276824054308236,0.5368223439436406,0.815268819918856,0.04629889316856861,0.7921635806560516,0.9812779400963336,0.19089163118042052,0.405171558028087,0.9474074284080416,0.008202320197597146,0.15636421414092183,0.8776196243707091,0.5740250027738512,0.24941360112279654,0.45408514817245305,0.6038900166749954,0.021537613589316607,0.32684162724763155,0.11854011565446854,0.026671166298910975,0.9367645783349872,0.05030525359325111,0.007515603676438332,0.06866451213136315,0.01806894363835454,0.08546039811335504,0.08166500390507281,0.04204316949471831,0.002296062419191003,0.08186911977827549,0.7075185552239418,0.7560494060162455,0.6237876669038087,0.17162859230302274,0.6152413284871727,0.2193129202350974,0.5197814938146621,0.7345948813017458,0.32113843876868486,0.07532173302024603,0.2487315470352769,0.010200105141848326,0.36019880045205355,0.24052721913903952,0.1050744706299156,0.23582327086478472,0.20545999775640666,0.02042610803619027,0.17012073611840606,0.11762077710591257,0.9832517963368446,0.016748729394748807,0.9833342363126576,0.9960684573743492,0.3360197814181447,0.2686941362917423,0.9027841396164149,0.41187507985159755,0.7255732223857194,0.2062943505588919,0.18134276405908167,0.7048352269921452,0.5296227922663093,0.04714150377549231,0.7168677637819201,0.37579052173532546,0.534991184482351,0.088326659752056,0.021846250630915165,0.3667202568612993,0.13132865238003433,0.7941226887051016,0.2117010981310159,0.0734953188803047,0.9456786562222987,0.17913290089927614,0.15905861579813063,0.2550394965801388,0.00548014510422945,0.1840609614737332,0.4868493278045207,0.29950738954357803,0.11577258678153157,0.9879484486300498,0.45039147580973804,0.9671198755968362,0.7112348177470267,0.23087672819383442,0.8025559862144291,0.16261479095555842,0.009157093008980155,0.8198734070174396,0.38750618207268417,0.5031002047471702,0.4102188397664577,0.9241726405452937,0.04967454192228615,0.5851434206124395,0.058536674128845334,0.26416133251041174,0.7062659740913659,0.7313734937924892,0.42882808414287865,0.82712416886352,0.6765352410729975,0.09319517738185823,0.7804251913912594,0.5336591468658298,0.5241925797890872,0.6408865828998387,0.05121531430631876,0.12418639846146107,0.9926210478879511,0.912614804925397,0.04535397281870246,0.9812918053939939,0.223650410072878,0.501390032004565,0.7162504652515054,0.29815952433273196,0.19002725300379097,0.3738700719550252,0.1918501181062311,0.17735942942090333,0.5003776911180466,0.26132406503893435,0.2438519166316837,0.9184921036940068,0.2538908508140594,0.30947032873518765,0.8050464026164263,0.6709109558723867,0.2884200904518366,0.40586724784225225,0.26240671635605395,0.20883753965608776,0.8486724237445742,0.7219461398199201,0.22955504152923822,0.6287019993178546,0.47785419039428234,0.5120185916312039,0.8363841918762773,0.6711881456431001,0.09496742160990834,0.6606484358198941,0.17637788713909686,0.11635175975970924,0.292885605012998,0.9784952898044139,0.05867801862768829,0.185284111648798,0.5790339808445424,0.588595048058778,0.19351113634184003,0.9756773640401661,0.07475173147395253,0.7383397850207984,0.3224010190460831,0.12820910569280386,0.7039668143261224,0.5534422830678523,0.26540639461018145,0.7498479392379522,0.12472295248880982,0.32781008281745017,0.6906121878419071,0.5377520693000406,0.13804894057102501,0.7792201882693917,0.048831365536898375,0.5677560116164386,0.7123317795339972,0.4178069019690156,0.0017644206527620554,0.36487303441390395,0.4529762212187052,0.2100435639731586,0.3561235307715833,0.3619038697797805,0.47404245007783175,0.4174228087067604,0.5653777336701751,0.020635017892345786,0.17271046107634902,0.8554974859580398,0.12324652750976384,0.014820942655205727,0.9673026304226369,0.00005798647180199623,0.08122821431607008,0.37073714029975235,0.5794377664569765,0.00478660617955029,0.8572271857410669,0.03167752758599818,0.009845082182437181,0.8479900609236211,0.3654058671090752,0.07491110800765455,0.9013017078395933,0.29307135730050504,0.7031840994022787,0.4580048096831888,0.2659854171797633,0.3745595579966903,0.5513911831658334,0.38644872745499015,0.6622069757431746,0.4955388812813908,0.03227843530476093,0.2946506906300783,0.8918664129450917,0.05867801862768829,0.20256752450950444,0.5744959688745439,0.0332823630888015,0.185284111648798,0.5790339808445424,0.588595048058778,0.21483300952240825,0.8484200541861355,0.08460842724889517,0.6769654904492199,0.9628510267939419,0.48467547981999815,0.39918213966302574,0.9650360732339323,0.10755123547278345,0.6245590541511774,0.7024120325222611,0.12571821501478553,0.3500627039466053,0.5993352034129202,0.37590538430958986,0.3388207769021392,0.4265308268368244,0.16679978393949568,0.719347545877099,0.4877507062628865,0.15500943176448345,0.6168905126396567,0.17810377688147128,0.2041240525431931,0.7061129186768085,0.6448510345071554,0.29288463084958494,0.5563570542726666,0.7543992567807436,0.2042373523581773,0.23282239260151982,0.4476484751794487,0.008222250733524561,0.11231797537766397,0.36734537803567946,0.4367440294008702,0.2534884645137936,0.8338169117923826,0.351623187540099,0.1289630918763578,0.4013115700799972,0.09423990338109434,0.13365668919868767,0.03868662077002227,0.16834596870467067,0.3781059042084962,0.8420837158337235,0.21770554152317345,0.1187037427444011,0.9824135564267635,0.29803874786011875,0.12917798734270036,0.5758001718204468,0.09822156722657382,0.20020631817169487,0.3570408537052572,0.23172217071987689,0.6164140396285802,0.7180043808184564,0.24100951640866697,0.46224814420565963,0.5050958164501935,0.13870151061564684,0.07230877550318837,0.28229836281389,0.046110718976706266,0.024580563884228468,0.9310619991738349,0.5310630125459284,0.007536727236583829,0.5234775322023779,0.027199620846658945,0.7564831017516553,0.1814507378730923,0.2499249279499054,0.7009944268502295,0.5740068175364286,0.005814400734379888,0.7325652695726603,0.18692910415120423,0.3481756318360567,0.1750868104863912,0.5377820562571287,0.23784250440075994,0.5927028509322554,0.6839730043429881,0.3404892107937485,0.2262054744642228,0.2929045329801738,0.025037614163011312,0.08290262520313263,0.000769762322306633,0.2025703915860504,0.05769103625789285,0.04463090025819838,0.08832277590408921,0.04913911106996238,0.04238192946650088,0.3105459709186107,0.9972897546831518,0.8873289693146944,0.042132181115448475,0.7715599774383008,0.6650808968115598,0.038794450694695115,0.7441548446658999,0.39650432858616114,0.5133621937129647,0.6022275735158473,0.7114036730490625,0.07636744505725801,0.2262054744642228,0.24700600421056151,0.08691893424838781,0.34916913555935025,0.6032599227037281,0.4244214277714491,0.04806552384980023,0.16039354191161692,0.12057343078777194,0.0345665174536407,0.28828409290872514,0.009581154678016901,0.05259811389259994,0.1307046238798648,0.453261895570904,0.5889445070642978,0.8162522751372308,0.168476440012455,0.6383544562850147,0.6393597330898046,0.17397450236603618,0.3208352904766798,0.6899484088644385,0.23850910319015384,0.9037313857115805,0.3448203292209655,0.04670332185924053,0.9960168623365462,0.9651955843437463,0.18241833639331162,0.7268578743096441,0.7104695078451186,0.33341160975396633,0.6906121878419071,0.537296877708286,0.13804894057102501,0.7123317795339972,0.4178069019690156,0.0017644206527620554,0.7026617128867656,0.6806303279008716,0.41917388373985887,0.16014644200913608,0.8073140447959304,0.037064892472699285,0.04215969773940742,0.5421300462912768,0.06982274702750146,0.024580563884228468,0.9310619991738349,0.44390147435478866,0.6036262607667595,0.03859400167129934,0.05444068415090442,0.5742608066648245,0.07548454566858709,0.12352269911207259,0.3576207796577364,0.856422794982791,0.3672572423238307,0.6270654480904341,0.741375454235822,0.05623669200576842,0.6632329160347581,0.6586211882531643,0.28840093105100095,0.3415400697849691,0.6455603316426277,0.17692580888979137,0.038264387752860785,0.860782602801919,0.35130428872071207,0.1228080103173852,0.9815622456371784,0.06328951823525131,0.9991337691899389,0.9643581409472972,0.1030564559623599,0.48192490893416107,0.010904130525887012,0.2654193607158959,0.08524551661685109,0.6476537447888404,0.21042700903490186,0.06659382674843073,0.02100341604091227,0.039694858249276876,0.613539702957496,0.17825774988159537,0.313689868664369,0.6322354800067842,0.07170830038376153,0.042799719609320164,0.3155000009573996,0.010668196016922593,0.14919922943226993,0.4260195067618042,0.048745744628831744,0.004954095231369138,0.6234601773321629,0.5110030744690448,0.42276364914141595,0.5925880125723779,0.041434233309701085,0.06640261318534613,0.7255732223857194,0.20526753435842693,0.24677249905653298,0.7048352269921452,0.5374260598327965,0.08419843064621091,0.668471016921103,0.9542034997139126,0.15366890211589634,0.7800481067970395,0.7528681268449873,0.04360969038680196,0.8219728579279035,0.7437052568420768,0.37020778097212315,0.4223958672955632,0.6029176446609199,0.034105827333405614,0.08290262520313263,0.0010665878653526306,0.2025703915860504,0.05769103625789285,0.04463090025819838,0.09769449941813946,0.04697306244634092,0.25202462635934353,0.13284201151691377,0.0027027768082916737,0.5863126749172807,0.06150469207204878,0.07145922095514834,0.9767530763056129,0.14826692547649145,0.007652527652680874,0.8165548907127231,0.22034325334243476,0.25335044506937265,0.6597969334106892,0.047949202824383974,0.2853954907041043,0.8577258919831365,0.21274155913852155,0.24843679065816104,0.72265934641473,0.1669205785728991,0.04718212177976966,0.1438485279213637,0.12057343078777194,0.039850379107519984,0.31826118705794215,0.051131825894117355,0.253605340141803,0.4774557389318943,0.23188467836007476,0.06422094977460802,0.03190366108901799,0.06844075908884406,0.6036262607667595,0.02413470298051834,0.15604040841571987,0.5757158624473959,0.07548454566858709,0.1549771160352975,0.9371885885484517,0.9755194529425353,0.06050596456043422,0.22017292119562626,0.961914217332378,0.1016366770491004,0.9037313857115805,0.864912063581869,0.2086894146632403,0.23282239260151982,0.4476484751794487,0.07131272717379034,0.29205098911188543,0.3877037847414613,0.2877576390746981,0.3723170277662575,0.3108399931807071,0.008144072256982327,0.48213387350551784,0.4543928964994848,0.2531680967658758,0.45446750801056623,0.46139552257955074,0.013920693891122937,0.5746580669656396,0.5868180636316538,0.07621100381948054,0.7172361011616886,0.09463651292026043,0.09832897200249135,0.44187443470582366,0.5106704672798514,0.024009135784581304,0.33059132378548384,0.320709640160203,0.2207560734823346,0.007909667445346713,0.05618859687820077,0.18256618222221732,0.07446418679319322,0.8839333944488317,0.054125162307173014,0.9938590752426535,0.000576692633330822,0.047933362890034914,0.007909667445346713,0.01912435842677951,0.06844075908884406,0.3621871171053499,0.02413470298051834,0.05588382645510137,0.048961504362523556,0.34752658335492015,0.15790282282978296,0.6154081001877785,0.3310460529755801,0.09011327382177114,0.4318049962166697,0.29852298251353204,0.0337969153188169,0.5413080051075667,0.33646180015057325,0.15543715213425457,0.04713432630524039,0.16459534200839698,0.16654309164732695,0.0345665174536407,0.24057860928587615,0.08451099717058241,0.09331300714984536,0.2293697944842279,0.027349215000867844,0.010831952095031738,0.05618859687820077,0.18088584439828992,0.9938590752426535,0.000576692633330822,0.047933362890034914,0.3894302756525576,0.027372987708076835,0.03975718165747821,0.9037313857115805,0.7345832982100546,0.06349330814555287,0.9960168623365462,0.002886077156290412,0.03744663670659065,0.6639025516342372,0.2229684351477772,0.15845607686787844,0.9037313857115805,0.7891536834649742,0.06592477788217366,0.983877690276131,0.00495857885107398,0.03925440204329789,0.9916671765968204,0.8123929323628545,0.11099061067216098,0.17271046107634902,0.8878820969257504,0.11905886931344867,0.014820942655205727,0.9932390169706196,0.008542310213670135,0.03709269245155156,0.8033877790439874,0.08616760466247797,0.006507860496640205,0.5648317825980484,0.01843640673905611,0.029621058143675327,0.6118363798595965,0.15547416475601494,0.17295024963095784,0.2983201276510954,0.026531281415373087,0.006507860496640205,0.8607916049659252,0.013368023093789816,0.03502351068891585,0.5802870555780828,0.048338251654058695,0.2816819522995502,0.3169899629428983,0.133374655386433,0.05041336757130921,0.09714393154717982,0.13520923047326505,0.08021863945759833,0.9714355661999434,0.030408732825890183,0.0345665174536407,0.25716102262958884,0.011513458099216223,0.9060155239421874,0.9879609125200659,0.02692788583226502,0.006507860496640205,0.9639194554183632,0.03874414903111756,0.006670042406767607,0.6109747139271349,0.0800329886842519,col-rgba,0.07685919641517103,0.5330021292902529,0.4974879422225058,0.1624576856382191,0.7878688313066959,0.07850523432716727,0.10656930971890688,0.09197229830315337,0.5749101536348462,0.19258331903256476,0.5797038746532053,0.19163457823451607,0.7258665433619171,0.10454115062020719,0.9807467141654342,0.38000467377714814,0.6816175496205688,0.8201080623548478,0.41763702407479286,0.06948376692598686,0.16388736455701292,0.41102395858615637,0.5728186294436455,0.23933456625090915,0.8621558072045445,0.9739677377510816,0.7087172549217939,0.39480436373269184,0.9461636955384165,0.7498011365532875,0.8476460762321949,0.47988916414324195,0.9629400337580591,0.7840703786350787,0.12683422700501978,0.45024504027096557,0.9479098801966757,0.8575292318128049,0.9402534584514797,0.4782983255456202,0.9795547225512564,0.7522354067768902,0.2310719359666109,0.33013089920859784,0.9566146230790764,0.022011979017406702,0.3338618096895516,0.3027319989632815,0.9479098801966757,0.8575292318128049,0.9402534584514797,0.4782983255456202,0.9795547225512564,0.6417367612011731,0.2310719359666109,0.33013089920859784,0.9566146230790764,0.9832725431770086,0.3338618096895516,0.3027319989632815,0.5610070279799402,0.8636465263552964,0.25873950589448214,0.48239548908313734,0.8402118363883346,0.9976552936714143,0.9627384128980339,0.33869803353445604,0.7682941460516304,0.11570036457851529,0.5953852478414774,0.15456222087377683,0.9425461832433939,0.937248604837805,0.9311513698194176,0.5216230800375342,0.9263495162595063,0.9870771977584809,0.44668210903182626,0.12188782432349399,0.6350496360100806,0.5318786751013249,0.10454144515097141,0.14685933525906875,0.06013491516932845,0.12168923066928983,0.6370055426377803,0.4165130198933184,0.9583787841256708,0.5956173972226679,0.8774854149669409,0.14474026849493385,0.17736695101484656,0.8283437935169786,0.28110559401102364,0.3757879260461777,0.08243388566188514,0.0011678438168019056,0.18705608299933374,0.4722100246697664,0.3731936614494771,0.4565691016614437,0.8716748813167214,0.1571895013912581,0.6613168187905103,0.2921882816590369,0.10351619124412537,0.33011962125310673,0.8956274497322738,0.8551472828257829,0.7201343756169081,0.4826386863365769,0.9095495261717588,0.7681323813740164,0.6319924485869706,0.4024512941716239,0.8096235995180905,0.17125315219163895,0.5957444692030549,0.05656001437455416,0.8324590167030692,0.9931756861042231,0.9212742268573493,0.4767418729839846,0.3508063405752182,0.23568431986495852,0.21612137695774436,0.47662323038093746,0.8024042178876698,0.9936829323414713,0.9671923520509154,0.4656288026133552,0.14501687907613814,0.7730646210256964,0.6207626073155552,0.4297455727588385,0.9654917891602963,0.4198125551920384,0.621868957998231,0.31384726737160235,0.341326406924054,0.019818088971078396,0.008539790287613869,0.4406301465700381,0.3057165981736034,0.6462172733154148,0.6207626073155552,0.3965287344297394,0.917067930335179,0.06009697797708213,0.3829507746268064,0.14055695565184578,0.45452887774445117,0.6618890531826764,0.6689791707322001,0.22094763935310768,0.8288894458673894,0.9272476562764496,0.9191044101025909,0.3422759032808244,0.7289621094241738,0.24190162494778633,0.25146665796637535,0.47477228079224004,0.02322073793038726,0.09162259637378156,0.4548664672765881,0.1369323372025974,0.9902757122181356,0.43370703631080687,0.020516661927103996,0.34423379924846814,0.6173577650915831,0.9385439665056765,0.06964935665018857,0.4161899229860865,0.9443735457025468,0.6295546758919954,0.7466101152822375,0.23529668152332306,0.9742859685793519,0.9717141771689057,0.9854886264074594,0.2386433743988164,0.8183976442087442,0.3452158609870821,0.6467519586440176,0.42617925798986106,0.9739519245922565,0.9327815505675972,0.36833705520257354,0.3944716249126941,0.11645808909088373,0.09798271744512022,0.36043644277378917,0.10649158216547222,0.5850642311852425,0.7885507750324905,0.7947921673767269,0.48563707194989547,0.23232270404696465,0.9641103879548609,0.16946169617585838,0.10500539162894712,0.3945385084953159,0.7080808288883418,0.22578627825714648,0.40960064361570403,0.23461599554866552,0.23968400759622455,0.6163985144812614,0.362343311868608,0.45222998317331076,0.9357709598261863,0.996352982474491,0.17511142974253746,0.8097733701579273,0.9914473313838243,0.8055933534633368,0.4017780828638934,0.6329873015638441,0.6327581922523677,0.9561389784794301,0.45309819013345987,0.8410784979350865,0.9008644144050777,0.6603917132597417,0.22438180199824276,0.9425461832433939,0.937248604837805,0.9311513698194176,0.5216230800375342,0.9263495162595063,0.9870771977584809,0.44668210903182626,0.12188782432349399,0.6350496360100806,0.5318786751013249,0.10454144515097141,0.14685933525906875,0.12264966242946684,0.01346657588146627,0.07630067993886769,0.5900823506759479,0.7676508214790374,0.148294037906453,0.25126392603851855,0.08796155700692906,0.30919944145716727,0.04006537771783769,0.5258018798194826,0.17799751482671128,0.9320401945151389,0.5701402807608247,0.7664820316713303,0.07305824399227277,0.9900999094825238,0.9209762290120125,0.25964951142668724,0.4908669779310003,0.021692857146263123,0.06055352836847305,0.0991083811968565,0.4721713577979244,0.6870947096031159,0.39242475270293653,0.3235144135542214,0.325927387655247,0.9513756223022938,0.9901475724764168,0.8761081744451076,0.4965087641379796,0.2945419193711132,0.25414131418801844,0.7314700062852353,0.4678680277313106,0.5955145875923336,0.2435249458067119,0.8803612166084349,0.17533375658094885,0.8796830540522933,0.2599089543800801,0.7912915835622698,0.33087265950161965,0.5265413343440741,0.9597761633340269,0.937222300330177,0.43960136906243863,0.025172578869387507,0.4086360346991569,0.9762225106824189,0.06853831758489833,0.7933620996773243,0.9615396545268595,0.9426692314445972,0.27699556658044455,0.5307420033495873,0.12053868663497269,0.9136057158466429,0.06596887125633658,0.12985617783851922,0.8649150189012289,0.6086283084005117,0.11186615801416339,0.9066260671243072,0.4662726523820311,0.978698585415259,0.2301733166561462,0.8385530533269048,0.9810869139619172,0.9255355526693165,0.3322817352716811,0.8621558072045445,0.8238801881670952,0.603649013210088,0.39480436373269184,0.4783965414389968,0.9849216430447996,0.49933363520540297,0.07099171143490822,0.9629400337580591,0.8989616557955742,0.43657430028542876,0.33653809839161114,0.7777319587767124,0.07563964556902647,0.2777160434052348,0.4978623542236164,0.03491460671648383,0.08030293742194772,0.101050587836653,0.5810322469566017,0.09414446912705898,0.41889668558724225,0.0720638707280159,0.10937507001217456,0.9084411656949669,0.9613375142216682,0.7292915137950331,0.11267253879923374,0.8411937102209777,0.10322885168716311,0.03766007022932172,0.4063307704636827,0.40914532565511763,0.8638319398742169,0.6038600653409958,0.1521270419470966,0.19123408407904208,0.3843538404908031,0.9986954885534942,0.0721627297345549,0.5432995038572699,0.7099941843189299,0.5780192916281521,0.05155443389667198,0.9559526778757572,0.06406905548647046,0.004822774790227413,0.44600184365408496,0.8612949398811907,0.8360256156884134,0.7973337257280946,0.4830455201328732,0.05643857829272747,0.22818460408598185,0.5476353510748595,0.2516676723840647,0.08051826106384397,0.025701353093609214,0.05780118936672807,0.4834531116532162,0.9481482699047774,0.9011466300580651,0.6630573004949838,0.44313111128285526,0.8829594731796533,0.24136325647123158,0.4030734025873244,0.1397110795485787,0.7279075817205012,0.08347741281613708,0.20162334921769798,0.38523663898231464,0.2155475066974759,0.31928499042987823,0.6329629672691226,0.4738443568581715,0.6905127770733088,0.8247988393995911,0.634128583362326,0.33728509726934136,0.02094049844890833,0.06520700617693365,0.5256819231435657,0.4004259871668182,0.5963024666998535,0.07609099545516074,0.015589009271934628,0.12524235888849944,0.11694353120401502,0.9286101360339671,0.41578942467458546,0.46853781293611974,0.8751881397329271,0.5984845494385809,0.5402243798598647,0.2583814628305845,0.4375869825016707,0.9838649171870202,0.9897786155343056,0.4647372083622031,0.8332299971953034,0.9976552936714143,0.9667778534349054,0.2809002223890275,0.6133366010617465,0.1477329689078033,0.45740077923983335,0.10394362756051123,0.6838812283240259,0.7839626953937113,0.8760236226953566,0.38912079310975967,0.3980404091998935,0.7136995019391179,0.9095776337198913,0.1767633023206145,0.7586452178657055,0.43781845667399466,0.3952696805354208,0.42882181054446844,0.12423953949473798,0.7354266098700464,0.8341631339862943,0.15664899478433653,0.8704592909198254,0.5531303703319281,0.055272272089496255,0.11436884835129604,0.7924016283359379,0.6610851797740906,0.29580311151221395,0.11773312342120335,0.7226167577318847,0.9386246921494603,0.7878432762809098,0.48213189132511614,0.5723757524974644,0.7482623939868063,0.8461840215604752,0.4863877571886405,0.9674278851598501,0.7617322830483317,0.1564494981430471,0.49701088026631624,0.61715440871194,0.6398726396728307,0.0451553943566978,0.2254190337029286,0.8577669581864029,0.808628426399082,0.5198767310939729,0.3645880970172584,0.3878471436910331,0.418530031805858,0.4936962628271431,0.33176997618284076,0.8956274497322738,0.8551472828257829,0.7201343756169081,0.4826386863365769,0.9095495261717588,0.7681323813740164,0.6319924485869706,0.4024512941716239,0.8096235995180905,0.17125315219163895,0.5957444692030549,0.05656001437455416,0.9633275759406388,0.97972013335675,0.635380866471678,0.4686198585666716,0.3898828122764826,0.14884676691144705,0.11952778254635632,0.4233095693751238,0.9297609329223633,0.8295459733344615,0.7722720869351178,0.38054019954288376,0.3993337790016085,0.1331514900084585,0.00805325573310256,0.4978623542236164,0.05325658293440938,0.017022542422637343,0.101050587836653,0.5810322469566017,0.1590914644766599,0.027490537147969007,0.09564623120240867,0.4862421352416277,0.8742910434957594,0.9360813293606043,0.7901371109765023,0.16780469351215288,0.6488150749355555,0.43618149869143963,0.892289126990363,0.47948786596534776,0.18082352518104017,0.4072739416733384,0.9773690276779234,0.22766631938284265,0.19920999743044376,0.32471495238132775,0.9816967679653317,0.1705096702906303,0.6498541419859976,0.6800244760233909,0.24499684618785977,0.49342241778504103,0.5494489746633917,0.07112416881136596,0.8119181236252189,0.051627468352671714,0.977961560478434,0.9545936100184917,0.861831660149619,0.37960584260290486,0.841880947118625,0.9968795620370656,0.8716177763417363,0.42551692691631615,0.8270350345410407,0.43470553355291486,0.8711495266761631,0.41440823117736725,0.8365777754224837,0.5886824242770672,0.9056117495056242,0.31653789820848033,0.6689251605421305,0.9767199831549078,0.9735073035117239,0.4623700381023809,0.689603463979438,0.3954500409308821,0.2842252920381725,0.4299727278877981,0.7147080572322011,0.8369571671355516,0.11738890199922025,0.09512378734070809,0.9166972066741437,0.8891404869500548,0.005607616156339645,0.4517548915580846,0.07983731827698648,0.4980199271813035,0.3223510191310197,0.2142004270106554,0.48395546269603074,0.14554966008290648,0.044458401622250676,0.4978623542236164,0.03491460671648383,0.017022542422637343,0.03891041176393628,0.2981325492495671,0.2366966288536787,0.021923226537182927,0.028376044472679496,0.4588027469464578,0.7624439869541675,0.910708948969841,0.9216207370627671,0.47165911381598563,0.24034337582997978,0.02896170550957322,0.264713543234393,0.3463428299408406,0.2885426958091557,0.004738491028547287,0.4510243134573102,0.12626852092798801,0.4217308934312314,0.04721455345861614,0.23410081723704934,0.4661752531421371,0.5067886153701693,0.35552662378177047,0.2756382334046066,0.4990984467905946,0.13962046359665692,0.07430595788173378,0.19305781880393624,0.4903488446143456,0.9479098801966757,0.8575292318128049,0.9402534584514797,0.4782983255456202,0.9795547225512564,0.7732588953804225,0.7867498772684485,0.4981477950117551,0.9566146230790764,0.6802921458147466,0.3338618096895516,0.21233505667187275,0.533653178717941,0.10270109167322516,0.7134806434623897,0.17344723241403698,0.5995470352936536,0.010818218812346458,0.7545716725289822,0.3686094548320398,0.9193454254418612,0.9419955145567656,0.8001698534935713,0.47652218538569285,0.7714950998779386,0.933169636875391,0.7644917538855225,0.4745353253325447,0.9202812621369958,0.9720391933806241,0.8216515954118222,0.21244264740962537,0.47686363430693746,0.6041962141171098,0.7556459731422365,0.3406500092591159,0.9981467784382403,0.5604617816861719,0.08854729938320816,0.31138616646640005,0.8918143885675818,0.029245788464322686,0.19360057800076902,0.4500913427793421,0.31299759331159294,0.5229289236012846,0.45364924892783165,0.4634678305243142,0.5612340525258332,0.03684525401331484,0.3565393651369959,0.12161826650844887,0.009366730228066444,0.05434842314571142,0.8722348448354751,0.2474556855740957,0.8857377979438752,0.5910720319952816,0.9956983407028019,0.38657475376967343,0.5584771940484643,0.6687566989567131,0.32364098890684545,0.18503610873594883,0.9683822204824537,0.9845181021373719,0.6171469602268189,0.32048674375982955,0.9611515926662832,0.48978688567876816,0.2589374422095716,0.48200867619598287,0.8097733701579273,0.9914473313838243,0.8055933534633368,0.4017780828638934,0.6329873015638441,0.6327581922523677,0.9561389784794301,0.45309819013345987,0.8410784979350865,0.9008644144050777,0.6603917132597417,0.22438180199824276,0.6174666455481201,0.9086831461172551,0.41140004131011665,0.33046257206005974,0.7204387276433408,0.7553902429062873,0.4706548354588449,0.3004229460959323,0.8125039197038859,0.0640410219784826,0.45235516410321,0.37989912937628106,0.07817264995537698,0.36710178945213556,0.9567204024642706,0.08558668775949627,0.601050455821678,0.9527842097450048,0.2077558753080666,0.25358936523552983,0.4369189727585763,0.6956682805903256,0.9800853095948696,0.07250561474356801,0.9669796484522521,0.9759743609465659,0.9791805478744209,0.4326919361948967,0.6863956798333675,0.4163202971685678,0.9024036205373704,0.3680344229564071,0.48926424770615995,0.9962037981022149,0.8978960802778602,0.3664735422236845,0.898972705937922,0.8306422405876219,0.8077259710989892,0.38549724136246366,0.8345869076438248,0.09222454531118274,0.12310309987515211,0.134650499955751,0.9154233338776976,0.4827925774734467,0.041598782408982515,0.41226966653484853,0.9705995707772672,0.8393479757942259,0.6316583619918674,0.3262294520623982,0.14998307032510638,0.78041090676561,0.10854588123038411,0.2172652815352194,0.42355888336896896,0.3166657246183604,0.7323218625970185,0.401213375502266,0.15697924396954477,0.792117515578866,0.9216259620152414,0.3929121556924656,0.9253525091335177,0.7852405232843012,0.6759895214345306,0.3450856366660446,0.9509762621019036,0.9811494145542383,0.8735136054456234,0.4999066891963594,0.9930573750752956,0.662854420254007,0.6329629672691226,0.11812487618299201,0.9001690356526524,0.7790895088110119,0.4392454114276916,0.295222992321942,0.9000845355913043,0.21789241186343133,0.5886108283884823,0.4138047386542894,0.9641382358968258,0.9170678416267037,0.8991027816664428,0.4722679008729756,0.9627278454136103,0.7645991120953113,0.4752606824040413,0.4980895901331678,0.7289610330481082,0.49019603291526437,0.18662752746604383,0.43528669817605986,0.26378753036260605,0.22472071554511786,0.31242740503512323,0.49146539908833803,0.050246003083884716,0.8932333069387823,0.804680984467268,0.06121081948513166,0.8794950027950108,0.8621015076059848,0.2352295604068786,0.31500168772181497,0.7445642680395395,0.6887995193246752,0.9643952932674438,0.49729948134627194,0.715334412176162,0.14089596620760858,0.04061713465489447,0.11724076414247975,0.5578958957921714,0.6821070497389883,0.49091106466948986,0.48826118358410897,0.994083157973364,0.9996256378944963,0.7064963979646564,0.4963342759641819,0.9884084069635719,0.876209786394611,0.853578707203269,0.2724504329264164,0.9627644717693329,0.8595799335744232,0.9703784952871501,0.24772995223756883,0.9750088276341558,0.6527842343784869,0.2640705795492977,0.42602512600133197,0.904347061412409,0.7914542474318296,0.7993719459045678,0.4824027860537171,0.9855392479803413,0.535718341358006,0.22890978259965777,0.4961159588187002,0.5908034474123269,0.953690551687032,0.860001208493486,0.2721597352181561,0.8358316076919436,0.8382020660210401,0.9520370366517454,0.4934301468427293,0.2838885053060949,0.2754854988306761,0.22559092356823385,0.48978430656716226,0.3947553795296699,0.42781249713152647,0.04388531111180782,0.30639148131012917,0.14168650098145008,0.038336017867550254,0.44502456835471094,0.458755393489264,0.22919348441064358,0.1875338782556355,0.8090589912608266,0.43276936842594294,0.5374221382662654,0.1016862338874489,0.012360473396256566,0.48414745897753164,0.7107318099588156,0.08576824935153127,0.5089670936577022,0.42455946285044777,0.2537097204476595,0.05919881397858262,0.413051265059039,0.31270612123189495,0.7796157149132341,0.943911334965378,0.7794242750387639,0.26517928814282643,0.43519966350868344,0.9230712978169322,0.7720553367398679,0.4985895748483017,0.8503024007659405,0.18424855428747833,0.022869096603244543,0.1902820513350889,0.4989216076210141,0.5063474709168077,0.4155326276086271,0.38015935121802613,0.16252084029838443,0.025878357235342264,0.13403980061411858,0.48818755988031626,0.020551877329126,0.04040447389706969,0.166334344772622,0.4879379013320431,0.9933520772028714,0.618216292001307,0.8253606767393649,0.3895515676122159,0.0696296258829534,0.4836390330456197,0.34141723229549825,0.41835058986907825,0.3219337232876569,0.8538808550219983,0.7937252458650619,0.41828231947729366,0.4039499689824879,0.4497240928467363,0.005206788890063763,0.1541242258856073,0.8580621581058949,0.9538797957357019,0.9712456804700196,0.4954225251218304,0.9509762621019036,0.9811494145542383,0.6679932740516961,0.4999066891963594,0.6832418078556657,0.7486394240986556,0.8463548470754176,0.427702771674376,0.07142723468132317,0.20970794395543635,0.3180208473931998,0.47761992311570795,0.7822624342516065,0.8109023701399565,0.7462719480972737,0.46100598928751424,0.5219177235849202,0.21850717719644308,0.9934055493213236,0.29687308584107086,0.1183976458851248,0.884373837383464,0.5245593036524951,0.33677002240438014,0.1521468295250088,0.34456029813736677,0.5436042181681842,0.1587564292480238,0.78618333209306,0.9838649171870202,0.995200218167156,0.4358297223923728,0.9348885931540281,0.9976552936714143,0.9627384128980339,0.5767776892986148,0.5940807333681732,0.9689563249703497,0.5363878414500505,0.17687979170586915,0.35165646369569004,0.00242117908783257,0.5110448237974197,0.06603990882867948,0.0819096511695534,0.0011284153442829847,0.24943938455544412,0.45464061946840956,0.05814191419631243,0.001766015775501728,0.024004208855330944,0.48887415090575814,0.5997772184200585,0.9838649171870202,0.9236771061550826,0.26748244402697313,0.9348885931540281,0.9976552936714143,0.9627384128980339,0.5767776892986148,0.9850289630703628,0.9689563249703497,0.8105395068414509,0.46362278257729483,0.9205344174988568,0.9105193819850683,0.49181898892857134,0.4711800490738824,0.7915698348078877,0.9121770288329571,0.31805112143047154,0.3288776533911005,0.4074595777783543,0.5463296065572649,0.005921525182202458,0.06249314055312425,0.5782964874524623,0.10108834505081177,0.15944806369952857,0.31680333862314003,0.0053289702627807856,0.327866441803053,0.9327500225044787,0.4634937242139131,0.41776181710883975,0.2445611055009067,0.1472373497672379,0.4759988985606469,0.6495172835420817,0.964067606953904,0.9402453268412501,0.09677380573702976,0.1638851067982614,0.5818499696906656,0.1568330095615238,0.4612104134284891,0.42622117954306304,0.4415944069623947,0.05164970923215151,0.11822367629501969,0.6746195687446743,0.8506646975874901,0.38845323072746396,0.10898494009161369,0.2889135947916657,0.8323842356912792,0.17519280826672912,0.10516960620880128,0.9063248755410314,0.9811494145542383,0.9332956874277443,0.4392019018065184,0.6038493074011058,0.9031867627054453,0.031021060654893517,0.18792877508094535,0.7108058265876025,0.5068333065137267,0.08728085272014141,0.44446628601290283,0.7037006304599345,0.16840940807014704,0.5829151314683259,0.1054405539529398,0.8595249401405454,0.9918221891857684,0.9666752747725695,0.5734491627896204,0.9173388197086751,0.05530722881667316,0.015420453390106559,0.3661574499681592,0.10170159232802689,0.8232042707968503,0.43497287039645016,0.11305047556525097,0.7733398017007858,0.46156854880973697,0.9883264913223684,0.3924812819692306,0.3665477065369487,0.9784424928948283,0.12409282336011529,0.35077274225186555,0.7947278902865946,0.8789073319640011,0.6356447429861873,0.15206948561826722,0.5549133685417473,0.7521773688495159,0.497704123146832,0.323292267229408,0.8595213261432946,0.04983529634773731,0.435289578512311,0.490470079833176,0.41947317169979215,0.29494193219579756,0.065039515029639,0.3611689902609214,0.385391159215942,0.015497062588110566,0.09050556528382003,0.45992630030959847,0.042808722238987684,0.017022542422637343,0.09804423060268164,0.34714986315229907,0.2459815067704767,0.028533669654279947,0.10776863084174693,0.2466046750312671,0.06491839583031833,0.3487605797126889,0.8160816878080368,0.11953526728320868,0.33262139023281634,0.8376960263121873,0.24341744161210954,0.06424891960341483,0.9220606305170804,0.018127272138372064,0.22102342313155532,0.2703857006970793,0.2660354794934392,0.6298214576672763,0.869189980905503,0.4682144159567542,0.9330594316124916,0.914909259416163,0.34926735144108534,0.5779209438711405,0.6503603709861636,0.8250446463935077,0.9060169134754688,0.2524622722994536,0.10467908275313675,0.9389376817271113,0.17613190645352006,0.2510203769779764,0.2266097548417747,0.9290784914046526,0.08991693099960685,0.0901344545534812,0.5289336603600532,0.21592453843913972,0.5050011617131531,0.38102484757546334,0.9652428408153355,0.6263304771855474,0.9620806276798248,0.3267746152356267,0.38258400186896324,0.24714906490407884,0.6366370534524322,0.062133392097894105,0.26880179601721466,0.675611661747098,0.9439288121648133,0.15791717788670212,0.3850893839262426,0.9554356371518224,0.6628982790280133,0.14495774891693147,0.039895555935800076,0.9043940398842096,0.9008553237654269,0.25464477016357706,0.333511371165514,0.33778742188587785,0.41661767824552953,0.41982704974943774,0.8461297319736332,0.8996570578310639,0.9402534584514797,0.4568038274301216,0.27994089340791106,0.3623723671771586,0.5607414895202965,0.4975046034902334,0.053095408948138356,0.12590957223437726,0.7473249204922467,0.3048911019926891,0.129830542486161,0.00817918824031949,0.008242518408223987,0.4819743815343827,0.09703470044769347,0.01698852190747857,0.057203316828235984,0.4923972592689097,0.12026159022934735,0.016793350921943784,0.15619667689315975,0.1362497337628156,0.30722030461765826,0.026297915959730744,0.03160685766488314,0.5466815311461687,0.5849213637411594,0.4863637874368578,0.013138061622157693,0.42119938323739914,0.04393122741021216,0.06094283936545253,0.1989458214957267,0.46316265988862143,0.28748492849990726,0.19142839242704213,0.19450146309100091,0.05612147026695311,0.6625701268203557,0.9723479228559881,0.8431704179383814,0.40114745183382183,0.21416981820948422,0.16073177242651582,0.16621793620288372,0.2252249041106552,0.11112169548869133,0.6248023668304086,0.03127360180951655,0.2679309857543558,0.3201534675899893,0.13397795869968832,0.7910290097352117,0.06984662297181786,0.19562803418375552,0.5962647337000817,0.375399126438424,0.40580008273245766,0.4477471364662051,0.4267654693685472,0.5639609973877668,0.45239722246769815,0.9186407742090523,0.9860222381539643,0.9275553536135703,0.09975718135247008,0.4588929039891809,0.4336615465581417,0.3018421954475343,0.29099394896766173,0.5537410783581436,0.3376089814119041,0.957543600583449,0.24344275345792993,0.14938717428594828,0.1997577240690589,0.9978213070426136,0.5583512055687606,0.16116686374880373,0.014598605455830693,0.6005406933836639,0.35349698305362837,0.7279493303503841,0.922808576375246,0.8075925067532808,0.18858549017459153,0.5429988652467728,0.7483479795046151,0.2117752123158425,0.38807330405106766,0.830901212990284,0.4048514480236918,0.6735753354150802,0.4148489465122111,0.7398103661835194,0.6452393729705364,0.7513363007456064,0.4971019567688927,0.15181429707445204,0.14193022740073502,0.5827540175523609,0.12798194056376816,0.030314300442114472,0.2357696876861155,0.27460571844130754,0.16056559421122074,0.22545675048604608,0.7429680458735675,0.27505711698904634,0.1786687836283818,0.7636220578569919,0.5302782692015171,0.8994394380133599,0.23893038878450173,0.6067668520845473,0.669584727846086,0.22575435740873218,0.22351758513832465,0.13228802825324237,0.09514738572761416,0.7584850308485329,0.09535159657243639,0.05203597526997328,0.06312427204102278,0.6296706991270185,0.23067712058546025,0.22874075616709888,0.0030316796619445086,0.014476746320724487,0.48843084881082177,0.022908350452780724,0.008804459823295474,0.09522492787800729,0.48183591783745217,0.09969636728055775,0.08168371953070164,0.11185191897675395,0.43005696884356437,0.6911906630266458,0.9630736692342907,0.160158273531124,0.4116573825478554,0.15602186624892056,0.04706153669394553,0.28515534778125584,0.44279122228035706,0.5203862274065614,0.4069083076901734,0.5487027470953763,0.4325681513058953,0.12552422960288823,0.12284292466938496,0.03787015052512288,0.4898422538070008,0.9490905557759106,0.5831955254543573,0.9122673890087754,0.466454424476251,0.009752894751727581,0.059047687565907836,0.07405395060777664,0.1464400892262347,0.7221174284350127,0.9692896890919656,0.958798392675817,0.4992919579031877,0.9627993036992848,0.9273344727698714,0.9390659008640796,0.48232626158278435,0.043765491573140025,0.5978423743508756,0.07656219974160194,0.46575333160581067,0.5083079456817359,0.43130550789646804,0.9619484266731888,0.4862905691261403,0.8533340103458613,0.9032215066254139,0.6461861485149711,0.45544043722329663,0.9047590405680239,0.7011918995995075,0.04476577928289771,0.49364449735730886,0.9629400337580591,0.8989616557955742,0.8296451275236905,0.4744861721759662,0.576154604088515,0.8909073451068252,0.5700885460246354,0.42304605229292064,0.5315647316165268,0.13008925318717957,0.03228354454040527,0.32062360127456485,0.016305965604260564,0.049758929992094636,0.06191393220797181,0.46135005824035036,0.6413472266867757,0.12727577053010464,0.4885037452913821,0.09683927342994139,0.8690513090696186,0.2594759191852063,0.607687424402684,0.15608401186764242,0.8135602229740471,0.8293548638466746,0.36971142911352217,0.323427626688499,0.8482186032924801,0.2932331876363605,0.11554138804785907,0.23791336354333908,0.8073301925323904,0.9405364925041795,0.9807084910571575,0.41446242227684704,0.9826086149550974,0.8298571633640677,0.7615116080269217,0.47639494233299046,0.5984875278081745,0.8938624847214669,0.8567254110239446,0.2233562124427408,0.45005468325689435,0.5974289842415601,0.871564666274935,0.1358210111502558,0.96759920893237,0.9589889850467443,0.9060531160794199,0.4835204262984917,0.786989780375734,0.6734645017422736,0.6960653944406658,0.28575710937147963,0.48327149567194283,0.8273383202031255,0.8535081543959677,0.47942413510754706,0.20113172777928412,0.2708186134696007,0.42456809151917696,0.49290960278594864,0.03450332651846111,0.0899233091622591,0.9272636759560555,0.2736477510188706,0.029836534755304456,0.0025255135260522366,0.08542816760018468,0.35750386354047803,0.5914395204745233,0.06338241579942405,0.2059308730531484,0.49303311348194256,0.5584771940484643,0.726916064042598,0.32364098890684545,0.18503610873594883,0.9683822204824537,0.9845181021373719,0.6171469602268189,0.32048674375982955,0.9611515926662832,0.48978688567876816,0.3105505008716136,0.48200867619598287,0.852734831161797,0.9934509058948606,0.19718601531349123,0.1542955719982274,0.008324254304170609,0.06849019997753203,0.30310334358364344,0.13088129713432864,0.8561978132929653,0.09071481926366687,0.45833234721794724,0.3267421747557819,0.4102301823440939,0.10238215932622552,0.3918692183215171,0.40048486228333785,0.6473812849726528,0.8960647892672569,0.9186839004978538,0.4329911140841432,0.9575976941268891,0.15790600841864944,0.5362381241284311,0.2623338055214845,0.015573875047266483,0.00038836756721138954,0.05753209115937352,0.4677584764664061,0.5298697813414037,0.5052882661111653,0.7247195097152144,0.34726969157345594,0.3359893737360835,0.020038604270666838,0.2597000009845942,0.45941308413166554,0.022908350452780724,0.004284213995561004,0.11269944184459746,0.49787943622795866,0.2926203333772719,0.03860899293795228,0.018288217950612307,0.34108141764299943,0.23012884007766843,0.21841535507701337,0.6767956432886422,0.1307352107251063,0.3737888492178172,0.29197026370093226,0.11981757101602852,0.2328357449034229,0.2761350309010595,0.7097186320461333,0.7320205133873969,0.14655608240282164,0.7462988910265267,0.11314945365302265,0.5210291347466409,0.3806535987299867,0.1786604248918593,0.06472429656423628,0.3501552208326757,0.3166420778259635,0.06098244013264775,0.22652784455567598,0.1396710821427405,0.34040190272498877,0.03428166313096881,0.08871672814711928,0.1363896755501628,0.3967048854683526,0.9490905557759106,0.5831955254543573,0.9122673890087754,0.466454424476251,0.4492023477796465,0.059047687565907836,0.07405395060777664,0.1464400892262347,0.7221174284350127,0.9692896890919656,0.958798392675817,0.4992919579031877,0.0161636124830693,0.029613867169246078,0.06993683706969023,0.49070818707114083,0.36685381596907973,0.05331938643939793,0.2090087761171162,0.15843872347613797,0.2774678263813257,0.017733428394421935,0.0948815478477627,0.49152004700154067,0.7050909246318042,0.2985286838375032,0.40207904973067343,0.17048506228020416,0.3820410086773336,0.04837218951433897,0.9176144564989954,0.1492925271508284,0.24834467214532197,0.0025440449826419353,0.4203100735321641,0.2999440941493958,0.3539822099264711,0.0443817893974483,0.8726143829990178,0.10041045892285183,0.5548648445401341,0.2888572725933045,0.34475912572816014,0.4689265780732967,0.5727294189855456,0.5339514254592359,0.29580311151221395,0.17103536743670703,0.6738097239285707,0.9849624952767044,0.9817810216918588,0.4878273119684309,0.5166173202451319,0.9235142439138144,0.8867286972235888,0.4480899570975453,0.41285410849377513,0.6960072258953005,0.4818686116486788,0.47291703945957125,0.9175662398338318,0.6858474612236023,0.5039122148882598,0.1757222596788779,0.13970684027299285,0.7102755256928504,0.12718720897100866,0.15985530723119157,0.8279931906145066,0.8867743427399546,0.07904534554108977,0.29967044020304456,0.9939895044080913,0.9841953634750098,0.9278958244249225,0.5266788550885394,0.22993049258366227,0.822597069432959,0.8975642235018313,0.49529859197791665,0.16118062264285982,0.09454868827015162,0.5460202414542437,0.4350443123956211,0.9613621942698956,0.10689255897887051,0.48361948737874627,0.14573404809925705,0.5573161095380783,0.8745328502263874,0.38684845878742635,0.49377018263330685,0.8788560999091715,0.25662000430747867,0.005669072037562728,0.4140554031357169,0.9672408914193511,0.7947898590937257,0.5533506630454212,0.4928383495891467,0.8056874552275985,0.8828515005297959,0.28888333053328097,0.2948283230769448,0.932661369908601,0.030501907924190164,0.11568012507632375,0.23197493769694122,0.6619218089617789,0.09332135203294456,0.05365247675217688,0.28318850175710397,0.3249304862692952,0.3160447948612273,0.0902361215557903,0.3981027119909413,0.09498441754840314,0.9309914698824286,0.08111699600704014,0.2692344612791203,0.9435640170704573,0.03128218394704163,0.15945434849709272,0.4284986154641956,0.9203824650030583,0.22901594080030918,0.3517810860648751,0.1616807462880388,0.7472988138906658,0.39301510131917894,0.4416717679705471,0.45906912225764246,0.7004861524328589,0.8372250096872449,0.4206331477034837,0.4628217237768695,0.6895476658828557,0.09719799971207976,0.8671346451155841,0.06304428610019386,0.5752422150690109,0.0063022226095199585,0.5353028271347284,0.4119438019231893,0.4741041623055935,0.19605908077210188,0.4610547423362732,0.3728147178888321,0.538022480905056,0.03570388467051089,0.22254862682893872,0.219656658731401,0.04803279717452824,0.017604344757273793,0.0800189629662782,0.4657253735582344,0.016834337497130036,0.4835087708197534,0.9272642219439149,0.06212532975478098,0.47187998448498547,0.36501707532443106,0.058156540617346764,0.36549805937102064,0.9832897046580911,0.734341052826494,0.14732837956398726,0.5715447408379987,0.15257957996800542,0.006030006799846888,0.17796397488564253,0.46592723587527873,0.2197829249780625,0.0021513705141842365,0.09017756092362106,0.48124031027546155,0.8031972143799067,0.8722187145613134,0.16974995797500014,0.43355175328906626,0.12084478954784572,0.04158595320768654,0.15625548595562577,0.3477527933544479,0.42566609918139875,0.02688215090893209,0.1847038408741355,0.08244492298690603,0.2527819089591503,0.15099694509990513,0.14065376040525734,0.26278766902396455,0.29575053160078824,0.7897772020660341,0.871999068884179,0.0682161845965311,0.2004833840765059,0.25990322628058493,0.2625874530058354,0.08300008818041534,0.82464464684017,0.942827707156539,0.9645162427332252,0.4727848169277422,0.01701904064975679,0.09505281946621835,0.7130621203687042,0.3175223243422806,0.9772848037537187,0.3681790374685079,0.166673336410895,0.21015234800288457,0.07667980692349374,0.04694826831109822,0.35969289764761925,0.3895988356787711,0.413899697130546,0.8398299121763557,0.8476924933493137,0.3743210105341859,0.931148037314415,0.9946554137859493,0.5272104109171778,0.4261331019923091,0.8549966551363468,0.7514642777387053,0.6036935043521225,0.5513358514523133,0.05685736145824194,0.040009864838793874,0.19100040546618402,0.06641567792976276,0.726774709764868,0.8118042901623994,0.3012154516763985,0.08303710926556959,0.9423168019857258,0.05901865707710385,0.6638770066201687,0.3491956361453049,0.4209204399958253,0.07947878330014646,0.9847711664624512,0.061812761984765534,0.4672967449296266,0.2542710453271866,0.33422117959707975,0.22103140903636814,0.7277071408461779,0.045655735302716494,0.8024142973590642,0.06462504325900227,0.9205344174988568,0.9105193819850683,0.49181898892857134,0.49490992930950595,0.7915698348078877,0.9121770288329571,0.31805112143047154,0.3288776533911005,0.1462526738177985,0.5463296065572649,0.005921525182202458,0.06249314055312425,0.9552340044174343,0.9773073722608387,0.7777955157216638,0.4430687597719952,0.8549741934984922,0.9165571748744696,0.35073205456137657,0.05981730995699763,0.9565781909041107,0.6651666013058275,0.734334760112688,0.31251822630874815,0.16821076977066696,0.5494572238530964,0.32688095048069954,0.10299856797792017,0.5141975535079837,0.6166327251121402,0.9424172476865351,0.48895542215323073,0.9592221113853157,0.7009914342779666,0.8784589704591781,0.18539900040486829,0.9059245812240988,0.9444393028970808,0.03599542658776045,0.39141028680605816,0.9328360839281231,0.7424660571850836,0.7781657255254686,0.5773326757131144,0.7040712162852287,0.7129329410381615,0.7423242169898003,0.45764985294081273,0.8875176075380296,0.6066240859217942,0.8897173251025379,0.42364717441378164,0.5045270631089807,0.825052504427731,0.23844090360216796,0.34330987390130757,0.8773136378731579,0.9505984995048493,0.9280930252280086,0.4681003915844485,0.0161636124830693,0.029613867169246078,0.06993683706969023,0.45307809797814114,0.4979842626489699,0.5120177494827658,0.037540280958637595,0.4606917853699997,0.5308337754104286,0.23097159410826862,0.37588269263505936,0.4534860440529883,0.41916968766599894,0.5266197889577597,0.8615708847064525,0.26354442234151065,0.7978345826268196,0.6679007620550692,0.06371222506277263,0.07566622706362978,0.9235913956072181,0.8982219991739839,0.7919325702823699,0.32769025245215744,0.4912394401617348,0.269236161140725,0.13300020224414766,0.4950801102328114,0.2975572170689702,0.20803771540522575,0.658012084197253,0.4283761740894988,0.09851012262515724,0.6134400970768183,0.8555445729289204,0.36273315659491345,0.5080504734069109,0.46396675845608115,0.05972117208875716,0.1252011824748479,0.8214547079987824,0.6859357892535627,0.4186606667935848,0.11196727236965671,0.703488276572898,0.5131334355100989,0.11473169433884323,0.30393258180702104,0.4963465519249439,0.660944830160588,0.39356439327821136,0.324092043179553,0.7654467457905412,0.015235052211210132,0.7316479650326073,0.29190907698357477,0.9517227781470865,0.7564388311002403,0.5011391357984394,0.2220518889836967,0.5466058219317347,0.10815591970458627,0.1341054008807987,0.22478507097112016,0.9507222282700241,0.5406511290930212,0.630997815169394,0.38145950363250447,0.9605426851194352,0.7291797955986112,0.7457461599260569,0.4385843656142242,0.2075757256243378,0.07054504379630089,0.060555787989869714,0.22672559806378562,0.10637070867232978,0.7905749056953937,0.1722742011770606,0.11378134137485177,0.1830232385545969,0.3103297990746796,0.49172530230134726,0.13332906494615598,0.9632024415768683,0.8119603921659291,0.4513369717169553,0.4421051136334427,0.8947842111811042,0.36193507839925587,0.2506917838472873,0.450681688496843,0.13323091925121844,0.0063502558041363955,0.3678224419709295,0.08960246595088392,0.6712243088986725,0.21211772202514112,0.17033257568255067,0.49219737099483607,0.9155638958327472,0.44552099402062595,0.04639513837173581,0.38693308662623166,0.9744448990095407,0.9738577590323985,0.5538507257588208,0.44995733846444635,0.9158012697007507,0.8405045082326978,0.9673351459205151,0.39919185334583746,0.5713703457731754,0.42335712700150907,0.18256657687015831,0.1549064459395595,0.9991988935507834,0.31091649853624403,0.5934192941058427,0.2958449014578946,0.14873856282792985,0.0225710014346987,0.02927653305232525,0.42152026292169464,0.460041927639395,0.3135916767641902,0.25906919385306537,0.20188197506358846,0.8922408383805305,0.013688849285244942,0.529222120763734,0.17245193149428817,0.9276195289567113,0.5583396111615002,0.3381135056260973,0.4947543932474218,0.6155575080774724,0.8875202767085284,0.08303026133216918,0.414235172746703,0.8047409956343472,0.4910013312473893,0.03825674206018448,0.334167166124098,0.23971178196370602,0.9228194244205952,0.5799474809318781,0.2489186675637029,0.7722156150266528,0.9785597394220531,0.9951318479143083,0.4835383713245392,0.9546764227561653,0.6271934164687991,0.9525736598297954,0.07337210959522054,0.8279586238786578,0.9862254303880036,0.9667576120700687,0.3605033426778391,0.8050708083901554,0.8532990557141602,0.4902135585434735,0.278868311282713,0.18110660486854613,0.7070963147561997,0.7745492614340037,0.06634801281616093,0.8441197404172271,0.6718361140228808,0.5707576016429812,0.3170892153750174,0.7665746731217951,0.7001312600914389,0.035695287166163325,0.30979896812932567,0.47333707846701145,0.23128823935985565,0.2651135984342545,0.20754729901673274,0.49925682647153735,0.8006895526777953,0.6833193232305348,0.2954704736708664,0.9843698057811707,0.9406833492685109,0.5101013311650604,0.3396091533242725,0.7762549661565572,0.928809572942555,0.9942248610313982,0.48462287926813585,0.9276195289567113,0.5583396111615002,0.3381135056260973,0.4947543932474218,0.6155575080774724,0.8875202767085284,0.08303026133216918,0.414235172746703,0.8047409956343472,0.4910013312473893,0.03825674206018448,0.334167166124098,0.22141477721743286,0.049373848363757133,0.6363353487104177,0.24192086020484566,0.05162960011512041,0.15592903248034418,0.25706575298681855,0.3422477496205829,0.18632532097399235,0.04263455234467983,0.08899024501442909,0.4913086774060503,0.9159642546437681,0.15406152908690274,0.8420715790707618,0.07062463195761666,0.9188961463514715,0.49239269457757473,0.15669079450890422,0.5643522329861298,0.831036675022915,0.40340363467112184,0.4979011609684676,0.11065310247940943,0.9790131237823516,0.9617502584587783,0.5482025074306875,0.5977186794858426,0.7628947978373617,0.20769382012076676,0.26443815929815173,0.43091871272772553,0.7028949672821909,0.13942795409820974,0.6785954926162958,0.09057504269294442,0.9701677553821355,0.7300459989346564,0.3188945334404707,0.20446256356080994,0.7881100445520133,0.5792947239242494,0.9955952086020261,0.4815448347711936,0.9191078161820769,0.31066510337404907,0.6788785404060036,0.381599809252657,0.09918445744551718,0.028351469431072474,0.11832731612958014,0.4416161559405737,0.9775966273155063,0.5310035739094019,0.562925651203841,0.47713167777983473,0.08204448688775301,0.005978826200589538,0.043013061629608274,0.37728065834380686,0.7576911775395274,0.5361852296628058,0.9386879298835993,0.494170255062636,0.316718113142997,0.27522656391374767,0.7390676417853683,0.47477754881838335,0.6723058926872909,0.9761107519734651,0.9750730742234737,0.024253505282104015,0.10636013699695468,0.3090568839106709,0.7586756213568151,0.35062400160823015,0.2573586325161159,0.19807390728965402,0.7765460249502212,0.32294844030402603,0.17005078378133476,0.08636598335579038,0.15546690253540874,0.43103294025640937,0.07973488885909319,0.03590490482747555,0.06595841725356877,0.34506433887872845,0.9350929742213339,0.010316072264686227,0.3478020739275962,0.4641239119460806,0.9991570462007076,0.06879673176445067,0.30159273743629456,0.1833838082617149,0.8990117511712015,0.6699585129972547,0.3817786006256938,0.18529983756598084,0.9718865170143545,0.6517770616337657,0.39968679193407297,0.4820736640249379,0.0624489167239517,0.956291257403791,0.18705782550387084,0.21571327734272927,0.05152545380406082,0.4983470058068633,0.4318542464170605,0.4938316997257061,0.294817280722782,0.3113092265557498,0.08434458030387759,0.4988827139954083,0.036920360988005996,0.025812142062932253,0.2160326698794961,0.49385150752495977,0.6914547260385007,0.45058125513605773,0.42975879763253033,0.47090547133702787,0.8721992066130042,0.6441067294217646,0.9556523484643549,0.34322476416127756,0.02581280656158924,0.6268261165823787,0.8122304363641888,0.48579674584325405,0.9675180173944682,0.7496979564893991,0.39561790390871465,0.3866419365047477,0.5709749492816627,0.4735394830349833,0.9898088849149644,0.434120491403155,0.5391129681374878,0.6292887961026281,0.8508492321707308,0.4545932451612316,0.9705995707772672,0.8393479757942259,0.6316583619918674,0.3262294520623982,0.7761972134467214,0.07948803133331239,0.10854588123038411,0.2172652815352194,0.42355888336896896,0.6718510666396469,0.7882400846574455,0.401213375502266,0.7118662875145674,0.18766715214587748,0.618846648838371,0.26984991488279775,0.5850642311852425,0.7885507750324905,0.7947921673767269,0.48563707194989547,0.23232270404696465,0.9641103879548609,0.16946169617585838,0.10500539162894712,0.9214197166729718,0.9214205737225711,0.8945599200669676,0.4947560550644994,0.16561895026825368,0.8018535047303885,0.10213715420104563,0.4898384599480778,0.330343043198809,0.9697320049162954,0.8996078160125762,0.484868812689092,0.8955048802308738,0.2113624920602888,0.5256209133658558,0.40281723538646474,0.7246699347160757,0.9516963362693787,0.9801013411488384,0.2916230881237425,0.1009826532099396,0.14023085543885827,0.007944276556372643,0.05342400775989518,0.08873300813138485,0.4098599748685956,0.23342306981794536,0.21199562490219254,0.6710772376973182,0.4730450310744345,0.005361043848097324,0.4995836463524029,0.9932372835464776,0.4807614884339273,0.18005738267675042,0.16498562635388225,0.4210046238731593,0.4406422192696482,0.9071978377178311,0.1270561296027154,0.4449899068567902,0.7655346186365932,0.33474432909861207,0.10917247532634064,0.5551628151442856,0.17835271125659347,0.5293966287281364,0.27022118332097306,0.9009297769516706,0.9994845183100551,0.9620993027929217,0.5787180002313107,0.503074893495068,0.5758336787112057,0.088181541999802,0.05053746292833239,0.4742289623245597,0.7242280850186944,0.45379517460241914,0.05670918972464278,0.9550713312346488,0.7282181188929826,0.2839453089982271,0.49710451073478906,0.017911382485181093,0.055941717233508825,0.02738994173705578,0.453774826915469,0.26346480497159064,0.02501121163368225,0.19096479145810008,0.19531423875596376,0.32072313013486564,0.37751877470873296,0.4703650735318661,0.43273492142325265,0.18673951853998005,0.09485668921843171,0.9457131254021078,0.29565821405267345,0.1029473936650902,0.026570745976641774,0.7692863012198359,0.567093436862342,0.31016370584256947,0.12675691791810095,0.25456148479133844,0.20126397241838279,0.15449965931475163,0.1316265722271055,0.3649570762645453,0.0695912238676101,0.8333153042476624,0.990568766137585,0.8367852240335196,0.20545963683398444,0.000015997793525457382,0.060816881246864796,0.05978124774992466,0.17270774099742994,0.9062116690911353,0.08608426572754979,0.03657900355756283,0.1739480801508762,0.4782075397670269,0.2786527960561216,0.41478149546310306,0.28026193229015917,0.14782146783545613,0.4581755045801401,0.35858326056040823,0.46632419086527077,0.09614237304776907,0.19731264770962298,0.332939809653908,0.4045029654051177,0.8949412168003619,0.01584063610062003,0.10683502955362201,0.14102284582331776,0.027216399554163218,0.02387298014946282,0.008116322103887796,0.5799126791767776,0.550725739216432,0.20556213823147118,0.400065194349736,0.40236168649280446,0.216125697363168,0.3270513406023383,0.08154596877284348,0.4878171666176058,0.03717383532784879,0.04309643292799592,0.040038211503997445,0.11676867764908822,0.8089801259338856,0.4635186027735472,0.2083480330184102,0.3915099025820382,0.8208391063380986,0.25279936264269054,0.1626087927725166,0.19305642634863035,0.9867173575330526,0.9762854089494795,0.9609291951637715,0.2680028135306202,0.46552113560028374,0.9899936411529779,0.9962393823079765,0.4894043679931201,0.4911282006651163,0.7934130104258657,0.005875927861779928,0.47668779754312707,0.7796157149132341,0.943911334965378,0.7794242750387639,0.49501712766941636,0.43519966350868344,0.9230712978169322,0.7720553367398679,0.4985895748483017,0.8503024007659405,0.18424855428747833,0.022869096603244543,0.1902820513350889,0.9835493683349341,0.9776828263420612,0.9137201858684421,0.5216230800375342,0.35154573037289083,0.8868197472766042,0.01061130571179092,0.36739126831525937,0.9517469792626798,0.976543587166816,0.6349867018871009,0.11569172693416477,0.8484614053741097,0.17099004285410047,0.48324326798319817,0.3473807512666099,0.13686085934750736,0.004232577281072736,0.33747729775495827,0.20364622297929602,0.1087188960518688,0.9537859137635678,0.017523113638162613,0.3784569857409224,0.5767744369804859,0.8221894083544612,0.8731752075254917,0.34304278801428156,0.4254414096940309,0.8510092226788402,0.8827305226586759,0.13381821123184637,0.7912945966236293,0.8427259279415011,0.9462418106850237,0.4868769461172633,0.9843114214017987,0.9177141468971968,0.7979629593901336,0.5216230800375342,0.09096395689994097,0.749580887844786,0.81902542617172,0.46676946930820123,0.4013093304820359,0.3456694425549358,0.06235094019211829,0.3736014256137423,0.03877036413177848,0.03575460403226316,0.08103864570148289,0.4886401776224375,0.2197829249780625,0.15619554254226387,0.09017756092362106,0.48124031027546155,0.9688818387221545,0.04563399078324437,0.563234037021175,0.4224809004808776,0.026122354669496417,0.6362154518719763,0.12902232445776463,0.11672638466116042,0.8452860335819423,0.8024553575087339,0.7698276229202747,0.09391381561290474,0.9583475037943572,0.8349607540294528,0.7508709572721273,0.44474561848910527,0.999706102302298,0.9899361054413021,0.5313725005835295,0.28574300357140603,0.966763238189742,0.8498676996678114,0.35590434609912336,0.39606553453486415,0.6547865518368781,0.9665909940376878,0.7704310705885291,0.24542575280647727,0.9425461832433939,0.937248604837805,0.9311513698194176,0.5216230800375342,0.9263495162595063,0.9870771977584809,0.44668210903182626,0.12188782432349399,0.6350496360100806,0.5956560545600951,0.10454144515097141,0.14685933525906875,0.24685762845911086,0.0025995823089033365,0.4688881067559123,0.4904989399830811,0.23852218757383525,0.5685855110641569,0.6009062004741281,0.1588313854648732,0.7638327048625797,0.36793630779720843,0.492525075096637,0.4905044852406718,0.7159959699492902,0.30624610441736877,0.6247239483054727,0.1525213955086656,0.9583605485968292,0.49543628306128085,0.1710447717923671,0.383141883299686,0.6490479288622737,0.5653606462292373,0.7267250262666494,0.44053128474624825,0.27495644986629486,0.17660019919276237,0.26711470051668584,0.4396725693484768,0.028134784195572138,0.0025255135260522366,0.0034826905466616154,0.48757828342495485,0.5108028172980994,0.0008310242556035519,0.04116908344440162,0.4772422778303735,0.9835493683349341,0.9776828263420612,0.9137201858684421,0.5216230800375342,0.35154573037289083,0.8868197472766042,0.01061130571179092,0.36739126831525937,0.9517469792626798,0.976543587166816,0.6349867018871009,0.11569172693416477,0.11705629341304302,0.057674003997817636,0.707981247920543,0.44833497123327104,0.04790006368421018,0.4748855934012681,0.5692924407776445,0.3971829517162405,0.05035991361364722,0.3338339850306511,0.12228916911408305,0.3143514473340474,0.9819927592761815,0.9929643128998578,0.48991819517686963,0.4914920041919686,0.9022138824220747,0.7386535895057023,0.7709858396556228,0.36153553863987326,0.699769698549062,0.8961676068138331,0.687593290116638,0.34926451778737827,0.16390257724560797,0.06973191141150892,0.38005399727262557,0.3675664574257098,0.049256374360993505,0.02114441990852356,0.26334618288092315,0.36184547648299487,0.6654107440263033,0.05494926101528108,0.29763266793452203,0.4593293728074059,0.9790974229108542,0.9459879421629012,0.9668602887541056,0.27034675910836087,0.9556796189863235,0.5495680735912174,0.1472299552988261,0.22714940919540821,0.6978614472318441,0.915532898157835,0.6121365996077657,0.31625141460681333,0.9508839710615575,0.9357914850115776,0.9752243980765343,0.3560557310353033,0.48009796370752156,0.992592592490837,0.6213161586783826,0.10349989882670343,0.8207521601580083,0.8832199946045876,0.778373999055475,0.2546120790648274,0.4912394401617348,0.269236161140725,0.13300020224414766,0.4950801102328114,0.2975572170689702,0.20803771540522575,0.3465158415492624,0.4283761740894988,0.09851012262515724,0.6134400970768183,0.8555445729289204,0.36273315659491345,0.771802969975397,0.7545743263326585,0.43080070125870407,0.06186277795350179,0.5697643044404685,0.7532942113466561,0.02824893151409924,0.43692349307239053,0.31682656868360937,0.1381970231886953,0.003521188162267208,0.39510968660470097,0.9945988690014929,0.8807563579175621,0.557340624043718,0.4403152661281638,0.9914923135656863,0.9371653911657631,0.07435973221436143,0.26637447063112635,0.925956979393959,0.5631939778104424,0.36438465979881585,0.13129631617339327,0.129830542486161,0.21311213821172714,0.008242518408223987,0.42989946125308054,0.09703470044769347,0.01698852190747857,0.057203316828235984,0.4998855607234873,0.12026159022934735,0.016793350921943784,0.15619667689315975,0.1362497337628156,0.4937948416918516,0.13036630232818425,0.2591113857924938,0.34590324595337735,0.6468283929862082,0.00017013493925333023,0.06455650879070163,0.18199306444730612,0.45871457061730325,0.039507394190877676,0.0030966950580477715,0.47566421231022105,0.8922003901097924,0.3469166241120547,0.8956245568115264,0.35506766265025363,0.5549273663200438,0.3229197955224663,0.7029472582507879,0.3297613559756428,0.3182402877137065,0.8751255518291146,0.6190075078047812,0.33704086715588344,0.8869148788508028,0.9837137090507895,0.32802769681438804,0.49495869847014545,0.7096846490167081,0.47128260345198214,0.2850133676547557,0.19328944839071482,0.7152815225999802,0.07603421877138317,0.1654707002453506,0.48830090039409696,0.6713443838525563,0.6075213896110654,0.5293018000666052,0.19322718258481475,0.46443453687243164,0.8864088300615549,0.22302160621620715,0.3807312793796882,0.4663641448132694,0.46988289267756045,0.7832497954368591,0.39012607488548384,0.9435640170704573,0.34377964749000967,0.15945434849709272,0.4284986154641956,0.9203824650030583,0.19571260316297412,0.3517810860648751,0.1616807462880388,0.7472988138906658,0.39301510131917894,0.4416717679705471,0.45906912225764246,0.9997243182733655,0.4775122192222625,0.6708524385467172,0.4896897596423514,0.26697448012419045,0.32765587279573083,0.39676255849190056,0.324736471765209,0.6772424150258303,0.7654971247538924,0.592449887888506,0.3572320723673329,0.9477515968028456,0.5263621297199279,0.06307713384740055,0.4447564670816064,0.7641127835959196,0.15725148259662092,0.9457821247633547,0.19366588542470708,0.3563157164026052,0.27246331819333136,0.7787311733700335,0.49835703109856694,0.11541391513310373,0.06018771044909954,0.2396233140025288,0.2556249424815178,0.446733167860657,0.015604453394189477,0.5643340228125453,0.367590158933308,0.10579089634120464,0.2926190297584981,0.0007811293471604586,0.05924542401917279,0.6832418078556657,0.8086249898187816,0.8463548470754176,0.45324254400329667,0.8865227163769305,0.20970794395543635,0.3180208473931998,0.47761992311570795,0.5383564662188292,0.25020721671171486,0.02481292956508696,0.2468104946543463,0.28748492849990726,0.19142839242704213,0.19450146309100091,0.05303951016394422,0.6625701268203557,0.9723479228559881,0.8431704179383814,0.40114745183382183,0.21416981820948422,0.16073177242651582,0.16621793620288372,0.2252249041106552,0.7251433366909623,0.9199840782675892,0.6424266265239567,0.4974559205584228,0.2819005139172077,0.8401512776035815,0.9975045071914792,0.4375246286042966,0.8359253138769418,0.9024274682160467,0.15453551593236625,0.4527500939904712,0.8956274497322738,0.8551472828257829,0.7201343756169081,0.4826386863365769,0.9095495261717588,0.7681323813740164,0.6319924485869706,0.4024512941716239,0.8096235995180905,0.17125315219163895,0.5957444692030549,0.05656001437455416,0.5040093048010021,0.9862254303880036,0.9667576120700687,0.45742333106463773,0.7589687525760382,0.4708605434279889,0.8167779312934726,0.4973552832379937,0.9545304712373763,0.6046747749205679,0.7973385655786842,0.3708062842837535,0.9888633885420859,0.8666664978954941,0.06530504929833114,0.43286570163909344,0.3585642275866121,0.8851864661555737,0.9504791472572833,0.13305860618129373,0.857267813757062,0.6797286558430642,0.60460907057859,0.39314923258498313,0.9986102383118123,0.9899107727687806,0.9720407023560256,0.4963342759641819,0.9218283705413342,0.9082654439844191,0.2204956857021898,0.2154197802883573,0.7347786913160235,0.8791737048886716,0.6442561924923211,0.4119139413931407,0.8944576596841216,0.9951037038117647,0.9248670360539109,0.5266788550885394,0.7967449373099953,0.8665711432695389,0.5910525268409401,0.43155119605362413,0.5838221944868565,0.9550814491230994,0.11344776302576065,0.46537318065529687,0.09725643624551594,0.4023133523296565,0.8202946779783815,0.21328279249137266,0.49172657867893577,0.049948626197874546,0.4398166318424046,0.20725026521831752,0.8800103056710213,0.17113902932032943,0.5902046614792198,0.0799933769274503,0.8083079503849149,0.05787057033739984,0.5993562038056552,0.47761710291961207,0.21700417925603688,0.0170867673587054,0.05553749040700495,0.47601579207694156,0.0488139339722693,0.10535813495516777,0.10619400208815932,0.4984202372492291,0.877487174468115,0.8426889106631279,0.8703145531471819,0.36627824471797793,0.45057527837343514,0.756207060534507,0.7913611512631178,0.35982939627720045,0.9654948434326798,0.9354138947091997,0.6615754084195942,0.4831775172962807,0.9935502954758704,0.9873208971694112,0.39883545646443963,0.4507001215592027,0.8378854850307107,0.6300811807159334,0.11975469253957272,0.3676167550263926,0.2876707904506475,0.2955381548963487,0.7309829040896147,0.3856298727216199,0.9867173575330526,0.9762854089494795,0.9609291951637715,0.4799072508700192,0.46552113560028374,0.9899936411529779,0.9962393823079765,0.4894043679931201,0.4911282006651163,0.7934130104258657,0.5539403120055795,0.47668779754312707,0.9829380905721337,0.6550861296709627,0.6890661034267396,0.4586553081171587,0.5654878488276154,0.004073292948305607,0.3514993826393038,0.36886285233777016,0.17018587072379887,0.8602960612624884,0.16197236394509673,0.47978356431704017,0.2660354794934392,0.6298214576672763,0.869189980905503,0.4682144159567542,0.9330594316124916,0.914909259416163,0.34926735144108534,0.5779209438711405,0.6503603709861636,0.8250446463935077,0.9060169134754688,0.2524622722994536,0.9835493683349341,0.9776828263420612,0.9137201858684421,0.5216230800375342,0.9689805684611201,0.8868197472766042,0.0032199518755078316,0.36739126831525937,0.9517469792626798,0.976543587166816,0.6349867018871009,0.11569172693416477,0.6174666455481201,0.9086831461172551,0.41140004131011665,0.33046257206005974,0.7204387276433408,0.7553902429062873,0.4706548354588449,0.3004229460959323,0.8125039197038859,0.0640410219784826,0.45235516410321,0.37989912937628106,0.9772977780085057,0.30774584715254605,0.17398407589644194,0.35560470732161775,0.8419747839216143,0.23578293644823134,0.6209310824051499,0.16014508974039926,0.9884390654042363,0.44405092345550656,0.885397348087281,0.41752911809599025,0.998225528979674,0.9929643128998578,0.8095966179389507,0.354244143597316,0.9914923135656863,0.9490020824596286,0.19447828899137676,0.35476836081361396,0.6619109772145748,0.8648103992454708,0.36086615175008774,0.399120819021482,0.810919062467292,0.9396122992038727,0.6412894167006016,0.2264148922287859,0.5505222717765719,0.7591369694564492,0.6401538581121713,0.18608237801818178,0.772334607783705,0.9842778230085969,0.7025364302098751,0.2955866495729424,0.9867301366757601,0.9953365118708462,0.028851614333689213,0.33426912621362137,0.9877933938987553,0.9828487909398973,0.8339693534653634,0.4403532678959891,0.5728824499528855,0.755929206032306,0.5438730989117175,0.2671206252416596,0.7317427650559694,0.20413548359647393,0.04204247426241636,0.37116012485930694,0.07757864473387599,0.5126789188943803,0.8851406662724912,0.2151341160177253,0.41180638666264713,0.005710945697501302,0.26257865387015045,0.4097146522719413,0.22557932185009122,0.3001265209168196,0.6861109929159284,0.06893844313453884,0.6587002284359187,0.8062722005415708,0.8771644388325512,0.21778326188214125,0.4985648945439607,0.6194916861131787,0.6553048249334097,0.31476963829481974,0.9320401945151389,0.5701402807608247,0.7664820316713303,0.07305824399227277,0.9900999094825238,0.9209762290120125,0.25964951142668724,0.4908669779310003,0.021692857146263123,0.06055352836847305,0.0991083811968565,0.4721713577979244,0.6198722748085856,0.6814482132904232,0.8569683178793639,0.47269240403547885,0.8802359569817781,0.8894935965072364,0.6179209325928241,0.22283438689773905,0.9406903018243611,0.17881133826449513,0.12185141886584461,0.13039872770896183,0.19920999743044376,0.32471495238132775,0.9816967679653317,0.13719697924098,0.005933876382187009,0.0009422593284398317,0.05266958777792752,0.35815315059153363,0.5494489746633917,0.07112416881136596,0.8119181236252189,0.051627468352671714,0.9320401945151389,0.5701402807608247,0.7664820316713303,0.07305824399227277,0.9900999094825238,0.9209762290120125,0.25964951142668724,0.4908669779310003,0.021692857146263123,0.06055352836847305,0.0991083811968565,0.4721713577979244,0.4666513733100146,0.23835601843893528,0.02227001916617155,0.11726077363127843,0.3762712818570435,0.17868876527063549,0.13636872731149197,0.16975215956335887,0.8215635609813035,0.5380125029478222,0.2241069581359625,0.1365502105327323,0.9807366488967091,0.013655497692525387,0.5227676127105951,0.2790466817445122,0.7752161303069443,0.9896323126740754,0.9998132416512817,0.4803101635654457,0.1023699869401753,0.6577457597013563,0.9501866183709353,0.34208084486890583,0.6153151320759207,0.4285956781823188,0.7631094015669078,0.4681061728973873,0.9706582149956375,0.8989011601079255,0.4505759987514466,0.48147029848769307,0.5940430152695626,0.8974156409967691,0.16176963783800602,0.261274477862753,0.7486861606594175,0.6047963523305953,0.39213827392086387,0.3482661969726905,0.6598376398906112,0.36466059484519064,0.5164075933862478,0.20179521534591915,0.8240679446607828,0.25502329296432436,0.21281721210107207,0.42232196890981866,0.22141477721743286,0.049373848363757133,0.6363353487104177,0.38354976347181946,0.05162960011512041,0.15592903248034418,0.25706575298681855,0.3422477496205829,0.18632532097399235,0.04263455234467983,0.08899024501442909,0.4913086774060503,0.753326581325382,0.008804459823295474,0.09522492787800729,0.48183591783745217,0.09969636728055775,0.08168371953070164,0.11185191897675395,0.43005696884356437,0.3592380618210882,0.9630736692342907,0.160158273531124,0.4116573825478554,0.9997428723145276,0.3225778348278254,0.23675813851878047,0.22978504102211444,0.3520513721741736,0.9198822823818773,0.33470962988212705,0.4702383853145875,0.5935449700336903,0.49537819367833436,0.9490286288782954,0.23356919443467633,0.9667697781696916,0.6549686403013766,0.024251163005828857,0.08627805280266329,0.040784109849482775,0.23248978820629418,0.04167275386862457,0.45127961847465486,0.9324328664224595,0.9665104728192091,0.8845012551173568,0.3125677333911881,0.9055095314979553,0.5217984977643937,0.7575193757656962,0.30896267872303723,0.460857764352113,0.49475298053584993,0.3740421198308468,0.4347269127727486,0.7559689979534596,0.015588533598929644,0.03172093443572521,0.37088431225856766,0.9224571264348924,0.8781428101938218,0.7226999034173787,0.4778826357447542,0.9161204353440553,0.08838809025473893,0.20319366944022477,0.42938321763649584,0.5737570335622877,0.3546356591396034,0.6064353256952018,0.4700019781361334,0.9159642546437681,0.15406152908690274,0.8420715790707618,0.07062463195761666,0.9188961463514715,0.49239269457757473,0.15669079450890422,0.5643522329861298,0.831036675022915,0.40340363467112184,0.4979011609684676,0.4121764983283356,0.11563852801918983,0.6065221256576478,0.9537163996137679,0.06640870324335993,0.963183909188956,0.9903524748515338,0.9410314471460879,0.4961865989840589,0.618471436901018,0.7305366937071085,0.9955868464894593,0.27248358324868605,0.8122630370780826,0.8468445320613682,0.3918333575129509,0.45481690996093677,0.8499754285439849,0.42601279984228313,0.2629798052366823,0.44775769457919523,0.7256845021620393,0.11863703303970397,0.2473070474807173,0.48829122495371846,0.12264966242946684,0.01346657588146627,0.07630067993886769,0.5900823506759479,0.7676508214790374,0.148294037906453,0.25126392603851855,0.08796155700692906,0.30919944145716727,0.04006537771783769,0.5258018798194826,0.17799751482671128,0.9965163301676512,0.7780061941593885,0.5909762838855386,0.4785350643331185,0.8600547213573009,0.8760162133257836,0.921844390919432,0.49216677610529586,0.4923216695897281,0.06778754410333931,0.6728260999079794,0.42930812657577916,0.4845792835112661,0.7110657598823309,0.10020616091787815,0.41883247763616965,0.9589212103746831,0.41553554125130177,0.4205620209686458,0.20862749572843314,0.9422329673543572,0.4546362643595785,0.10344061790965497,0.42979535445338113,0.9921559009235352,0.30509173427708447,0.22789908107370138,0.10454779315041379,0.6105585370678455,0.6246664386708289,0.10944220726378262,0.4202187489718199,0.8281208681873977,0.9254947733134031,0.6878245498519391,0.45856595556251706,0.6277047740295529,0.25586420274339616,0.6350630261003971,0.23062783090863376,0.8113679036032408,0.908659853041172,0.6273610114585608,0.5626293368637562,0.8644710078369826,0.3377226456068456,0.17053237976506352,0.4819973440724425,0.22982739633880556,0.565355378203094,0.7666466233786196,0.4215341846342199,0.8147682310082018,0.30862867762334645,0.5481273042969406,0.3518076968030073,0.3450949832331389,0.06725188042037189,0.87295210105367,0.16363902761368082,0.15897598932497203,0.9652944607660174,0.7200559065677226,0.35956202236702667,0.4165178381372243,0.9676866983063519,0.5672113550826907,0.3695241798879579,0.9473054201807827,0.1403934513218701,0.443574778502807,0.2518405101611279,0.952792234485969,0.9679190556053072,0.7993356978986412,0.5301226938841864,0.8686350684147328,0.9367425472009927,0.4523752343375236,0.15709967882139608,0.3505495241843164,0.7620616948697716,0.723894004477188,0.33525644085602835,0.9705995707772672,0.8393479757942259,0.6316583619918674,0.3262294520623982,0.7761972134467214,0.07948803133331239,0.10854588123038411,0.2172652815352194,0.42355888336896896,0.6718510666396469,0.7882400846574455,0.401213375502266,0.8664277580101043,0.31251259380951524,0.562969014281407,0.4221118951565586,0.9175879412796348,0.7582206623628736,0.6204721331596375,0.36748959684045984,0.02808002312667668,0.1203258610330522,0.16604321030899882,0.3199869898613542,0.3391137942671776,0.6218899807427078,0.8394812066107988,0.4759113767184317,0.4122616711538285,0.02481893775984645,0.482536138035357,0.16412616276647896,0.18698116834275424,0.4993885522708297,0.12035781634040177,0.41843700205208734,0.11504054395481944,0.23915448528714478,0.03832941595464945,0.13702423094073313,0.5453672057483345,0.4972377303056419,0.5647800820879638,0.2909594644559547,0.739277123240754,0.8861270120833069,0.34370877081528306,0.38945721064228567,0.7521491521038115,0.02647565444931388,0.13385192933492362,0.07680115666007624,0.0722896980587393,0.024777755374088883,0.03380355425179005,0.45494674721267075,0.990615978371352,0.31198793346993625,0.06869213073514402,0.1836903224117123,0.926479680230841,0.6522256566677243,0.3550124254543334,0.43045873221708464,0.9623252113815397,0.6517770616337657,0.37361999694257975,0.49210135702742264,0.9834312214516103,0.28091824892908335,0.9591833613812923,0.11366070923395455,0.9807572334539145,0.6673371482174844,0.34178390935994685,0.45377672667382285,0.24659269931726158,0.057650194969028234,0.021294242003932595,0.0918551652925089,0.9373655091039836,0.8058601655066013,0.6855519185774028,0.42498766117496417,0.683303470723331,0.3675331650301814,0.5280907996930182,0.20494571374729276,0.04018484614789486,0.20307169761508703,0.06570427748374641,0.31415048146154734,0.05036430433392525,0.0002821260131895542,0.18518563639372587,0.012609158060513437,0.22532651899382472,0.5541979090776294,0.7060300284065306,0.4742505788803101,0.7680416954681277,0.8358921301551163,0.8610423472709954,0.12987113908166065,0.6462149526923895,0.7499721527565271,0.18537164898589253,0.41240576716372745,0.029604228446260095,0.05247439001686871,0.2642940180376172,0.5759853527648374,0.4015418456401676,0.03799404832534492,0.03422014694660902,0.5838919625617564,0.37740789633244276,0.03132941294461489,0.03113978775218129,0.2008920489344746,0.9137060130015016,0.16532901232130826,0.8922617514617741,0.06367732221260668,0.954227710608393,0.015787427313625813,0.07202296587638557,0.3941539663937874,0.15428548236377537,0.06338241579942405,0.09433538047596812,0.2540434966445901,0.9648888814263046,0.8608797977212816,0.1763991741463542,0.4770337352412753,0.9999116112012416,0.9116900069639087,0.05250829993747175,0.45141025106422605,0.8911591595970094,0.17532942607067525,0.4119437634944916,0.4525465890299529,0.9945988690014929,0.8807563579175621,0.557340624043718,0.4403152661281638,0.9914923135656863,0.9371653911657631,0.07435973221436143,0.26637447063112635,0.925956979393959,0.5631939778104424,0.36438465979881585,0.13129631617339327,0.5906784816179425,0.9306977931410074,0.7806095103733242,0.33321472858078777,0.6644020511303097,0.2988203624263406,0.17985864612273872,0.19741958780214192,0.8668947103433311,0.6898370075505227,0.7812674643937498,0.47529174463124946,0.9649355339352041,0.8799918075092137,0.8584492637310177,0.4375075757270679,0.7214341894723475,0.5767474274616688,0.9062994241248816,0.45658474051160736,0.6873265660833567,0.47513788449577987,0.3081172895617783,0.37472199082840235,0.4741041623055935,0.19605908077210188,0.4610547423362732,0.08354311313014479,0.538022480905056,0.03570388467051089,0.22254862682893872,0.219656658731401,0.04803279717452824,0.017604344757273793,0.0800189629662782,0.4657253735582344,0.9851667534094304,0.8626363447401673,0.4830536711961031,0.48069286869140343,0.8566965311765671,0.4026084707584232,0.08126582950353622,0.3505202318658121,0.8663906895089895,0.9545466115232557,0.10224747285246849,0.2089741125702858,0.9584872054401785,0.7553633677307516,0.8935464243404567,0.47186092217452824,0.7923798481933773,0.2830325518734753,0.6554689398035407,0.48095082039944825,0.7716841013170779,0.519527004333213,0.012210319051519036,0.4533576273242943,0.9894071840681136,0.09065792174078524,0.6767204531934112,0.4975840184604749,0.9027852742001414,0.20561351929791272,0.14731007511727512,0.11842170504387468,0.2703073713928461,0.007623252226039767,0.023808403871953487,0.3777663084329106,0.9859960847534239,0.5135768433101475,0.08335622935555875,0.3352852937765419,0.8545296145603061,0.18934008502401412,0.16771034989506006,0.3914218657766469,0.7386781002860516,0.5094654969871044,0.5347072682343423,0.18251938101602722,0.9839226375333965,0.9837203263305128,0.33515359670855105,0.42228231381159276,0.9787720364984125,0.898892343044281,0.8064966059755534,0.3156006523407996,0.9207296196836978,0.45610491861589253,0.6339950065594167,0.08768539278535173,0.29202090902253985,0.007495974190533161,0.19462084281258285,0.559271133877337,0.004392366157844663,0.08964719902724028,0.13606019015423954,0.46584592093713584,0.29853462846949697,0.09494412736967206,0.33915472379885614,0.43611269135726616,0.985967138549313,0.9354519608896226,0.6970907468348742,0.45808775604236873,0.7573002125136554,0.7778388422448188,0.7408127265516669,0.10697051112074404,0.9739523320458829,0.8589076411444694,0.45651571988128126,0.1317142551532015,0.9997243182733655,0.4913993515074253,0.4888717399444431,0.3742080817813985,0.9009651318192482,0.8643503030762076,0.3566042387392372,0.5931206724140793,0.8578429238405079,0.7089262201916426,0.9399906578473747,0.34591349503025415,0.8690518965013325,0.4815547566395253,0.5710656205192208,0.10262987089809031,0.9503255446907133,0.7558362989220768,0.3100675737950951,0.35282015170669184,0.4042980885133147,0.780901602236554,0.48103042296133935,0.4373886471032165,0.2617104335222393,0.06472429656423628,0.31939293653704226,0.09326821471331642,0.8787403714377433,0.23708267323672771,0.2773004656191915,0.2341672718292102,0.6012397320009768,0.04445723444223404,0.23851191624999046,0.061028206208720806,0.8629225585609674,0.18141974764876068,0.2773715388029814,0.1780134819331579,0.674652848392725,0.9929576476570219,0.37147623975761235,0.15959959632018583,0.8212088912259787,0.4762819833122194,0.3117637597024441,0.4427668596501462,0.9748638074379414,0.7597072157077491,0.3537799802143127,0.14611021073069425,0.08025150140747428,0.5676564001478255,0.6632672976702452,0.4043553242576309,0.1686658610124141,0.059604536509141326,0.13300063158385456,0.16039481785846876,0.3554536527954042,0.779917926993221,0.5534384462516755,0.4422514578909613,0.8372356425970793,0.7843623633962125,0.9046557415276766,0.44167770153144376,0.24493716307915747,0.4068425896111876,0.7843460671138018,0.49617707651341336,0.8987425740342587,0.16105737257748842,0.27990142279304564,0.24029697019141166,0.9954761974513531,0.8646717322990298,0.28233713284134865,0.277361581416335,0.9628617919515818,0.9759968155995011,0.8209855491295457,0.4654699836741202,0.013973528752103448,0.04878078890033066,0.019816853338852525,0.47436428170185535,0.4897923693060875,0.06653757323510945,0.8085632766596973,0.4525220438838005,0.2578231799416244,0.3740184511989355,0.31992299878038466,0.4349659275612794,0.6895175136160105,0.48450792487710714,0.9088361884932965,0.4573544804356061,0.814296031370759,0.9604981157463044,0.9924336082767695,0.571364451572299,0.9779018764384091,0.9354138947091997,0.9844810743816197,0.4850544220767915,0.37071987241506577,0.16019620117731392,0.19616712047718465,0.32185098378686233,0.903879571473226,0.35535703459754586,0.5695862614084035,0.0957163414801471,0.05173282325267792,0.03996324958279729,0.1255328101105988,0.4607363001909107,0.6532894864212722,0.5215528800617903,0.774204661604017,0.14417067877948286,0.6105316549073905,0.9868964129127562,0.4468738045543432,0.35574323451146483,0.9061143368016928,0.5457573619205505,0.37563233240507543,0.3001214076532051,0.8985917104873806,0.6197829509619623,0.9657104634679854,0.4411824301700108,0.9912953057792038,0.9889955944381654,0.3298542343545705,0.49990478000836447,0.298630784265697,0.7637228933162987,0.16791441454552114,0.17097401201026513,0.9726533328648657,0.4600831959396601,0.23378793033771217,0.49778497574152425,0.9983426986727864,0.7950221421197057,0.542872954159975,0.23773075917270037,0.9849920750129968,0.8598331972025335,0.8450791207142174,0.23777756592025984,0.998225528979674,0.9929643128998578,0.6173634654842317,0.4368838062277064,0.9914923135656863,0.9490020824596286,0.19447828899137676,0.4675859715556726,0.07224198244512081,0.648459799354896,0.6412518171127886,0.45775760607793925,0.1194871871266514,0.055170994251966476,0.08130845124833286,0.49199323361972347,0.5703434906899929,0.1720618971157819,0.20716687804087996,0.5810677700443193,0.5546875442378223,0.11564102303236723,0.049139255192130804,0.0873890754301101,0.5206400256138295,0.5476708377245814,0.7173619128298014,0.45800491926493125,0.7825802192091942,0.8173394692130387,0.8667066763155162,0.1923620070447214,0.18676541559398174,0.7842598885763437,0.9431140420492738,0.4180775737855583,0.4839559276588261,0.9883552021346986,0.9912214265204966,0.36287073463900016,0.49244548473507166,0.7209903926122934,0.9248495835345238,0.13730240262812005,0.769077806500718,0.9706170028075576,0.6451131149660796,0.44878734652884306,0.5599605739116669,0.2917082612402737,0.5669261161237955,0.4862463498720899,0.6045752551872283,0.5117979333736002,0.49267301498912275,0.3022230698144995,0.9293059117626399,0.7216669446788728,0.3238221388310194,0.3545592873357236,0.9801437868736684,0.9926896472461522,0.8653973790351301,0.4154405247885734,0.9922027778811753,0.9100417557638139,0.5707900973502547,0.49284880517516283,0.5301274654921144,0.9707945247646421,0.20012862305156887,0.07047808422939852,0.14873856282792985,0.04158595320768654,0.0520464985165745,0.4381258385255933,0.6962880594655871,0.7165993910748512,0.7046013937797397,0.44620729876914994,0.46177551825530827,0.4686471747700125,0.5977679057978094,0.3243782080593519,0.9622300791088492,0.9064201726578176,0.635706972097978,0.40121663857717066,0.6372402640990913,0.20590263581834733,0.7560959390830249,0.3479529841104522,0.8968549442943186,0.7060572751797736,0.2509612673893571,0.4066454100306146,0.9886350559536368,0.9807624246459454,0.6715218925382942,0.46729794872226194,0.9877933938987553,0.9873920474201441,0.6234100118745118,0.5607758211204782,0.8983110045082867,0.9365209420211613,0.7636963846161962,0.18574936343356968,0.5689872968941927,0.07451677485369146,0.6555300203617662,0.1820649732137099,0.9424268333241343,0.8113729930482805,0.9687766004353762,0.4909183866577223,0.9325822540558875,0.9119771509431303,0.7252182783558965,0.4619836874771863,0.7442494698334485,0.11604188638739288,0.1293091329280287,0.09590841289609671,0.947484259493649,0.40759833971969783,0.18391296453773975,0.41458813280332835,0.9358210361097008,0.025538780260831118,0.36429163976572454,0.08896387399872766,0.9560865850653499,0.8917809980921447,0.8002054612152278,0.4979707885999233,0.9520178991369903,0.679005209589377,0.11914705345407128,0.16346208018949254,0.9894073514733464,0.44016893208026886,0.6264337347820401,0.1678674599272199,0.9631492011249065,0.979075021808967,0.4258931290823966,0.47090814568800854,0.940301482565701,0.9781726927030832,0.5673512544017285,0.5531079092994332,0.2975952171254903,0.7021928823087364,0.5339776487089694,0.36300658946856856,0.022908350452780724,0.008804459823295474,0.09522492787800729,0.48183591783745217,0.09969636728055775,0.08168371953070164,0.11185191897675395,0.43005696884356437,0.6911906630266458,0.9630736692342907,0.160158273531124,0.4116573825478554,0.632156674284488,0.10819390439428389,0.1286034758668393,0.04518887598533183,0.0888988533988595,0.23675645678304136,0.6403548952657729,0.07339427951956168,0.989758548559621,0.1201652898453176,0.011277675861492753,0.4591522345901467,0.40550001338124275,0.1460642523597926,0.6208773532416672,0.3029884351184592,0.7889313381165266,0.6551704097073525,0.08589991182088852,0.3876149699557573,0.7277732708025724,0.7842397345229983,0.8525568377226591,0.4689623042591847,0.9672936797142029,0.9272407609969378,0.8010775365401059,0.48158378432272003,0.8248692194465548,0.04200220387428999,0.0011055576615035534,0.42873889801558107,0.06168271950446069,0.016612670617178082,0.040527132572606206,0.45557132828980684,0.7018860364332795,0.980067589553073,0.9112755579408258,0.479734607716091,0.8805579969193786,0.8217649597208947,0.5249738583806902,0.2656404958688654,0.5599415199831128,0.052790235728025436,0.8765971644315869,0.10007431788835675,0.08137782569974661,0.41130121517926455,0.634981750510633,0.35730089114513247,0.14938717428594828,0.023150430526584387,0.07525656744837761,0.5583512055687606,0.9158413321711123,0.027151127345860004,0.11555567174218595,0.3897597378352657,0.6829723911359906,0.3238835879601538,0.17021940648555756,0.2926276894984767,0.9084138993639499,0.47259769192896783,0.4709746893495321,0.5744619778357446,0.14102680142968893,0.051749314879998565,0.1708900595549494,0.05263730569276959,0.9885082095861435,0.7239172393456101,0.3441387650091201,0.26711503975093365,0.9933343075681478,0.41171199758537114,0.04193669022060931,0.1279574873042293,0.6696300723124295,0.49128435482271016,0.09365970245562494,0.18050159320700915,0.29202090902253985,0.007495974190533161,0.19462084281258285,0.559271133877337,0.004392366157844663,0.08964719902724028,0.13606019015423954,0.46584592093713584,0.29853462846949697,0.09494412736967206,0.33915472379885614,0.43611269135726616,0.9682195864152163,0.9990089309867471,0.9366554408334196,0.48653858723118903,0.9877933938987553,0.9958564243279397,0.7105292156338692,0.3161314970231615,0.6403631635475904,0.9081209632568061,0.14558099443092942,0.1045590637717396,0.5796625171788037,0.06361990561708808,0.4674097145907581,0.05379366299603135,0.39299849909730256,0.07471141428686678,0.17280755890533328,0.17146851056022572,0.24673691811040044,0.08809133898466825,0.003919831709936261,0.1879316754289903,0.8780051716603339,0.9581938607152551,0.9566145280841738,0.44122073400067163,0.6050704980734736,0.9190181612502784,0.9771070368587971,0.3533262682030909,0.8230454339645803,0.8609955329447985,0.030617961194366217,0.25468159668380397,0.039342998526990414,0.012469988549128175,0.4602926962543279,0.20841950707836077,0.8760363475885242,0.26257855095900595,0.14391830540262163,0.3891414911719039,0.13545521022751927,0.11237174668349326,0.21373990271240473,0.45797605502884836,0.9575143004767597,0.9691434716805816,0.8597461711615324,0.17057617828249932,0.8331930085550994,0.8344809904228896,0.10799039318226278,0.088650859054178,0.6449549896642566,0.21481055347248912,0.9676642161794007,0.49167692731134593,0.14109902596101165,0.04500463092699647,0.10568547900766134,0.18486263885861265,0.4529483497608453,0.022180217783898115,0.2593092927709222,0.12198920459486545,0.040178082417696714,0.04246885026805103,0.16125443996861577,0.26011458329157905,0.14914885023608804,0.02565531129948795,0.08891483140178025,0.39491331548197195,0.8691798050422221,0.7679092148318887,0.5674815480597317,0.483855771261733,0.9395582668948919,0.7050549788400531,0.697487321915105,0.3923457336029969,0.9938721903599799,0.9855076021049172,0.9054732031654567,0.47372133178869263,0.9972947295755148,0.9956648091319948,0.6811314651276916,0.4949974569142796,0.6525456719100475,0.7239057780243456,0.06919051962904632,0.17415176008362324,0.9751597200520337,0.9975503759924322,0.7815975199919194,0.24819953966652974,0.9823935537133366,0.99803246720694,0.4515575091354549,0.4596913587069139,0.7842424770351499,0.9473048709332943,0.7300289904233068,0.26083447855198755,0.932246190495789,0.9490026026032865,0.15178514714352787,0.3764604954048991,0.4435586608015001,0.3328530974686146,0.10837397165596485,0.18491642930312086,0.36127808247692883,0.5171251033898443,0.4410930685698986,0.0973791319062002,0.8807219050358981,0.5650957245379686,0.3318048536311835,0.2690853640902788,0.6588648718316108,0.7277389215305448,0.27088732551783323,0.2647357646608725,0.6857258684467524,0.6749283990357071,0.5825353907421231,0.4047188415308483,0.8341024231631309,0.054517824202775955,0.7385766138322651,0.30844933367334304,0.5165276052430272,0.00038712378591299057,0.71296840836294,0.06394031312083825,0.032770796213299036,0.021668871166184545,0.028250892646610737,0.3700550661655143,0.8513258353341371,0.9121993691660464,0.3495494488161057,0.4529922840534709,0.9039111193269491,0.9704017573967576,0.33375336905010045,0.3676479567657225,0.07936051650904119,0.8844019849784672,0.8205940327607095,0.43848965723300354,0.6739160518627614,0.9736934409011155,0.6802465142682195,0.45140904511790725,0.4481855691410601,0.006242680363357067,0.2443605111911893,0.4599858693429269,0.923770250286907,0.5565031527075917,0.046874948078766465,0.341148957866244,0.09635572601109743,0.5888995816931129,0.9546218449249864,0.4739248320343904,0.9348864005878568,0.9803870837204158,0.9723781896755099,0.44449252273188905,0.9096987706143409,0.8200689246878028,0.9288827902637422,0.4709489239612594,0.5184838697314262,0.9465230356436223,0.9642280123662204,0.4443060479126871,0.568645904539153,0.6810346930287778,0.5684994694311172,0.4444379442837089,0.5690326278563589,0.01520056719891727,0.8777793252374977,0.3930359675083309,0.8307719272561371,0.9274214273318648,0.6808942775242031,0.3081713527790271,0.9792624413967133,0.0029403178486973047,0.5696515997406095,0.30298634121427315,0.4701830402482301,0.053979211719706655,0.30871644616127014,0.06719500164035708,0.2294319341890514,0.01807678327895701,0.012998378835618496,0.45630032336339355,0.5882040921133012,0.21455810475163162,0.7334024340379983,0.1879450172185898,0.7673511593602598,0.9353342961985618,0.6304461979307234,0.49368966072797776,0.9174870529677719,0.4671390678267926,0.8798073814250529,0.46757498235674577,0.9643332078121603,0.9894444195087999,0.3182397752534598,0.07154915849678219,0.5844053796026856,0.023096048505976796,0.09201615862548351,0.43255910576554013,0.9622300791088492,0.7401265029329807,0.9694701086264104,0.1721333117806353,0.538090538000688,0.4937899454962462,0.26563461776822805,0.12370856165653095,0.8465081285685301,0.9437452626880258,0.8775928227696568,0.4803346525528468,0.6190715811681002,0.8938624847214669,0.6032487396150827,0.47156376935308797,0.4290171479806304,0.6180964244995266,0.9681889307685196,0.44763265292858706,0.5904616310726851,0.5815958760213107,0.9247483992949128,0.4778235673205927,0.8513258353341371,0.9869085978716612,0.9487433738540858,0.4716308967676014,0.8950585033744574,0.9858447562437505,0.5011403588578105,0.4704820434679277,0.7481601282488555,0.6430836040526628,0.2878168080933392,0.17067642448237166,0.17224333342164755,0.026297915959730744,0.11937296879477799,0.35002505595330147,0.4147938883397728,0.04356808913871646,0.35600579087622464,0.4837827883544378,0.4219266891013831,0.28033131873235106,0.140535531565547,0.4117618743912317,0.952792234485969,0.9679190556053072,0.8108768006786704,0.5301226938841864,0.635369831463322,0.02679080981761217,0.16600559698417783,0.4946264795376919,0.2459180662408471,0.1965878049377352,0.02300707926042378,0.1670693715685047,0.852734831161797,0.9934509058948606,0.19718601531349123,0.1542955719982274,0.9527337171602994,0.9427659783978015,0.9260837554465979,0.5779209438711405,0.8561978132929653,0.09071481926366687,0.8465329962782562,0.3267421747557819,0.1377249346114695,0.006172914057970047,0.046573438914492726,0.3675925772171468,0.5532079837284982,0.7775543115567416,0.04906227020546794,0.46535062526818366,0.1733063911087811,0.9727706082630903,0.01942240446805954,0.3490537449833937,0.2271835736464709,0.046424693427979946,0.09989321907050908,0.35809094125870616,0.8121946097817272,0.024230063194409013,0.005289750639349222,0.4986439413391054,0.07098820898681879,0.009928433690220118,0.032433770364150405,0.3412648538127542,0.8910520626232028,0.9495145271066576,0.7645217285025865,0.5906827453523874,0.9805559192318469,0.8192610503174365,0.94802738702856,0.39396443123696373,0.7774710617959499,0.6679703600239009,0.009749760385602713,0.08414183876011522,0.5957650109194219,0.9465230356436223,0.9642280123662204,0.4443060479126871,0.9465604997240007,0.6810346930287778,0.07175845559686422,0.4444379442837089,0.4172486886382103,0.9626891016960144,0.013696382287889719,0.3930359675083309,0.9954831234645098,0.8761793449521065,0.32131732744164765,0.41645591692067685,0.3388664536178112,0.2678351819049567,0.06481849984265864,0.5911055820412002,0.8977088376414031,0.4723992261569947,0.13317350763827562,0.24258804775308818,0.2660354794934392,0.6298214576672763,0.869189980905503,0.4682144159567542,0.9330594316124916,0.914909259416163,0.34926735144108534,0.5779209438711405,0.6503603709861636,0.8250446463935077,0.9060169134754688,0.2524622722994536,0.7875577756203711,0.6073999577201903,0.1877045570872724,0.48085633172886444,0.8855751152150333,0.147211704403162,0.14555714069865644,0.37639814232243224,0.9105252821464092,0.07613648171536624,0.18061689124442637,0.46157580950530247,0.9935502954758704,0.9873208971694112,0.5763266189023852,0.3618244877783582,0.35651054768823087,0.06150486343540251,0.014873112551867962,0.06974925176473334,0.4754757285118103,0.07353207608684897,0.30345568084158003,0.05343677654163912,0.9009297769516706,0.9994845183100551,0.9620993027929217,0.5787180002313107,0.503074893495068,0.5758336787112057,0.088181541999802,0.05053746292833239,0.4742289623245597,0.7242280850186944,0.45379517460241914,0.05670918972464278,0.9883862086571753,0.8924195587169379,0.09667849051766098,0.5433149034157395,0.8139615578111261,0.8388476260006428,0.9646487648133188,0.463365977932699,0.9367839505430311,0.9291302070487291,0.6674442293588072,0.399379977514036,0.17392718186601996,0.8516520000994205,0.944530121050775,0.06546846545534209,0.03551270836032927,0.09452622197568417,0.15034759230911732,0.27738198935985564,0.6006659017875791,0.9515735807362944,0.7431259211152792,0.18348563225008546,0.7128236226271838,0.7806340269744396,0.7886779787950218,0.2806765194516629,0.9869760568253696,0.8823501989245415,0.5526570586953312,0.39113076028879734,0.8754910500720143,0.8250054400414228,0.8883320901077241,0.4229202277725562,0.4196479427628219,0.10108834505081177,0.15944806369952857,0.31680333862314003,0.14491772465407848,0.327866441803053,0.9327500225044787,0.1593459159252234,0.41776181710883975,0.0028973761945962906,0.1472373497672379,0.4759988985606469,0.4961872175335884,0.044956388883292675,0.029137063771486282,0.38465896680718287,0.18843330396339297,0.005983466515317559,0.13504243176430464,0.4651053556939587,0.18919955915771425,0.0595134433824569,0.09032698790542781,0.48212956566130744,0.9409570477437228,0.4428676029201597,0.231766268145293,0.45194451755378395,0.9070192861836404,0.4079772385302931,0.021069324808195233,0.4854245262686163,0.5082239501643926,0.5176664746832103,0.2408934119157493,0.24783164871623742,0.5488670929335058,0.09452753979712725,0.03466264740563929,0.15317312588449566,0.02390895108692348,0.003926626872271299,0.22841604030691087,0.4729822068708017,0.4619082354474813,0.39102911041118205,0.26883252058178186,0.4728755217976868,0.6714474472682923,0.04844748438335955,0.14410382276400924,0.07344549630070106,0.7803921594750136,0.9955166403669864,0.9968159268610179,0.2977929919608869,0.039837173419073224,0.8553840457461774,0.31863304297439754,0.21171275306260212,0.5222575867082924,0.30016095051541924,0.1386774096172303,0.30754854866536335,0.14938717428594828,0.1997577240690589,0.10482564172707498,0.5583512055687606,0.16116686374880373,0.014598605455830693,0.6005406933836639,0.35349698305362837,0.8758850551676005,0.012664040550589561,0.3294120798818767,0.4935236328281462,0.7561164326034486,0.001613010186702013,0.09914786764420569,0.44306519243400544,0.3505297265946865,0.42994099552743137,0.9760984366293997,0.2463569032493979,0.022908350452780724,0.008804459823295474,0.09522492787800729,0.48183591783745217,0.6898107572924346,0.049358578864485025,0.08185325306840241,0.42333846326218916,0.20106710796244442,0.29458812647499144,0.6720088904257864,0.48703264562645926,0.14873856282792985,0.04158595320768654,0.2472193248104304,0.4127880213432945,0.4176331309136003,0.009818951832130551,0.029473058646544814,0.4297751727164723,0.6498180672060698,0.054440201725810766,0.6332844046410173,0.14176111044362188,0.13159139407798648,0.028351469431072474,0.1418095431290567,0.4635835660621524,0.7311021452769637,0.06421801936812699,0.47157599520869553,0.27053619619691743,0.8837880801875144,0.06422954564914107,0.06502991588786244,0.29510963074862956,0.32340568001382053,0.20312194572761655,0.5394192726816982,0.3913894444704056,0.7967575446236879,0.868861228460446,0.9787552896887064,0.09139856876572594,0.5017219646833837,0.695783092174679,0.7730246533174068,0.1459928945754655,0.35120163043029606,0.6424176541622728,0.8609373504295945,0.4903354194248095,0.6560540187638253,0.304380250396207,0.882318573538214,0.28241759894881396,0.8757694321684539,0.9602005511987954,0.7927459941711277,0.4756777084316127,0.5374221382662654,0.1016862338874489,0.012360473396256566,0.48414745897753164,0.5040474073030055,0.08576824935153127,0.8817489428911358,0.42455946285044777,0.2537097204476595,0.05919881397858262,0.6776527652982622,0.31270612123189495,0.07508686231449246,0.0014814103487879038,0.22784353466704488,0.49664918857160956,0.30104165547527373,0.024466452654451132,0.2534406541381031,0.4274593561771326,0.084449591813609,0.021674897987395525,0.2222973161842674,0.2896238714689389,0.06414552335627377,0.004160648910328746,0.194494268624112,0.17714706597616897,0.004668212030082941,0.01570069743320346,0.09379099402576685,0.20983942945022138,0.045673646265640855,0.06844915659166873,0.16352428123354912,0.3660897563560866,0.08137782569974661,0.41130121517926455,0.634981750510633,0.35730089114513247,0.14938717428594828,0.023150430526584387,0.07525656744837761,0.5583512055687606,0.9158413321711123,0.027151127345860004,0.11555567174218595,0.3897597378352657,0.6468598050996661,0.9860797272995114,0.6141707869246602,0.4707544588833116,0.23778732912614942,0.27811146643944085,0.6477232871111482,0.062012661050539465,0.9518682656344026,0.9283150555565953,0.7045169025659561,0.055149168451316656,0.7997854496352375,0.7942091389559209,0.8051823074929416,0.43679852968780325,0.934611042495817,0.8199302139692008,0.06728198169730604,0.4252875881968066,0.9860156802460551,0.9895495839882642,0.2610575705766678,0.41414011400192974,0.9748638074379414,0.7597072157077491,0.3537799802143127,0.38427971376804637,0.08025150140747428,0.5676564001478255,0.6632672976702452,0.4043553242576309,0.1686658610124141,0.059604536509141326,0.13300063158385456,0.16039481785846876,0.9007383859716356,0.04620232526212931,0.012956148944795132,0.20423436268465595,0.18228588672354817,0.702051528962329,0.028035474475473166,0.058320772484876215,0.46575299743562937,0.8535630591213703,0.35181845631450415,0.41033177576027813,0.044317540945485234,0.7753372462466359,0.5498420062940568,0.209076219657436,0.09277569665573537,0.037845415296033025,0.04162041377276182,0.3436946159345098,0.3025034742895514,0.2792219540569931,0.815261441282928,0.23911501927068457,0.2271835736464709,0.046424693427979946,0.09989321907050908,0.35809094125870616,0.8121946097817272,0.024230063194409013,0.005289750639349222,0.4986439413391054,0.07098820898681879,0.009928433690220118,0.032433770364150405,0.3412648538127542,0.6230221027508378,0.6557338673155755,0.34995645727030933,0.3780802971450612,0.3012422469910234,0.7437862406950444,0.07386305835098028,0.3716767581296153,0.08161401725374162,0.3492838377133012,0.30074320919811726,0.24651180605869744,0.84935676981695,0.5434756136965007,0.6656871342565864,0.4936009647906758,0.7219534767791629,0.6754862298257649,0.6859962751623243,0.22472857327666135,0.8499949055258185,0.004769282415509224,0.23004787927493453,0.29738163204165174,0.9511219952255487,0.9801962031051517,0.9329464517068118,0.5349862006492913,0.49971462273970246,0.04276024457067251,0.19617863511666656,0.2947645438136533,0.9399370918981731,0.9829946728423238,0.9776205837260932,0.41867732274113223,0.018732647644355893,0.06802882975898683,0.14408662519417703,0.3570716986898333,0.07232124893926084,0.0025255135260522366,0.11274415999650955,0.4608051199116744,0.30087615945376456,0.07769973203539848,0.5350001689512283,0.40298052481375635,0.7748369136825204,0.8706982233561575,0.8703267585951835,0.43331638221861796,0.5247475835494697,0.5399925014935434,0.8761668831575662,0.25167613265803085,0.4336335579864681,0.6702287024818361,0.9457182930782437,0.11784704040037469,0.022908350452780724,0.008804459823295474,0.09522492787800729,0.48183591783745217,0.11163483769632876,0.043865659506991506,0.17719234456308186,0.39598069940693675,0.4450906340498477,0.07540120207704604,0.012232931796461344,0.2824843169073574,0.8605139800347388,0.1889305377844721,0.3755634194239974,0.594920069235377,0.7767286109738052,0.8868055350612849,0.9522253717295825,0.05621285511879251,0.41426369710825384,0.016986251808702946,0.03010944416746497,0.1410809419467114,0.9672440262511373,0.9651727951131761,0.7785990298725665,0.3127709379652515,0.918616886716336,0.43770239874720573,0.2686716814059764,0.2112131867092103,0.8315930392127484,0.007353889988735318,0.43446144880726933,0.10527794084046035,0.00598764861933887,0.3181682536378503,0.2036422484088689,0.40923144707921894,0.03503687377087772,0.0014511959161609411,0.03595770872198045,0.361478810547851,0.09947440680116415,0.17257379367947578,0.2040730183944106,0.3958047423046082,0.8068981419783086,0.059012887766584754,0.11218682350590825,0.2661333238007501,0.5668279451783746,0.7075152683537453,0.7080396879464388,0.1022478220751509,0.7604161761701107,0.349714744836092,0.14343440113589168,0.29888394695008175,0.08823302621021867,0.004160648910328746,0.08745756954886019,0.4734470110619441,0.06734337098896503,0.07942778407596052,0.21977359289303422,0.32885906924493613,0.2892477703280747,0.22329856315627694,0.21870226017199457,0.1911857280530967,0.576154604088515,0.1349354691337794,0.5700885460246354,0.42304605229292064,0.5315647316165268,0.13008925318717957,0.03228354454040527,0.32062360127456485,0.6305021306034178,0.01406039809808135,0.972568400669843,0.35538469640305265,0.013256999896839261,0.39878980559296906,0.887228864710778,0.17815915228566154,0.7446651286445558,0.9062234261073172,0.9968159268610179,0.4949059311416931,0.7234014798887074,0.6262677267659456,0.97136224899441,0.420012066536583,0.7937953521031886,0.8908372553996742,0.8908653317485005,0.3444116260390729,0.5117086353711784,0.5310696386732161,0.4639123354572803,0.4665103395236656,0.9876399347558618,0.6860474727582186,0.8207339392974973,0.4963629586272873,0.7310577610041946,0.9999262311030179,0.7955265492200851,0.4891915123909712,0.7096041876357049,0.9274088609963655,0.005639723036438227,0.05487699474906549,0.2306728372350335,0.7880650891456753,0.18563873204402626,0.3008369695744477,0.03373242914676666,0.9582097923848778,0.580480481730774,0.4370841499534436,0.8883541061077267,0.2843495493289083,0.46195032238028944,0.10195510652847589,0.10947956587187946,0.13897539558820426,0.4088607784360647,0.4678756497101858,0.7118805414065719,0.7456714559812099,0.9480848491657525,0.4681061728973873,0.9706582149956375,0.8989011601079255,0.41286866343580186,0.48147029848769307,0.9442295343615115,0.9875756639521569,0.9879059605300426,0.4970646474510431,0.9950585849583149,0.1097709247842431,0.1876181699335575,0.0721226959838532,0.9529468261171132,0.5039578501600772,0.6984734872821718,0.2558064715587534,0.7420598834287375,0.5026530791074038,0.5836673234589398,0.10458032342139631,0.47363273380324244,0.031020710011944175,0.026580034289509058,0.34656076005194336,0.08474102686159313,0.14492405974306166,0.2038268295582384,0.34391235273797066,0.03233495960012078,0.009691325947642326,0.046101129380986094,0.49586020327406005,0.725505833979696,0.8170137065462768,0.5599633133970201,0.20856216319371018,0.9659814147744328,0.8315037717111409,0.04118005302734673,0.4747144247055985,0.9706293428316712,0.8695161037612706,0.03453537099994719,0.4965871091932058,0.9787937535438687,0.9869085978716612,0.6109258704818785,0.3486511214170605,0.8950585033744574,0.9858447562437505,0.1523007855284959,0.29496181515278297,0.9409239913802594,0.7125312751159072,0.7216798875015229,0.06407404921483249,0.9367417104076594,0.05464125913567841,0.4444571044296026,0.08271154755493626,0.9613834389019758,0.21569334249943495,0.9656636309809983,0.2856208770419471,0.7847198145464063,0.806438161060214,0.7847949261777103,0.3315634919796139,0.02715476113371551,0.00336941028945148,0.42067499668337405,0.4305808521457948,0.9464219592045993,0.5895416052080691,0.2864164924249053,0.3844180285814218,0.18211888475343585,0.019319668179377913,0.06715773674659431,0.42518881647847595,0.8275669442955405,0.3532173342537135,0.7504118441138417,0.07867821137188002,0.9384192773140967,0.6075490571092814,0.7481058186385781,0.19702362093375997,0.6222272475715727,0.24736385676078498,0.9340709247626364,0.17784464787691834,0.9566022239159793,0.9815536430105567,0.9150098653044552,0.4603414383716881,0.8888751224149019,0.7343745538964868,0.9458212766330689,0.2901290137786418,0.3948187248315662,0.7381114799063653,0.6406303693074733,0.30829077436355873,0.9856332489289343,0.5868625291623175,0.6677341542672366,0.2825635782792233,0.22427640412934124,0.0007953480817377567,0.19116119318641722,0.46750654621282595,0.37853272329084575,0.002755862893536687,0.2710822941735387,0.1575043692602776,0.06420386396348476,0.06983617786318064,0.020506626926362514,0.09665516398381442,0.219949436141178,0.01632706495001912,0.13441784400492907,0.4524771626689471,0.29326552455313504,0.7859118811320513,0.9042915406171232,0.12069117835490034,0.972086047520861,0.9505279778968543,0.6523118990007788,0.3854027664172463,0.9713542105164379,0.8141158269718289,0.2079340247437358,0.454787629772909,0.12901164451614022,0.2177872909232974,0.40999742108397186,0.4004690403933637,0.02874633064493537,0.8131612059660256,0.98521469370462,0.052813077555038036,0.5180839039385319,0.053673041984438896,0.810498314211145,0.15962849429342896,0.7898141129408032,0.9285553542431444,0.887104302411899,0.07511814866447822,0.8799421386793256,0.2019989201799035,0.9234960153698921,0.4646205927245319,0.4040692348498851,0.5984884183853865,0.07461127219721675,0.40185977844521403,0.957208163337782,0.3252540440298617,0.17282478348352015,0.5471908205887303,0.6792004604358226,0.9688498522154987,0.9501131565775722,0.49560469730058687,0.9126100298017263,0.9006216099951416,0.2747038630768657,0.41694835656089707,0.7782514439895749,0.8368280658032745,0.7332029442768544,0.05426510733086616,0.9991212233435363,0.9976944935042411,0.874769329559058,0.5374877070076763,0.8549487309064716,0.35746524250134826,0.9659472336061299,0.39417405509157105,0.7158275183755904,0.08500038622878492,0.2621255796402693,0.3281532682594843,0.8998337055090815,0.9878553438466042,0.9969862950965762,0.36904224088648335,0.98519666492939,0.6681664078496397,0.07418534089811146,0.3866012449841946,0.9214458162896335,0.13780901301652193,0.9126241386402398,0.36078072091331703,0.9586355236824602,0.6535967260133475,0.38458977290429175,0.07867689488921314,0.8154351732227951,0.11814988264814019,0.01650291564874351,0.24603372147539632,0.526205544359982,0.1443866624031216,0.4823795750271529,0.12916049115592615,0.018732647644355893,0.06802882975898683,0.2379557543899864,0.3570716986898333,0.07232124893926084,0.0025255135260522366,0.11274415999650955,0.4608051199116744,0.30087615945376456,0.07769973203539848,0.5350001689512283,0.40298052481375635,0.8549332176335156,0.967647748766467,0.21279392903670669,0.3882663386524655,0.9469295204617083,0.9156495155766606,0.5095604083035141,0.1426475620828569,0.9849553471431136,0.9078711869660765,0.6647717037703842,0.4869883270468563,0.9975055190734565,0.9366769636981189,0.5480096628889441,0.46081298507051544,0.23918888857588172,0.9428015348967165,0.7247757841832936,0.4271982875536196,0.9291972753126174,0.9078711869660765,0.5659249546006322,0.4197729229810648,0.7723539681173861,0.9970659739337862,0.9489462929777801,0.46198645161930474,0.909512888174504,0.9810276275966316,0.9451913665980101,0.06714939955854789,0.9250204327981919,0.9525086614303291,0.9768101298250258,0.13080213037319482,0.9151137231383473,0.9138107253238559,0.6456604385748506,0.506950069242157,0.9191782516427338,0.9759163199923933,0.3035267819650471,0.4552413685945794,0.26291035185568035,0.9559832126833498,0.9899570865090936,0.4120481451973319,0.1458548135124147,0.18328390968963504,0.24738730303943157,0.31120918415253984,0.0013729564379900694,0.03098812303505838,0.0014620455913245678,0.5661020821658894,0.03793930262327194,0.021699739154428244,0.03537312336266041,0.21957412401679904,0.6619218089617789,0.09332135203294456,0.38366176187992096,0.28318850175710397,0.049595666117966175,0.0025255135260522366,0.0034826905466616154,0.4802156508900225,0.8722341549582779,0.04126080474816263,0.9454539606813341,0.19746715478831905,0.6597111744340509,0.3837483918759972,0.18613992352038622,0.4621556580415927,0.711660351138562,0.11672835540957749,0.1323906104080379,0.17340561081655326,0.9840358630754054,0.8947484702803195,0.8353093350306153,0.00792599692940712,0.8053502049297094,0.03163995477370918,0.9334144869353622,0.31505521927028896,0.06750773824751377,0.037764526437968016,0.19856843864545226,0.5810677700443193,0.13962046359665692,0.013400394469499588,0.24770526215434074,0.3794884801376611,0.8746458268724382,0.835280344588682,0.8634871267713606,0.21807102498132735,0.9365663833450526,0.9982107987161726,0.9301274048630148,0.0616757923620753,0.9725812638644129,0.9940534820780158,0.8017242655623704,0.57777357744053,0.3678118323441595,0.2146454625762999,0.07130426191724837,0.1440506288665347,0.9904793102759868,0.3062478748615831,0.3068074444308877,0.43913088015979157,0.7461453191936016,0.9219830308575183,0.7142365532927215,0.30802958755521104,0.06774848559871316,0.0017457555513828993,0.16968854656443,0.49038761091651395,0.21481038397178054,0.06710433983244002,0.22388421185314655,0.11541131193516777,0.15750638372264802,0.3545152379665524,0.013520573498681188,0.4264397913240828,0.9681603999342769,0.9107007309794426,0.781838693888858,0.1689893205650151,0.7306122637819499,0.6533701296430081,0.698579779593274,0.19237739873351528,0.9746455145068467,0.45730455801822245,0.4632108185905963,0.4996583814965561,0.09573202184401453,0.0018439874984323978,0.1216937773860991,0.4535025070537813,0.26385190431028605,0.06149447872303426,0.0666112236212939,0.1762137357145548,0.033924792893230915,0.025812142062932253,0.09308582730591297,0.4692728199297562,0.9978127458598465,0.7876385590061545,0.9112755579408258,0.40208622708451003,0.03481467440724373,0.09420803259126842,0.18503404804505408,0.4548733936157078,0.3162665334530175,0.5724890376441181,0.37076814379543066,0.38091540936147794,0.8697132654488087,0.016159378457814455,0.39062051521614194,0.32733801439171656,0.24607279850170016,0.17191555723547935,0.16828816127963364,0.10860727877588944,0.2818228725809604,0.7174269643146545,0.539656681008637,0.2933879794552922,0.9679412669502199,0.9903159367386252,0.9501131565775722,0.5898094502277672,0.4220118203666061,0.9827328929677606,0.5616618460044265,0.16548200611723587,0.787712209392339,0.5798261209856719,0.3069559691939503,0.10519082363462076,0.576154604088515,0.8391329813748598,0.27562446566298604,0.42304605229292064,0.5892560067586601,0.13008925318717957,0.03228354454040527,0.32062360127456485,0.016305965604260564,0.049758929992094636,0.06191393220797181,0.46135005824035036,0.10065219714306295,0.24754024832509458,0.7713857544586062,0.058818362280726434,0.7533509070053697,0.2453999922145158,0.435289578512311,0.16140479067107663,0.24463111837394536,0.29494193219579756,0.065039515029639,0.3611689902609214,0.9975055190734565,0.9366769636981189,0.30092171928845346,0.46081298507051544,0.9856721181422472,0.9156495155766606,0.33120030583813787,0.49460558785358444,0.8705279477871954,0.9078711869660765,0.6281886380165815,0.45961729662958534,0.10353981517255306,0.04321588086895645,0.2933356398716569,0.3278626496554352,0.26011813967488706,0.15033646393567324,0.4521471264306456,0.11450905653182418,0.7494256861973554,0.0752737654838711,0.10291574592702091,0.07495110351592303,0.8049688979517668,0.985247315838933,0.6075327573344111,0.4625608389265835,0.9951707608997822,0.6340022312942892,0.0625180855859071,0.4488983421004377,0.9587181021925062,0.5937851523049176,0.8011057116091251,0.3847282334929332,0.32150868722237647,0.9090448368806392,0.020646507386118174,0.3708101514843293,0.38926496217027307,0.021728325402364135,0.07527023809961975,0.5853616114705801,0.009082899196073413,0.5421446447726339,0.6928449459373951,0.3903691761661321,0.8599658468738198,0.05954069597646594,0.2104565817862749,0.299830477766227,0.16337407031096518,0.05764635652303696,0.5107223778031766,0.47404713856521996,0.3060099722351879,0.043475716607645154,0.32293516187928617,0.49392771180719136,0.9978127458598465,0.9891827020328492,0.9112755579408258,0.40208622708451003,0.7360050503630191,0.19260047702118754,0.9625251812394708,0.12258371318457649,0.9578396785072982,0.20621148846112192,0.16140655195340514,0.09622210300294683,0.5385190434753895,0.04154516546986997,0.008811334148049355,0.14831187727395445,0.5040315429214388,0.04697612253949046,0.0038326301146298647,0.33084504134021697,0.016305965604260564,0.011063259094953537,0.07391257002018392,0.46251530601875857,0.6895675917621702,0.20373587030917406,0.11405231757089496,0.10001622742274777,0.8342456703539938,0.9878377129789442,0.8641657922416925,0.07878016087925062,0.7622667427640408,0.07951624412089586,0.00882491678930819,0.4808464113273658,0.8563707992434502,0.9645978508051485,0.9313747687265277,0.4671940338681452,0.13429561210796237,0.01570069743320346,0.03851960692554712,0.4934532642364502,0.5429105926305056,0.13736209413036704,0.7383593560662121,0.17527138516306878,0.4311483900528401,0.02211537421680987,0.20315994694828987,0.3205431005335413,0.08364603877998888,0.00005923747085034847,0.059398490469902754,0.4530264571774751,0.0035226831678301096,0.01899099233560264,0.12581633077934384,0.5213106421520933,0.9649355339352041,0.8799918075092137,0.8584492637310177,0.4375075757270679,0.7214341894723475,0.5767474274616688,0.9062994241248816,0.45658474051160736,0.6873265660833567,0.47513788449577987,0.3081172895617783,0.37472199082840235,0.8359360038302839,0.5459665800444782,0.37851893552578986,0.47703333573881535,0.9959739281330258,0.6784982630051672,0.8132824865169823,0.3817519501200877,0.866137919947505,0.8729529415722936,0.5002644998021424,0.23748052133014425,0.5523620985914022,0.2094226162880659,0.7129749951418489,0.4460048347362317,0.716187609359622,0.9475972708314657,0.9836124142166227,0.4963479280937463,0.38168933941051364,0.07817665324546397,0.7502516855020076,0.4582015610183589,0.09058162849396467,0.32037910306826234,0.21086335880681872,0.12027057707309724,0.2632752282079309,0.8702927317935973,0.791836318327114,0.1619739789981395,0.0013568100985139608,0.6058845394290984,0.25908367009833455,0.19360876956488937,0.9366976930759847,0.11473672953434289,0.35748509457334876,0.1164507180103101,0.07553186058066785,0.27590670669451356,0.23710436024703085,0.41868727426044644,0.592993980506435,0.6433672879356891,0.3644869562704116,0.48412186295026916,0.5769407681655139,0.1441504624672234,0.6463891039602458,0.07054514402989298,0.6134377736598253,0.9419954370241612,0.929938897723332,0.061094514187425376,0.7064067430328578,0.5529131803195924,0.91896091401577,0.17448589857667685,0.28833441552706063,0.004160648910328746,0.1481222289148718,0.3910294649889693,0.13429561210796237,0.01570069743320346,0.03851960692554712,0.12629396147094668,0.20868373196572065,0.26520697050727904,0.3467472451739013,0.16645047729834916,0.9724377924576402,0.059674428310245275,0.4125254573300481,0.06630639362847433,0.8914475589990616,0.15737892547622323,0.7258812361396849,0.27952581689460204,0.9858508661855012,0.03750849748030305,0.4847746235318482,0.11123714029090478,0.26576027600094676,0.6711064644623548,0.34757380094379187,0.2105973135912791,0.95454031531699,0.8886606181040406,0.9994571639690548,0.40203120282385496,0.9722663480788469,0.18858285015448928,0.7648803582414985,0.38473434107145293,0.6549653655383736,0.09031100757420063,0.03072329401038587,0.48215852356515826,0.8690658616833389,0.040065489243716,0.036431847140192986,0.12148054240969941,0.3158218371681869,0.9496506107971072,0.990969467908144,0.14408835979411377,0.9488779003731906,0.897292107809335,0.9587293984368443,0.37907553017139434,0.3987748909275979,0.8073713646735996,0.9600437094923109,0.493446083040908,0.9268336556851864,0.594045901671052,0.6824659134726971,0.3658473662799224,0.130357529502362,0.0021789507009088993,0.8499640275258571,0.4406462632934563,0.024842448299750686,0.00609370949678123,0.0232784952968359,0.09443223087582737,0.12937376042827964,0.03738500061444938,0.40574015490710735,0.39461065994109956,0.8846686822362244,0.8094761541578919,0.834876905195415,0.4871272607590072,0.6758699596393853,0.580423248000443,0.24208334041759372,0.2399966834811494,0.9187643844634295,0.9307927011977881,0.8082920177839696,0.4959199532517232,0.9088687896728516,0.4074371177703142,0.8016500701196492,0.2821618716930971,0.706854997901246,0.8776927762664855,0.8253691198769957,0.34070435783360153,0.08704753196798265,0.41173089435324073,0.5282801073044538,0.17393228581640868,0.06414552335627377,0.003674375591799617,0.17058753944002092,0.4956421756185591,0.13429561210796237,0.01570069743320346,0.03851960692554712,0.4934532642364502,0.529432580107823,0.060872794361785054,0.043352805310860276,0.18072439508978277,0.07158497045747936,0.04516145819798112,0.014841363998129964,0.1290768529637717,0.9840283694211394,0.21028643776662648,0.33147323317825794,0.3956192018580623,0.20790981873869896,0.07445224421098828,0.9927194118499756,0.11474265378201381,0.31707420852035284,0.2596620786935091,0.24116324819624424,0.24046868217410522,0.7728585680015385,0.016789984656497836,0.15294094290584326,0.13151504686102272,0.03533291001804173,0.054921980714425445,0.5186850116588175,0.401459245744627,0.9945555187296122,0.9400084340013564,0.19018089026212692,0.49037993875099345,0.9912953057792038,0.49777779658325016,0.2920685198623687,0.48223621951183304,0.8997170706279576,0.9816558668389916,0.5560657198075205,0.5717714471044019,0.9354891970288008,0.8154697054997087,0.49800769006833434,0.5603504843544215,0.09714862983673811,0.5402320520952344,0.33918509096838534,0.3314101509284228,0.9754569884389639,0.6701677727978677,0.25800312077626586,0.44118189058499413,0.9886454087682068,0.9400025315117091,0.6069890782237053,0.4974559205584228,0.9907609955407679,0.9502370925620198,0.8913127488922328,0.4141072694095783,0.6213334267958999,0.8422883856110275,0.7807777284178883,0.41284369038185104,0.9495634539052844,0.7591622560285032,0.9382788240909576,0.4505128554883413,0.6893924458418041,0.03135170787572861,0.4390789899043739,0.4831325841136277,0.9542099682148546,0.9744534229394048,0.9158164041582495,0.2641482573701069,0.9831565639469773,0.9709528454113752,0.4221159308217466,0.4958398452028632,0.9746548077091575,0.9842993780039251,0.5377252199687064,0.448164697480388,0.9786408180370927,0.7611332579981536,0.031805786304175854,0.4314597814460285,0.9743231881875545,0.9623654831666499,0.6244697119109333,0.4859715695027262,0.8975061709061265,0.9596612406894565,0.18105004215613008,0.1760178862605244,0.9670813265256584,0.989756997441873,0.3018359146080911,0.49283359390683473,0.2812430236954242,0.10975959827192128,0.12307293014600873,0.43321607158286496,0.8140029401984066,0.9666279922239482,0.5099922623485327,0.4969521104474552,0.7110881451517344,0.0022444988135248423,0.037059781374409795,0.4674062545411289,0.3550843826960772,0.07748168264515698,0.24577592476271093,0.1799953474197537,0.1885045173112303,0.00005923747085034847,0.03280517691746354,0.18250507604097949,0.0035226831678301096,0.01899099233560264,0.04595413152128458,0.5213106421520933,0.9957806447055191,0.5844213184900582,0.5220458349213004,0.3744599981000647,0.975288616027683,0.6212834652978927,0.26251296047121286,0.24566170264733955,0.8959317405242473,0.7740259086713195,0.49764082161709666,0.3233587340451777,0.47915348154492676,0.17826952785253525,0.6836664557922632,0.2631187111372128,0.00377210252918303,0.07471141428686678,0.17280755890533328,0.3824850285425782,0.11854576505720615,0.08809133898466825,0.003919831709936261,0.23720105956308546,0.6287683406844735,0.9356505959294736,0.511152706341818,0.49400107357650996,0.7161779040470719,0.6263781250454485,0.8856054816860706,0.42450587681960317,0.4025326883420348,0.028033715905621648,0.2882751291617751,0.1936254157102667,0.2608421475160867,0.2649372185114771,0.714678315911442,0.4810724620358087,0.98827014118433,0.9850806947797537,0.9987126216292381,0.44605527514358984,0.1001609016675502,0.0004008582327514887,0.571493006311357,0.4886116460431367,0.9435640170704573,0.34377964749000967,0.15945434849709272,0.4284986154641956,0.9203824650030583,0.4969711056910455,0.3517810860648751,0.1616807462880388,0.7472988138906658,0.39301510131917894,0.4416717679705471,0.45906912225764246,0.4254427244886756,0.9806410202290863,0.04394641751423478,0.2010087213595398,0.47262867190875113,0.9638807640876621,0.8083775602281094,0.4739979657111689,0.7638282780535519,0.9901433570776135,0.9981180808972567,0.1492521181004122,0.9897270686924458,0.48959550028666854,0.7081746382173151,0.11939972813706845,0.17550812079571187,0.035549439024180174,0.13942482834681869,0.3463910026242957,0.2693058729637414,0.0006025033071637154,0.0666610742919147,0.338968513882719,0.9856332489289343,0.5868625291623175,0.6677341542672366,0.2825635782792233,0.22427640412934124,0.17999031906947494,0.19116119318641722,0.46750654621282595,0.37853272329084575,0.002755862893536687,0.2710822941735387,0.1575043692602776,0.8750131439883262,0.7727377591654658,0.9787685384508222,0.4739828432910144,0.95454031531699,0.8886606181040406,0.6070234321523458,0.40620777661679314,0.5035963112022728,0.10144414729438722,0.7613892732188106,0.40139540791278705,0.9711628162767738,0.9620498479343951,0.9327940933872014,0.48957485443679616,0.5720739655662328,0.42619951581582427,0.8340779810678214,0.4665334520977922,0.9106125819962472,0.7009805489797145,0.8053446686826646,0.473114576714579,0.11142494436353445,0.4806070360355079,0.9570366500411183,0.21468132812296975,0.9958032686263323,0.023620154475793242,0.5035869020503014,0.49466022560372946,0.3046109462156892,0.02297215978614986,0.0009033998940140009,0.2692175873555243,0.943265249254182,0.6104633398354053,0.2598026415798813,0.4805622802115977,0.9537654642481357,0.45219669258221984,0.16567902103997767,0.580743769207038,0.5801483518444002,0.4149828820955008,0.5338474148884416,0.0600100596784614,0.9835259760729969,0.12161926878616214,0.4295614813454449,0.48817632771097125,0.6257147714495659,0.021728325402364135,0.19624263979494572,0.5853616114705801,0.7317741778679192,0.5493537201546133,0.222424236824736,0.25082330502336847,0.39870516886003315,0.3942889121826738,0.8611928438767791,0.46970582475187256,0.9861135822720826,0.9808527352288365,0.8655520540196449,0.5773326757131144,0.5073693485464901,0.993087476817891,0.5554309107828885,0.2593066040775739,0.7556442078202963,0.01488056848756969,0.5867659251671284,0.4814597993157804,0.2900783575605601,0.027054667472839355,0.32226616656407714,0.4983794305822812,0.5780737493187189,0.018847015453502536,0.12200561328791082,0.47614003891358153,0.503748040413484,0.19244287023320794,0.20289956661872566,0.47250067166751253,0.40509358677081764,0.8945423748809844,0.8391649972181767,0.4312420238973573,0.9958345687482506,0.6049236592371017,0.9272375276777893,0.20867031782399864,0.9858352842275053,0.7315965492743999,0.9203284615650773,0.4765332484501414,0.5047867291141301,0.760452549206093,0.2426008938346058,0.4479142341646366,0.22935720393434167,0.5028739653062075,0.037981129717081785,0.2978047340642661,0.9627473063301295,0.9960389235056937,0.9530436461791396,0.47717543414328245,0.8993066130205989,0.9766493968199939,0.719440646469593,0.3791187246330082,0.940136153018102,0.9428975326009095,0.7651972661260515,0.48808961430331693,0.9938721903599799,0.9855076021049172,0.6875875627156347,0.45668626652332023,0.958963880315423,0.9956648091319948,0.8027763878926635,0.49811117636272684,0.9833135076332837,0.8756208936683834,0.8199548213742673,0.08896929625188932,0.8665907848626375,0.44022562517784536,0.2184892485383898,0.332496007939335,0.8228201332967728,0.5526055863592774,0.34564800397492945,0.2240588943124749,0.9821649184450507,0.6640373880509287,0.5706932910252362,0.5911223372910172,0.4977102947887033,0.17638537217862904,0.025073930621147156,0.3658119225641713,0.884035276947543,0.298266104189679,0.5219302736222744,0.2587261051055975,0.5310166680719703,0.22317612823098898,0.0008375421166419983,0.44907802244415507,0.6357654365710914,0.024668070022016764,0.22258551022969186,0.3134520709048957,0.4489801356103271,0.052888303995132446,0.14688292075879872,0.4922105084755458,0.1786334551870823,0.0760550603736192,0.05098205339163542,0.21728801399003717,0.10195453627966344,0.04646482062526047,0.22124187578447163,0.3779174489201978,0.38406029413454235,0.030990144005045295,0.8612246934790164,0.0763367219013162,0.5239596029277891,0.099615907529369,0.290378054138273,0.164864160947036,0.041921233059838414,0.9668728120159358,0.029893009457737207,0.18278549502138047,0.5457301905844361,0.43889686930924654,0.07707033399492502,0.481733854545746,0.9207951074931771,0.40881519787944853,0.07737462967634201,0.2847184478188865,0.976522084325552,0.6405288537498564,0.48241150262765586,0.05102110827574507,0.905597829958424,0.16910717613063753,0.18372276960872114,0.3597456342424266,0.9386579671408981,0.9579433314502239,0.6584018834400922,0.11850837381789461,0.6627142631914467,0.19858019333332777,0.7158846606034786,0.10015055318363011,0.9583069602958858,0.9958174813073128,0.5246117839124054,0.2952673290274106,0.15998443705029786,0.011283006519079208,0.20675855572335422,0.48383215357316656,0.9049424384720623,0.9203882387373596,0.7295108549296856,0.45536334487842395,0.45482073118910193,0.011144874151796103,0.6682349967304617,0.1415805986151099,0.9741654063109308,0.7808179736603051,0.9669788859318942,0.3038291073171422,0.06002575787715614,0.12643923819996417,0.3583932709880173,0.409857810777612,0.28090695734135807,0.006725196726620197,0.33150073257274926,0.07851174352690578,0.040564758237451315,0.002755862893536687,0.11947272857651114,0.4837055447162129,0.9758224512916058,0.7553633677307516,0.8935464243404567,0.44811689705820756,0.9071470333728939,0.9943779199384153,0.6156897691544145,0.4855749382637441,0.9972105848137289,0.9653217820450664,0.40340245817787945,0.4456865594140254,0.7819357877597213,0.7840814720839262,0.5350962632801384,0.056066306238062684,0.7903398391790688,0.9133192026056349,0.9613712099380791,0.42513787682401016,0.4965483711566776,0.7207492066081613,0.8835077506955713,0.2885773575399071,0.9399635454174131,0.9544854527339339,0.5974438977427781,0.277038614009507,0.9841784085147083,0.538902243366465,0.41911189584061503,0.4774732156074606,0.8266406373586506,0.20148589345626533,0.2993629069533199,0.16749197224853563,0.024451704462990165,0.02171347104012966,0.30457382556051016,0.46935340071795506,0.12022859579883516,0.054639690555632114,0.27911243541166186,0.3140432673855685,0.08921874477528036,0.31107008876278996,0.1279377406463027,0.17716996418312192,0.9566582830157131,0.2888485537841916,0.6133580466266721,0.05770414059516043,0.953992209630087,0.91230010939762,0.3479557088576257,0.4516991134500131,0.9648076193407178,0.6085028983652592,0.49412596598267555,0.11125923886429519,0.8425115149002522,0.47811567038297653,0.895236311480403,0.3198612330248579,0.1686680808197707,0.4004305615089834,0.9107413627207279,0.25553153685759755,0.8392903718631715,0.7732105804607272,0.9915369264781475,0.49768903804942966,0.9527151067741215,0.9760973728261888,0.9676114541944116,0.47153452499769627,0.5845402504783124,0.8315489012748003,0.9303570387419313,0.2304362970869988,0.8581540731247514,0.7845166642218828,0.9022408402524889,0.4482947064563632,0.9652428408153355,0.6263304771855474,0.9620806276798248,0.3267746152356267,0.38258400186896324,0.24714906490407884,0.6366370534524322,0.062133392097894105,0.26880179601721466,0.675611661747098,0.9439288121648133,0.15791717788670212,0.9908076045103371,0.9792625301051885,0.3164336043410003,0.32365129557438194,0.48138086893595755,0.5024444356095046,0.2668479294516146,0.4428418773692101,0.8926177974790335,0.7733748736791313,0.8781931181438267,0.2141657506581396,0.9616588056087494,0.8346351464278996,0.3413461612071842,0.5622828279389068,0.949461615877226,0.29611465125344694,0.30205962155014277,0.13640591250732542,0.9755591787397861,0.9250871480908245,0.8640436425339431,0.08041570917703211,0.9977169614285231,0.9628093955107033,0.3225569217465818,0.41770306050311773,0.9580483254976571,0.7589939148165286,0.5525496967602521,0.488236091833096,0.9467485065106302,0.8954915199428797,0.9395744611974806,0.10830618478357792,0.9936607817653567,0.9244343969039619,0.7271491738501936,0.4962148512364365,0.7811272742692381,0.36273656715638936,0.41842250386253,0.3784994759131223,0.9476820125710219,0.9939820505678654,0.16511952970176935,0.21204733045306057,0.6337738463189453,0.02211537421680987,0.16911221924237907,0.43034059955971316,0.24744891840964556,0.46831590961664915,0.45184495160356164,0.3481247572810389,0.0035226831678301096,0.01899099233560264,0.12581633077934384,0.5213106421520933,0.9349109451286495,0.21114398376084864,0.22755006700754166,0.059100017067976296,0.5050516687333584,0.7963273373898119,0.40003746119327843,0.4406714563607238,0.7946304541546851,0.2730077104642987,0.6591073053423315,0.44259609691798685,0.4177330427337438,0.014263506280258298,0.5788095784373581,0.447780417080503,0.09900698182173073,0.14902314846403897,0.11668368149548769,0.472651035990566,0.32204833696596324,0.02205798658542335,0.01485988893546164,0.4684134243405424,0.9672440262511373,0.9571074999403208,0.8190222249832004,0.356276443938259,0.9474695082753897,0.4271541952621192,0.4065583578776568,0.4983869836200029,0.843621342908591,0.4229997261427343,0.511234300211072,0.42453261802438647,0.7682916636113077,0.04620232526212931,0.012956148944795132,0.13573949777055533,0.3188342053908855,0.07668991829268634,0.01401381311006844,0.030487843905575573,0.9719646780285984,0.9068660046905279,0.012329504359513521,0.06052990444004536,0.2758001293987036,0.03486027102917433,0.48040054040029645,0.16586777461925523,0.9945221566595137,0.40082184760831296,0.6273527801968157,0.3397654150496237,0.06402900838293135,0.0403978917747736,0.364830082282424,0.49236614459659905,0.8186440046411008,0.5861336686648428,0.9688147341366857,0.06677366828080267,0.9207174086477607,0.9736008367035538,0.7358418856747448,0.44796820419142025,0.9672398695256561,0.9957123843487352,0.915531818754971,0.3414468910428695,0.6296238698996603,0.01746320864185691,0.007856679381802678,0.5701534347841516,0.8804825264960527,0.33646934549324214,0.031173469265922904,0.1379480960429646,0.32188888313248754,0.057853221194818616,0.000672374852001667,0.14967502870131283,0.490957556059584,0.13093547709286213,0.23618294019252062,0.35968823748407885,0.15061074867844582,0.12030393467284739,0.43008426832966506,0.08140568214002997,0.1813782888930291,0.10262304614298046,0.0663881660439074,0.4511157416854985,0.9905130872502923,0.9646731473039836,0.5124012944288552,0.4903834764380008,0.980302159441635,0.9539226167835295,0.7190067374613136,0.4997548005194403,0.8170417284127325,0.8241172418929636,0.09499989985488355,0.48919497086899355,0.9459612378850579,0.9112416421994567,0.8064124528318644,0.4708098214585334,0.9979438802693039,0.8024913652334362,0.3266312167979777,0.2221884725149721,0.7962034782394767,0.9517385840881616,0.8275767876766622,0.09478808635612951,0.9186513153836131,0.7134703737683594,0.22755006700754166,0.059100017067976296,0.5050516687333584,0.7963273373898119,0.40003746119327843,0.4406714563607238,0.7946304541546851,0.2730077104642987,0.6591073053423315,0.20971143988426777,0.9838814709801227,0.9969063415192068,0.7958729637321085,0.4823272646870464,0.8263643127866089,0.005192944779992104,0.7762683415785432,0.29678151616826653,0.9973701783455908,0.4157055283430964,0.08009148202836514,0.10147912224056199,0.1723887559492141,0.023383092833682895,0.0360617833212018,0.462538138742093,0.012394982622936368,0.0342227618675679,0.010075356345623732,0.5490599620621651,0.08100178046151996,0.07308819820173085,0.14356306358240545,0.4640180877991952,0.9212910803034902,0.9806410202290863,0.8182786509860307,0.3572464357013814,0.9898672050330788,0.9638807640876621,0.8083775602281094,0.5633498437469825,0.6973934136331081,0.8491242057643831,0.35911934403702617,0.313673705921974,0.8683197065256536,0.31251259380951524,0.43672058754600585,0.47958271044772116,0.9739655707962811,0.48908624122850597,0.33659199671819806,0.3125155017711222,0.8192550586536527,0.33739784616045654,0.1818713576067239,0.09942789189517498,0.986523701576516,0.4108597345184535,0.23039471660740674,0.09590841289609671,0.8760721329599619,0.4708645867649466,0.15263793943449855,0.14716290861833842,0.9449029807001352,0.1290339515544474,0.1933179055340588,0.027428199187852442,0.771435706410557,0.1914115755353123,0.5985499829985201,0.4021402107318863,0.7698813986498863,0.2899395884014666,0.12364846211858094,0.22573849370237442,0.38386483606882393,0.0053149855230003595,0.03574630618095398,0.27314075641334057,0.9923977816943079,0.9875997530762106,0.9980593207292259,0.47838692833902313,0.9474687266629189,0.9566092262975872,0.9819183680228889,0.5568829083582386,0.8964588663075119,0.7341268383897841,0.9162530500907451,0.4934576446190476,0.6832418078556657,0.8086249898187816,0.8463548470754176,0.45324254400329667,0.07142723468132317,0.20970794395543635,0.3180208473931998,0.47761992311570795,0.910287328530103,0.8109023701399565,0.7462719480972737,0.46100598928751424,0.9832262611016631,0.9886847122106701,0.8620329182595015,0.4155655656009912,0.9258217762690037,0.9908133300486952,0.6722301258705556,0.4493212846573442,0.9429909139871597,0.9773705727420747,0.38438691082410514,0.33512561527313667,0.9200030236970633,0.4238261489663273,0.2506993403658271,0.48707705829292536,0.9857730651274323,0.5446927940938622,0.35144031373783946,0.28675559331895784,0.49604335450567305,0.5133318018633872,0.5360482665710151,0.1906607337296009,0.3190200487151742,0.3278791003394872,0.02522623911499977,0.4543838251964189,0.5458027827553451,0.06752994819544256,0.0920500522479415,0.06723951874300838,0.32982557732611895,0.009421403054147959,0.11380989477038383,0.5945677197538316,0.9329780582338572,0.9991914606653154,0.4259551197756082,0.48058048853417856,0.984579422743991,0.8712574143428355,0.3636580721940845,0.4155896420939825,0.9996127488557249,0.953770327847451,0.8270308275241405,0.3999829729902558,0.9171110729221255,0.5243312770035118,0.08730956516228616,0.06423049733275547,0.6252106686588377,0.4907320733182132,0.3017761744558811,0.15195427227299663,0.959630677709356,0.6930019643623382,0.19943145010620356,0.19181219264864924,0.9641646118834615,0.05684266658499837,0.17234313813969493,0.4830801190575585,0.2815670953132212,0.9954864082392305,0.8261909424327314,0.32163584338268264,0.8877354878932238,0.8434509546495974,0.1473475422244519,0.34590848569059746,0.7670907634310424,0.9826608828734607,0.7278782799839973,0.45791212614858523,0.6515324702486396,0.5145329344086349,0.9793864381499588,0.2874521963181906,0.9827833485323936,0.734987331321463,0.6281962224747986,0.24775087839225307,0.6963521703146398,0.7114985941443592,0.5069880238734186,0.3068563187145628,0.9876514840871096,0.9913905500434339,0.5561933296266943,0.22948269330663607,0.936545173637569,0.969796672463417,0.8392986035905778,0.5804726312868297,0.9316198651213199,0.981473779072985,0.9501131565775722,0.5898094502277672,0.9859000027645379,0.930248883087188,0.0159906770568341,0.41981021071551367,0.5107724876143038,0.984216661658138,0.6461765542626381,0.41112529661040753,0.5198590399231762,0.6494954263325781,0.4633154592011124,0.4136661235592328,0.6940129296854138,0.5786277058068663,0.6536235772073269,0.15077753667719662,0.5089086929801852,0.16390155674889684,0.34155711252242327,0.424517525464762,0.04937368584796786,0.11405456019565463,0.13919855491258204,0.511494493833743,0.24511841218918562,0.0005434174090623856,0.19267269829288125,0.4792700054240413,0.24240306951105595,0.0009582121856510639,0.16526190983131528,0.476105920271948,0.5334562936332077,0.050834486028179526,0.24453323311172426,0.3711327184457332,0.9531236018519849,0.4792470794636756,0.043030954198911786,0.41367976332549006,0.8538353871554136,0.6031924819108099,0.5106472459156066,0.14078482931945474,0.9771870598196983,0.28993370616808534,0.03848505159839988,0.5481856138445437,0.9462373363785446,0.13777440530247986,0.12142056180164218,0.3735913808457553,0.977686166530475,0.9373591465409845,0.9652666498441249,0.06881680160295219,0.7564792686607689,0.4055378728080541,0.09223628486506641,0.05357536397641525,0.7028062229510397,0.23655463382601738,0.14379347465001047,0.44068020968697963,0.9805906123947352,0.07491707778535783,0.2783884380478412,0.3220838994835503,0.9826507919933647,0.9146182148251683,0.7743078626226634,0.47702058393042535,0.9661657460965216,0.99628517893143,0.9162920115049928,0.4319842187920585,0.9982382880989462,0.9574886108748615,0.6682226620614529,0.2397175763733685,0.9963160587940365,0.9122740803286433,0.2126044414471835,0.46794835014734415,0.9976120549254119,0.9555386784486473,0.398953769588843,0.5403478835010901,0.9588971049524844,0.7473413485568017,0.9447520992252976,0.19510245404671878,0.01567169837653637,0.004160648910328746,0.12137741991318762,0.40390310381772,0.9105237519834191,0.01570069743320346,0.03851960692554712,0.10076811871258542,0.23367181629873812,0.09044242650270462,0.11919043771922588,0.4511488256859593,0.830576931592077,0.9614101166371256,0.8072228853125125,0.33990844573127105,0.7903398391790688,0.869657845236361,0.6059433834161609,0.4364705335581675,0.959182980004698,0.9632395752705634,0.9962088277097791,0.47260493332287296,0.6258445193525404,0.3446937657427043,0.5815003735478967,0.40743886602576823,0.1042110389098525,0.01509570563212037,0.2569453709293157,0.5964318495476618,0.5747851179912686,0.06475879531353712,0.1194239070173353,0.48650906679686157,0.012325057527050376,0.38623340567573905,0.36322346329689026,0.4614402294973843,0.7623275811783969,0.004828316159546375,0.4091880461201072,0.1871547974762507,0.41220886958763003,0.005619833944365382,0.15309119666926563,0.24284220340196044,0.9865766575094312,0.7816567081026733,0.4825188582763076,0.39330786439822985,0.013411480700597167,0.10381114785559475,0.08938197721727192,0.22723922883160413,0.8150079399347305,0.053026609821245074,0.5447965243365616,0.356247000512667,0.16390257724560797,0.06973191141150892,0.38005399727262557,0.3675664574257098,0.049256374360993505,0.02114441990852356,0.26334618288092315,0.46001005731523037,0.6654107440263033,0.05494926101528108,0.29763266793452203,0.4593293728074059,0.7908149238210171,0.7450485010631382,0.49237216357141733,0.34741499364608897,0.9848464822862297,0.8885302396956831,0.585874525597319,0.46990888012805954,0.5124135427176952,0.23329437128268182,0.9203482554294169,0.4364655812154524,0.9984736682381481,0.9256931559648365,0.6542027674149722,0.09677946215961128,0.938460175646469,0.7315089080948383,0.46958959847688675,0.4481618431280367,0.9504948924295604,0.07335181161761284,0.3581329551525414,0.4279351555393077,0.9646257986314595,0.9255672229919583,0.6698950289282948,0.4814218348474242,0.9162330073304474,0.22410890529863536,0.9937084100674838,0.4723803975386545,0.44648467539809644,0.006402098573744297,0.08282112539745867,0.3404288997873664,0.9641382358968258,0.9170678416267037,0.8991027816664428,0.4722679008729756,0.9627278454136103,0.7645991120953113,0.4752606824040413,0.4980895901331678,0.7289610330481082,0.49019603291526437,0.18662752746604383,0.43528669817605986,0.9858352842275053,0.9308444992639124,0.9203284615650773,0.4765332484501414,0.9430925417691469,0.9736253418959677,0.962657579453662,0.49438321449561046,0.43509401311166584,0.4201239824760705,0.978443173924461,0.36065793200396,0.5630677316803485,0.9476134022697806,0.6945301403757185,0.0517358313780278,0.6786885426845402,0.23604415473528206,0.4559074386488646,0.05713083790615201,0.6005077632144094,0.010673289885744452,0.13944606762379408,0.1681120248977095,0.8286032697651535,0.04922274453565478,0.14518976490944624,0.3977263056556694,0.7666637692600489,0.5638428635429591,0.47194529813714325,0.4527176400995813,0.9422329673543572,0.4434410813264549,0.26575920172035694,0.4516716525540687,0.9515352719463408,0.9780717331450433,0.8981052979361266,0.19625668025109916,0.6455534659326077,0.17034997837617993,0.12822150043211877,0.24214302988257258,0.6855566201265901,0.7678547888062894,0.6001198755111545,0.07478101144079119,0.9490196639671922,0.9952704494353384,0.9736352062318474,0.5898094502277672,0.9928376122843474,0.9948387378826737,0.4074160975869745,0.27582077513216063,0.9880254596937448,0.9100921594072133,0.005649014143273234,0.3379171496606432,0.27495644986629486,0.17660019919276237,0.26711470051668584,0.4396725693484768,0.028134784195572138,0.0025255135260522366,0.0034826905466616154,0.48757828342495485,0.5108028172980994,0.0008310242556035519,0.04116908344440162,0.4772422778303735,0.9672440262511373,0.9226526038255543,0.740063008852303,0.48057132145622744,0.8903761999681592,0.4397987585980445,0.5338503436651081,0.43034960235236214,0.8957671348471195,0.1127382218837738,0.9154629460535944,0.2958228302304633,0.658937958534807,0.012704689521342516,0.025941620348021388,0.16059534975793213,0.8662492772564292,0.8615489406511188,0.6807901640422642,0.22608605633722617,0.9291253939736634,0.9340429031290114,0.4448551801033318,0.31481270797085015,0.9755622684024274,0.9368478308897465,0.31663610110990703,0.3757159106200561,0.9654373170342296,0.7677580313757062,0.7736125083174556,0.4477229731739499,0.876485398504883,0.9115941675845534,0.4155992055311799,0.33721581811551005,0.9962786131072789,0.9490617208648473,0.761892091948539,0.49579795842291785,0.9014650504104793,0.9871100469026715,0.4925519253592938,0.11699186656624079,0.8619272245559841,0.961583727505058,0.7634538211859763,0.4802581283962354,0.09380695945583284,0.9645978508051485,0.9313747687265277,0.4671940338681452,0.13429561210796237,0.01570069743320346,0.03851960692554712,0.4934532642364502,0.5429105926305056,0.48833410697989166,0.7383593560662121,0.17527138516306878,0.119809317169711,0.03863737243227661,0.058148123091086745,0.592781912907958,0.2189215449616313,0.0073504033498466015,0.055269718170166016,0.4655056389281526,0.33882957929745317,0.013106148457154632,0.682075239950791,0.4583675521425903,0.915524042211473,0.11370093235746026,0.960399221861735,0.40925388648174704,0.9996659369207919,0.8835641355253756,0.9558462570421398,0.2769807230331935,0.7615523873828351,0.9895785588305444,0.9727522458415478,0.36407042753417046,0.06966374535113573,0.01505291904322803,0.5441942592151463,0.4921936121769249,0.32059561228379607,0.050925470190122724,0.5744646899402142,0.1571216294541955,0.2841919418424368,0.002467636251822114,0.1320484799798578,0.25098475022241473,0.022275628754869103,0.01505291904322803,0.04370579682290554,0.46832881384762004,0.12657735869288445,0.006556976120918989,0.12142119975760579,0.10491448629181832,0.6528743088711053,0.002467636251822114,0.36189470416866243,0.06250890586525203,0.8153705995064229,0.26087993080727756,0.27875686273910105,0.332095275959,0.985170531552285,0.908659853041172,0.6770338797941804,0.5626293368637562,0.8352898326702416,0.8404011616948992,0.3930340812075883,0.18024938289308923,0.671779815107584,0.8858856775332242,0.5256392094306648,0.0944614994339645,0.9887276580557227,0.9926849473267794,0.9038610332645476,0.33515087665291504,0.9390006682369858,0.37115938449278474,0.03558986121788621,0.49329634798923505,0.39870516886003315,0.3942889121826738,0.8611928438767791,0.46970582475187256,0.9861135822720826,0.877394798444584,0.8655520540196449,0.5773326757131144,0.8746928293257952,0.9990610715467483,0.8602025585714728,0.48649909369414673,0.05161189567297697,0.011496961582452059,0.0974404951557517,0.49767144307261335,0.31841356540098786,0.21234612306579947,0.6817216179333627,0.4447440609219484,0.8272442037705332,0.16018864419311285,0.7456846230197698,0.3566553687211126,0.5072373498696834,0.6743298668880016,0.5048306984826922,0.4001229811576195,0.8542664106935263,0.04744261549785733,0.39145130501128733,0.16108995098620654,0.3179599358700216,0.04138100054115057,0.07705831760540605,0.24538105630781504,0.668206520145759,0.0816907153930515,0.12115904712118208,0.5723669879604131,0.08302041050046682,0.09273743885569274,0.5269700677599758,0.11972842279355973,0.7622423442080617,0.34255609242245555,0.48610862367786467,0.05882182138739154,0.9837505458854139,0.25743408710695803,0.7543971177656204,0.055541291483677924,0.4135161959566176,0.021728325402364135,0.14210406132042408,0.5853616114705801,0.550481736427173,0.30751065420918167,0.9512411952018738,0.0652124039712362,0.9509892137721181,0.11567603796720505,0.7145572688896209,0.08350135700311512,0.9059727946296334,0.0990016688592732,0.14676959929056466,0.22238056299975145,0.3878351498860866,0.10877666459418833,0.18109165388159454,0.20725367350969465,0.6180888330563903,0.0745934690348804,0.12580047897063196,0.18679024996235966,0.5250002513639629,0.0803929299581796,0.5318152359686792,0.1952800384955481,0.7229810687713325,0.8360907174646854,0.9914154810830951,0.5468199618859216,0.17392718186601996,0.8516520000994205,0.944530121050775,0.06546846545534209,0.820669096428901,0.9994477198924869,0.9231467272620648,0.46178320806939155,0.6006659017875791,0.9515735807362944,0.7431259211152792,0.18348563225008546,0.9332016760017723,0.04941206588409841,0.6489920958410949,0.4757726258365437,0.33721171878278255,0.24491188721731305,0.6194198618177325,0.46133912038058045,0.043850969756022096,0.018685894552618265,0.38377074571326375,0.4421141722705215,0.9923977816943079,0.927617292618379,0.9284417883027345,0.05700581396231428,0.9395362457726151,0.9059901523869485,0.9864005767740309,0.5568829083582386,0.11400736821815372,0.7461303942836821,0.8589261868037283,0.1568769148667343,0.9934913532342762,0.7649737619794905,0.6090850948821753,0.5745502149453386,0.9853049104567617,0.8177643865346909,0.3141539834905416,0.46175658201100306,0.9978526441846043,0.32521466887556016,0.3645886166486889,0.273365765879862,0.11963304691016674,0.027159927180036902,0.023544191382825375,0.47825929898535835,0.9902303805574775,0.1153530057054013,0.6431948237586766,0.4701946006622165,0.9696077855769545,0.6965077235363424,0.136199071072042,0.2608105547144078,0.046103887958452106,0.1565819140523672,0.4668211326934397,0.4278189043048769,0.3637967109680176,0.7522365332115442,0.706018092809245,0.07721228314330802,0.171590507728979,0.006184566533192992,0.10131718358024955,0.4833325139828958,0.36593258078210056,0.5515640079975128,0.572971427347511,0.4726262474549003,0.9356638849712908,0.47177282394841313,0.1336989221163094,0.40726739324163647,0.0017250936944037676,0.16833870811387897,0.3457204282749444,0.49736501211300493,0.9639410362578928,0.9814652749337256,0.7374293836764991,0.4345020357402973,0.781987888738513,0.9436487795319408,0.9111711587756872,0.4738042225246318,0.9962011983152479,0.9784540950786322,0.7852088508661836,0.06071817763149739,0.7955517109949142,0.09686211170628667,0.9168181342538446,0.44677238729782404,0.9516376738902181,0.4149203118868172,0.0334157245233655,0.1481894284603186,0.31508171767927706,0.10640264605171978,0.2772422549314797,0.27782275760546327,0.29202090902253985,0.007495974190533161,0.19462084281258285,0.559271133877337,0.004392366157844663,0.020867447834461927,0.13606019015423954,0.46584592093713584,0.29853462846949697,0.09494412736967206,0.33915472379885614,0.43611269135726616,0.3070774655789137,0.16187415015883744,0.8490527221001685,0.33833940982585775,0.607953566359356,0.07858726219274104,0.1123580124694854,0.05087837651371956,0.4419582895934582,0.854602960171178,0.21072648535482585,0.4080635434947908,0.6661131221335381,0.32643518946133554,0.16717065498232841,0.4960961262928322,0.9914091101381928,0.7901046324986964,0.7755062109790742,0.44823326050536705,0.8112329163122922,0.7033437767531723,0.9914154810830951,0.14466341503430158,0.446736890822649,0.06059555197134614,0.03360489592887461,0.5329155058367178,0.03350139199756086,0.0055843081790953875,0.11191108985804021,0.1633846248034388,0.00399950030259788,0.008807082427665591,0.003344243159517646,0.48773853849852455,0.86919254809618,0.3373583615757525,0.2555364288855344,0.30525369945680725,0.9135419586673379,0.10951133794151247,0.2647597957402468,0.23328870892291892,0.4503181497566402,0.2490506691392511,0.6893515000119805,0.23879702840931716,0.7941164744552225,0.6446077681612223,0.9334025613497943,0.33508274843916297,0.9507222282700241,0.9990966110490263,0.759879793273285,0.48555483133532107,0.9605426851194352,0.9759948621504009,0.8658245715778321,0.43912414970109237,0.2751250492874533,0.014292009407654405,0.7268695184029639,0.3694179648300633,0.008628379553556442,0.009906584862619638,0.12036109995096922,0.5934357989113778,0.7588032395578921,0.02633982477709651,0.30854251608252525,0.42141613831045105,0.9681124880444258,0.3104843364562839,0.7997116185724735,0.21133113506948575,0.9759218979161233,0.18312775064259768,0.5316116309259087,0.18424094178481026,0.46771107288077474,0.06913212919607759,0.06221762811765075,0.195223298878409,0.6567614008672535,0.8934218715876341,0.5985084094572812,0.3006834751344286,0.4680865202099085,0.3558220025151968,0.02393526886589825,0.18276074242312462,0.7870459901168942,0.5377421109005809,0.250827943906188,0.25538993487134576,0.8320686717052013,0.18098651594482362,0.269215390086174,0.32256299785804005,0.4680231180973351,0.13351915078237653,0.20611522207036614,0.21268667028052735,0.017798081738874316,0.04896587086841464,0.04704553144983947,0.4536013542092405,0.14846951980143785,0.00034308526664972305,0.31551384506747127,0.4412087354110554,0.14506728923879564,0.2915302375331521,0.1674445711541921,0.37184998776065187,0.9586264812387526,0.9800817240029573,0.9282674442511052,0.08468769595492631,0.9320401945151389,0.5701402807608247,0.7664820316713303,0.07305824399227277,0.9900999094825238,0.9209762290120125,0.25964951142668724,0.4908669779310003,0.021692857146263123,0.06055352836847305,0.0991083811968565,0.4721713577979244,0.9738419067580253,0.9634558968245983,0.6551322669256479,0.4823642017436214,0.9718183786608279,0.9074052576906979,0.9612540558446199,0.4900200456031598,0.9929911203216761,0.10049161757342517,0.06075974530540407,0.4965137711726129,0.035753503208979964,0.06151920068077743,0.2642393202986568,0.3669414751697332,0.013096255948767066,0.001613010186702013,0.012417396530508995,0.45713074281811716,0.8967531309463084,0.019010535441339016,0.06469673151150346,0.3221301493584178,0.9957041724119335,0.59850078006275,0.9466057056561112,0.122746139485389,0.5954173589125276,0.3183435145765543,0.226188920205459,0.497650327172596,0.6948389851022512,0.9255200275219977,0.8825071044266224,0.4285905773052946,0.9929283824749291,0.9972682769875973,0.46787199936807156,0.2218432601657696,0.9857424062211066,0.929693688871339,0.4386586176697165,0.41519534511025996,0.8807230645325035,0.414723893860355,0.9777900988701731,0.16387068455806003,0.15788496448658407,0.015737826470285654,0.013361212331801653,0.45266285702819004,0.7831120509654284,0.00965305627323687,0.020269147353246808,0.09467354859225452,0.8400138569995761,0.0031219685915857553,0.22002262505702674,0.49582858401117846,0.9230216736905277,0.9670763919129968,0.9189024474471807,0.489214474405162,0.9717188801150769,0.5522238651756197,0.4397833726834506,0.1854723305325024,0.8938173286151141,0.9577270285226405,0.9892255782615393,0.4968890578951687,0.9712327346205711,0.9971837589982897,0.9104954691138119,0.4124095415347256,0.7450964874587953,0.8637606387492269,0.8479428021237254,0.1838407226721756,0.9542299173772335,0.9632395752705634,0.9743345163296908,0.4974911648896523,0.617251823656261,0.06261040596291423,0.44738038652576506,0.4294429946457967,0.2609205828048289,0.007778350031003356,0.001873682951554656,0.02400056307669729,0.966563785681501,0.05217450903728604,0.18128225137479603,0.053287506685592234,0.9497617823071778,0.6905439696274698,0.7778960079886019,0.2081571026938036,0.9386031583417207,0.992592592490837,0.9597716729622334,0.4918537654564716,0.9851438035257161,0.8551268484443426,0.035960016306489706,0.051850641344208276,0.8140959164593369,0.9563474210444838,0.6560658242087811,0.2702183519140817,0.7104617152363062,0.7506852827500552,0.631483341101557,0.4730006789090112,0.9732467185240239,0.9580370804760605,0.8407049083616585,0.5735462701646611,0.7050909246318042,0.2985286838375032,0.40207904973067343,0.17048506228020416,0.3820410086773336,0.04837218951433897,0.1925826130900532,0.1492925271508284,0.24834467214532197,0.0025440449826419353,0.4203100735321641,0.2999440941493958,0.11054457817226648,0.9312109837774187,0.8140632219146937,0.2804734625038691,0.17932172468863428,0.8450098654720932,0.7573023326694965,0.16853365935385228,0.2135887397453189,0.9433734656777233,0.4290309529751539,0.1859290476539172,0.5354765364900231,0.014079801039770246,0.2034750785678625,0.46154559903079645,0.26109893317334354,0.03191537386737764,0.0966625870205462,0.4959575364482589,0.014363528229296207,0.2673435101751238,0.0039864517748355865,0.2277117772726342,0.8451421223580837,0.7516634855419397,0.4132276922464371,0.06886368127306924,0.8490627857390791,0.566859622253105,0.3180208473931998,0.13946037106215953,0.42835978604853153,0.04001907864585519,0.304395301733166,0.4231223637587391,0.027216399554163218,0.02387298014946282,0.008116322103887796,0.5799126791767776,0.550725739216432,0.20556213823147118,0.400065194349736,0.40236168649280446,0.216125697363168,0.3270513406023383,0.08154596877284348,0.4878171666176058,0.9310649109538645,0.9458278228994459,0.9788572445977479,0.35186334132449704,0.936333472840488,0.5679185930639505,0.3377517682965845,0.47569490830646827,0.9013935320544988,0.9317195443436503,0.7566670982632786,0.4716354109463282,0.06825874396599829,0.011496961582452059,0.21527595561929047,0.2881796650472097,0.06300289393402636,0.9174469453282654,0.8785550901666284,0.12662792719202115,0.690619403263554,0.39672491676174104,0.9746851772069931,0.4195106726139784,0.9015586781315506,0.8268880567047745,0.5703017271589488,0.1257624919177033,0.9559475423302501,0.916936928872019,0.9406030736863613,0.4254683049628511,0.9632863984443247,0.8831354307476431,0.8334628797601908,0.053480393451172864,0.9495634539052844,0.9976944935042411,0.9382788240909576,0.4505128554883413,0.9991721189580858,0.9626802692655474,0.9381236620247364,0.2520867441780865,0.9542099682148546,0.98365603457205,0.9158164041582495,0.13487992270383986,0.9484870603773743,0.9386817375198007,0.231545630376786,0.13879864998161795,0.9358941710088402,0.09079938824288547,0.784608276328072,0.13579951429273934,0.9689707041252404,0.40855181380175054,0.40550201712176204,0.39845168351894245,0.8111926249694079,0.6432082522660494,0.21743416949175298,0.06487739983713255,0.05360011360608041,0.047421399503946304,0.9728995524346828,0.42712544263340535,0.8554287075530738,0.1387106771580875,0.6031381913926452,0.16801206703530625,0.8242919207550585,0.3696969242300838,0.2522320144344121,0.4985463792341761,0.6807918203994632,0.1483798346016556,0.4760536777321249,0.4485429499298334,0.7873353760223836,0.7698837402276695,0.14645694149658084,0.42363989640725774,0.9749633711762726,0.056198385544121265,0.7280940697528422,0.47207353019621223,0.9816291739698499,0.06695178034715354,0.18258731672540307,0.49367972733452914,0.33652595104649663,0.21484527830034494,0.06098830420523882,0.48834027867997065,0.24477490526624024,0.029680644627660513,0.10579024045728147,0.15971680581569672,0.034979419549927115,0.08148874575272202,0.06430753110907972,0.5632326734717935,0.18776079057715833,0.03952800971455872,0.041507974499836564,0.46515282010659575,0.3963766854722053,0.04122812137939036,0.04110180679708719,0.12008760410826654,0.011708183214068413,0.006325644440948963,0.49019123683683574,0.4787724932655692,0.040139158722013235,0.03264587139710784,0.009585428517311811,0.49590896824374797,0.9508839710615575,0.9357914850115776,0.9752243980765343,0.3560557310353033,0.48009796370752156,0.992592592490837,0.6213161586783826,0.10349989882670343,0.8207521601580083,0.8832199946045876,0.778373999055475,0.2546120790648274,0.9144905351568013,0.9679190556053072,0.9776994350831956,0.3892924711457454,0.8665108799468726,0.9769097079988569,0.9477233169600368,0.08027714720228687,0.4618702167645097,0.708254614379257,0.810637493385002,0.06529531985288486,0.7600916435476393,0.609435245860368,0.9886217559687793,0.3477428821730427,0.969495462719351,0.9126077084802091,0.7190409281756729,0.38746528351912274,0.8120858191978186,0.9446797349955887,0.89572105393745,0.05399201434338466,0.691104105906561,0.1721124527975917,0.8947808670345694,0.4741965584573336,0.9057144694961607,0.012167936190962791,0.04787368094548583,0.43797752818791197,0.30013753357343376,0.11761732795275748,0.2805299307219684,0.41751475874334576,0.9817119734361768,0.9611577801406384,0.5885417272802442,0.3608655571937561,0.7168040233664215,0.8478215604554862,0.5202261516824365,0.11363991603720934,0.9955606935545802,0.870559846283868,0.4739738367497921,0.45717992101563143,0.6374986527953297,0.35603836202062666,0.7629322751890868,0.4996210433659144,0.2005238386336714,0.01954362355172634,0.1989503214135766,0.5787364326184615,0.35656071337871253,0.09840890835039318,0.022599999560043216,0.1159759103320539,0.08697879081591964,0.404696230776608,0.45939297159202397,0.19652484394609931,0.32074129208922386,0.9274090363178402,0.44553181575611234,0.2108445192803629,0.9339961595833302,0.7809886655304581,0.5457971321884543,0.24690545606426895,0.30797686288133264,0.04816273949109018,0.28906302247196436,0.5764751316979527,0.032319460064172745,0.08373197331093252,0.9318711154628545,0.3276617031660862,0.897946392185986,0.09876572038047016,0.2509274904150516,0.4940009857760742,0.8059440581128001,0.8441782097797841,0.5722785566467792,0.1563119548955001,0.9947044383734465,0.43332762108184397,0.9716978978831321,0.07072561419336126,0.9744268078356981,0.11070550023578107,0.061718858778476715,0.27935747873270883,0.8571417112834752,0.3788243858143687,0.31995819369331,0.2678788150078617,0.9657909120433033,0.5792947239242494,0.9955952086020261,0.4815448347711936,0.9191078161820769,0.5555852518882602,0.6788785404060036,0.381599809252657,0.3181547452695668,0.0274744622875005,0.32414607354439795,0.06345320227555931,0.01341946329921484,0.01910828403197229,0.1023200498893857,0.25247956248931586,0.059074758319184184,0.012185755418613553,0.10156237240880728,0.17760485000908377,0.015114071778953075,0.04467492224648595,0.077931561274454,0.4242936740629375,0.0013729564379900694,0.02114441990852356,0.11240855953656137,0.5661020821658894,0.8116317423991859,0.06281894608400762,0.10913727013394237,0.36155197366606445,0.9873246380593628,0.3127634359989315,0.1824839140754193,0.47902085680980233,0.9580562997143716,0.17394752777181566,0.06271763565018773,0.4182179600815289,0.9789304013829678,0.6691013288218528,0.6699007817078382,0.4032679646858014,0.9780476028099656,0.9686226360499859,0.9493456026539207,0.37428656918928027,0.9636793595273048,0.9728564179968089,0.9121843804605305,0.22948597712675112,0.9579797307960689,0.9303577854298055,0.8440268426202238,0.15291635361500083,0.6775643671862781,0.6725291467737406,0.5852493965066969,0.40507838043849914,0.6227325375657529,0.12434304086491466,0.06356054497882724,0.3181173505145125,0.9666354719083756,0.8868310099933296,0.794122421182692,0.4683731721364893,0.41150884004309773,0.006203441647812724,0.06761022564023733,0.4827619100920856,0.31226867297664285,0.23112122528254986,0.10262079513631761,0.12159583569737152,0.0013368206564337015,0.7911194004118443,0.5969421518966556,0.10187862103339285,0.6874672055710107,0.3830240441020578,0.03925368911586702,0.1562589274137281,0.4493007743731141,0.10648344806395471,0.14456000598147511,0.10373358324868605,0.38355507026426494,0.08638668502680957,0.1758202137425542,0.44407989180181173,0.5883560960646719,0.03845057706348598,0.3377782911993563,0.46605209857225416,0.6983318000566214,0.41315873293206096,0.14478042721748352,0.061392126756254585,0.6835890002548695,0.028925867984071374,0.08906892500817776,0.4947937207762152,0.0452333374414593,0.049658698262646794,0.10887503623962402,0.47633946136338634,0.07725267903879285,0.28561239154078066,0.9235833203420043,0.34138542948057876,0.12458863272331655,0.04594642552547157,0.4476544123608619,0.10121351125417277,0.7718080149497837,0.830991490278393,0.7380214219447225,0.4241482134675607,0.9556272639892995,0.93176289787516,0.8360451499465853,0.06897810357622802,0.8239780873991549,0.9240848189219832,0.29597729560919106,0.309738452360034,0.9914370325859636,0.8559098842088133,0.9996866248548031,0.5612878152402118,0.9855679220054299,0.9086007801815867,0.6336135298479348,0.45905176155501975,0.9777060633059591,0.9983692450914532,0.8939486162271351,0.48637747667962683,0.677567852428183,0.7665680986829102,0.8568461579270661,0.4422054665978067,0.7481011454947293,0.8951789499260485,0.783367631258443,0.47828688540030273,0.9279834539629519,0.9982436527498066,0.915167089086026,0.1510896631400101,0.9838628452271223,0.011434354586526752,0.03690949222072959,0.479142326512374,0.9928248971700668,0.4209494476672262,0.021633622236549854,0.067537906114012,0.23377539892680943,0.06510583264753222,0.0170554684009403,0.491612620302476,0.8827102489303797,0.9775753950234503,0.9569004173390567,0.44959320585476237,0.03060714527964592,0.06711427983827889,0.5872098037507385,0.4966785987839103,0.9915663250721991,0.6941705751232803,0.7664173603989184,0.49310899631818755,0.9893372198566794,0.0038553480990231037,0.1083681546151638,0.2882219756371342,0.9986055828630924,0.2610988945234567,0.26412491244263947,0.42450517797842624,0.984549090731889,0.0013410570099949837,0.07092303363606334,0.49729153802618387,0.955079133855179,0.8619348518550396,0.5210077629890293,0.48613687372999265,0.4923532526008785,0.6294809316750616,0.45766402734443545,0.47269599945284424,0.9039495594333857,0.9775151934009045,0.7904670005664229,0.1301737393019721,0.3551198225468397,0.2804213301278651,0.010895998682826757,0.4992312248330563,0.7827912555076182,0.9153086608275771,0.9581374994013458,0.15582186271203682,0.654893999453634,0.23076151637360454,0.09647726663388312,0.49550413122633474,0.709544938756153,0.13944694376550615,0.3611185494810343,0.5343143323203549,0.8652700795792043,0.46558331535197794,0.5701341878157109,0.07723323570098728,0.5291886969935149,0.14447180670686066,0.5264882459305227,0.12865885813953354,0.9212158257141709,0.9369558915495872,0.8451027253177017,0.2797178563545458,0.1335735539905727,0.001502918777987361,0.2805934567004442,0.49910867648432033,0.8232908062636852,0.2978146937675774,0.1083078384399414,0.07012712619034574,0.6052914531901479,0.9936900453176349,0.7306489762850106,0.13981720198644326,0.5880537645425647,0.04846748290583491,0.11404764442704618,0.2115119333495386,0.9816186353564262,0.782168731559068,0.02513604867272079,0.4023441270343028,0.9810747022274882,0.9963418780826032,0.6842145640403032,0.5644097186392173,0.9861135822720826,0.9808527352288365,0.8386708188336343,0.5773326757131144,0.9905490493401885,0.3078489874023944,0.7858109967783093,0.052382952021434906,0.48475638194940984,0.6568208953831345,0.8274502120912075,0.3923428807174787,0.980169789167121,0.907592723146081,0.538064478430897,0.34944463587598873,0.9313696140889078,0.11321499082259834,0.5262206925544888,0.19156647097552199,0.3491037944331765,0.014079801039770246,0.2034750785678625,0.46154559903079645,0.26109893317334354,0.03191537386737764,0.03529325732961297,0.4959575364482589,0.014363528229296207,0.2673435101751238,0.0039864517748355865,0.46724815529305486,0.9711628162767738,0.9352174161467701,0.24425303959287703,0.28454849184490744,0.7514384156093001,0.0029709164518862963,0.22809458686970174,0.2672446863143705,0.9880487862974405,0.6763242441229522,0.9273127010092139,0.17781352031743153,0.10195453627966344,0.04646482062526047,0.22124187578447163,0.3779174489201978,0.9818447725847363,0.663860660744831,0.8612246934790164,0.0763367219013162,0.26952717010863125,0.19253221480175853,0.290378054138273,0.164864160947036,0.24117287970148027,0.009591704700142145,0.0847882276866585,0.05493129973765463,0.1271955582778901,0.06164548359811306,0.2717292986344546,0.0866475529735908,0.018189268186688423,0.007558724377304316,0.1754558482207358,0.4060085764969699,0.11615507421083748,0.08597165951505303,0.5206982095260173,0.3642907557077706,0.7159763961099088,0.7575502779800445,0.13451056508347392,0.2706874720519409,0.6766349887475371,0.1315874014981091,0.043850736459717155,0.561879356415011,0.9875118231866509,0.39839907735586166,0.8471709068398923,0.31765072242124004,0.8552069845609367,0.07099534990265965,0.015119821531698108,0.03289284207858145,0.9667862572241575,0.008992709219455719,0.6784242503345013,0.12024987366748974,0.951655823038891,0.010319657856598496,0.2639941982924938,0.06287717096274718,0.9507508375681937,0.9835069940891117,0.9394277366809547,0.22505839498480784,0.8680115765891969,0.05748356762342155,0.5792524281423539,0.05893494805786759,0.996899148914963,0.7874258160591125,0.9210866834037006,0.3678782296483405,0.9719192264601588,0.9109082755167037,0.9189132458996028,0.07952960297698156,0.9679321537259966,0.8805936111602932,0.7667663989122957,0.15902060766238718,0.8028778424486518,0.804304250748828,0.7245622030459344,0.3387757904594764,0.8709135267417878,0.8884765531402081,0.6895432341843843,0.16997787677682935,0.9644801546819508,0.9697885487694293,0.3943317523226142,0.44262786956969646,0.8200830058194697,0.018982643028721213,0.10307517880573869,0.13921189792454242,0.156827749684453,0.27620130055584013,0.7649493545759469,0.47640200827736406,0.8107500683981925,0.43357355636544526,0.062015398405492306,0.1447243157424964,0.6676559299230576,0.5608658439014107,0.8453153453301638,0.16889737674500793,0.1928862244822085,0.2953926990740001,0.6249307838734239,0.05685285491636023,0.5136403669603169,0.8251166024710983,0.991188442800194,0.35832846103003246,0.9560865850653499,0.5165742640383542,0.50543108349666,0.48924433168722314,0.9741679257713258,0.08352530561387539,0.08160205488093197,0.4544944444205612,0.9812810965813696,0.9955167921725661,0.7648600884713233,0.49329770187614486,0.7968557828571647,0.36864686431363225,0.45531986257992685,0.45200558977667243,0.7491128633264452,0.4950770647265017,0.30789368716068566,0.4741391360294074,0.9967391274403781,0.873100713128224,0.7104511968791485,0.07692164421314374,0.05465530278161168,0.04903625324368477,0.1909623637329787,0.3745588846504688,0.7790513332001865,0.390064011560753,0.7913590434473008,0.26212868295842784,0.1048122076317668,0.014933001948520541,0.1194528469350189,0.466926935093943,0.33283373853191733,0.10978706809692085,0.23065380798652768,0.3862476760870777,0.2580275358632207,0.021485950564965606,0.02759823715314269,0.5814508885610848,0.29218798666261137,0.666014178423211,0.8308043647557497,0.0950019184499979,0.9521789748687297,0.8059403609950095,0.22311847866512835,0.4551537503604777,0.9697697621304542,0.3885534815490246,0.2340512629598379,0.2427818746538833,0.8660439737141132,0.8176776918116957,0.8223353321664035,0.34931400684872643,0.32475112192332745,0.09977805893868208,0.10451719304546714,0.48757342537865045,0.6622228201013058,0.025613280478864908,0.0014274369459599257,0.4723013975773938,0.054262590827420354,0.017929750960320234,0.1260934742167592,0.43795863558771086,0.8418550526257604,0.07441379292868078,0.03464370942674577,0.06393663755152375,0.8874657221604139,0.8876652703620493,0.9970839750021696,0.11657846565358342,0.3529172888956964,0.5617382717318833,0.8364093527197838,0.0967609835206531,0.4708456532098353,0.21349675254896283,0.44051427859812975,0.06625637168763206,0.3048230931162834,0.06775823538191617,0.1815954246558249,0.4873394767171703,0.4583339272066951,0.052982099587097764,0.24227816238999367,0.1415140726021491,0.39687537075951695,0.35970032098703086,0.5125803591217846,0.053229176707100125,0.6970460063312203,0.10574977705255151,0.36446581105701625,0.4416409775847569,0.5142050734721124,0.04777773516252637,0.04304101876914501,0.26767981993034484,0.9730950621888041,0.8817642577923834,0.8423410912510008,0.4279949785443023,0.5922084045596421,0.5912758109625429,0.23770293523557484,0.29102150311227887,0.8016995477955788,0.925487139262259,0.2512121759355068,0.49893227419815955,0.8862870596349239,0.91314130066894,0.571486733853817,0.10248135247966275,0.9933237107470632,0.9906605938449502,0.7273429757915437,0.4690133299329318,0.8807160237338394,0.6294036684557796,0.7908519115298986,0.4916433400823735,0.9988904299680144,0.21699701063334942,0.35357856494374573,0.14501179438084366,0.88343799370341,0.3681790374685079,0.166673336410895,0.11253821314312518,0.07667980692349374,0.04694826831109822,0.9612912388984114,0.05840034587308765,0.994739101966843,0.8911492044571787,0.6030756479594857,0.25285434430697934,0.9657909120433033,0.9373366283252835,0.9736658695619553,0.5030367207014933,0.9191078161820769,0.8068496768828481,0.6788785404060036,0.4454214831930585,0.09668084885925055,0.0017457555513828993,0.08740151091478765,0.34805580344982445,0.21417061984539032,0.06868417235091329,0.0039391955360770226,0.4784076117328368,0.7722159025724977,0.5554362165275961,0.017713521840050817,0.3649930244544521,0.5718526826240122,0.23115738900378346,0.11563239712268114,0.09769346102839335,0.029845324344933033,0.10316163557581604,0.4054475415032357,0.14328122484730557,0.61677385866642,0.11082900292240083,0.7251145688351244,0.18044200374279173,0.47363273380324244,0.016537307761609554,0.0454430878162384,0.26730951541103426,0.07087878929451108,0.02552931592799723,0.04560795403085649,0.5685011869296431,0.03233495960012078,0.009691325947642326,0.02206717268563807,0.49586020327406005,0.2993586871307343,0.08953367336653173,0.2258509830571711,0.40700904119294135,0.09907262912020087,0.025878357235342264,0.17113327444531024,0.34421465707710014,0.3316765851341188,0.07758803339675069,0.27533093420788646,0.2896984081715345,0.9780289239715785,0.937248604837805,0.9137201858684421,0.27086685127578675,0.5694479057565331,0.9412565554957837,0.4372855613473803,0.4359744340647012,0.9108211759012192,0.4003623768221587,0.7152630803175271,0.4801530649070628,0.5692184625659138,0.24353595590218902,0.49665109859779477,0.3338613028288819,0.7552696890197694,0.6467546978965402,0.4896917548030615,0.17013240281958134,0.4853143475484103,0.8680578605271876,0.45210753404535353,0.07677874774672092,0.01135249505750835,0.05489964596927166,0.14410382276400924,0.07344549630070106,0.5156081384047866,0.50851307855919,0.9674150594510138,0.3235606459202245,0.34381958888843656,0.34869613917544484,0.7938040308654308,0.2924892090377398,0.929857898503542,0.012151586823165417,0.024676532950252295,0.16035452343057843,0.07155776210129261,0.021479046437889338,0.08415353624150157,0.4387986764195375,0.005130393663421273,0.04686756827868521,0.07600510609336197,0.47997041516937317,0.8956274497322738,0.8551472828257829,0.7201343756169081,0.4826386863365769,0.9095495261717588,0.7681323813740164,0.6471890874672681,0.4024512941716239,0.8096235995180905,0.17125315219163895,0.5957444692030549,0.05656001437455416,0.9959972742944956,0.9572139729280025,0.20596397062763572,0.4962965913466178,0.93717798194848,0.9938406615983695,0.8368562194518745,0.25250927067827433,0.8285450870171189,0.8582702693529427,0.3489612555131316,0.46022351819556206,0.9979306848254055,0.9491613355930895,0.3750541980843991,0.1634098193375394,0.34160092868842185,0.06703486619517207,0.34375957679003477,0.21901699117152024,0.03577855648472905,0.003251396818086505,0.13929189974442124,0.4721997829270549,0.9487442474346608,0.9976944935042411,0.8234931144397706,0.466511786240153,0.9842027104459703,0.9994164020754397,0.9922424689866602,0.4990454405779019,0.9226499211508781,0.8963099890388548,0.3613472958095372,0.0950375258224085,0.15105416649021208,0.07105070352554321,0.3148900412488729,0.47286212028702723,0.01903280266560614,0.04910864634439349,0.20034318137913942,0.34956800407962874,0.9753568053711206,0.6285678269341588,0.4217071153689176,0.3739350871765055,0.991296854801476,0.9919530285988003,0.9460977567359805,0.47060043753590436,0.7220393186435103,0.8848921323660761,0.8297907339874655,0.005675661028362811,0.6065731553826481,0.9587780011352152,0.2487869211472571,0.19593929445836694,0.881958503741771,0.8680324857123196,0.7005973176565021,0.1247672887519002,0.9839099666569382,0.5052592447027564,0.6465470772236586,0.4849913195474073,0.996345478342846,0.9396413692738861,0.4017666473519057,0.10230616860790179,0.3163010573480278,0.03223409573547542,0.05244658817537129,0.4768580511794426,0.4653137563727796,0.9813327987212688,0.6813006380107254,0.11018869454273955,0.45488889911212027,0.033655439503490925,0.31505126040428877,0.4635179413133301,0.013357489369809628,0.04220601706765592,0.010352967074140906,0.49759974238695576,0.1380488621070981,0.2767763480078429,0.29143933579325676,0.4880847263964824,0.056138578336685896,0.000471621286123991,0.008545437594875693,0.44123014687793327,0.03237289912067354,0.00472803832963109,0.11028944188728929,0.4440773872891441,0.279271928826347,0.03753482596948743,0.010364012094214559,0.4945092410198413,0.11762557085603476,0.14816053747199476,0.04531245958060026,0.4494965340127237,0.9441925592254847,0.14977422612719238,0.09052006504498422,0.3602954940055497,0.7413397401105613,0.008614637888967991,0.6790091709699482,0.08593635687138886,0.9639098611660302,0.05770450737327337,0.03266335977241397,0.23313022966030986,0.020957721630111337,0.0017457555513828993,0.11646694899536669,0.4988315323134884,0.057498564245179296,0.04915615450590849,0.1715953554958105,0.49604082878213374,0.15750638372264802,0.01496789394877851,0.0899384361691773,0.10993743232684211,0.10353981517255306,0.04321588086895645,0.2933356398716569,0.3278626496554352,0.26011813967488706,0.15033646393567324,0.4521471264306456,0.11450905653182418,0.7494256861973554,0.0752737654838711,0.10291574592702091,0.07495110351592303,0.9816627216059715,0.15045127971097827,0.0977048734202981,0.05615851691691205,0.08796010073274374,0.2228908899705857,0.8045367870945483,0.19786861347965895,0.14119969634339213,0.026570745976641774,0.08484575874172151,0.567093436862342,0.5359302344731987,0.2694170798640698,0.04148049815557897,0.11642025104956702,0.3008492949884385,0.02032670844346285,0.21943297935649753,0.10243842749623583,0.872448867186904,0.9802010676357895,0.40464329230599105,0.14479768798919396,0.21869383961893618,0.47903154441155493,0.21262137428857386,0.3123958822689019,0.09247797541320324,0.88181023276411,0.17371088918298483,0.19766574826790023,0.3857947301585227,0.39269590424373746,0.919673501746729,0.12360602510161699,0.16210443386808038,0.004319338360801339,0.011729867197573185,0.3908332310151309,0.10898265824653208,0.11159588070586324,0.4782508711796254,0.26922646462917327,0.6613049195148051,0.17625387222506106,0.2533065837342292,0.17746440954506398,0.6831054522190243,0.5938838084693998,0.743417106103152,0.40896196763496845,0.926923053804785,0.06320843775756657,0.170212171273306,0.4052086454816163,0.926235222723335,0.007450497010722756,0.031576682813465595,0.4889222902711481,0.06952001876197755,0.19886993733234704,0.4776010869536549,0.4264170795097016,0.49538028822280467,0.052542346995323896,0.06395015516318381,0.25139620139962066,0.6943395375274122,0.0012283427640795708,0.005413164384663105,0.4979101368342526,0.9413970508612692,0.9575483412481844,0.9112854024861008,0.3203746572835371,0.8883541061077267,0.9324185482691973,0.3253741168882698,0.0646007287199609,0.9919114643707871,0.9962107634637505,0.6938774986192584,0.060349538223817945,0.9908850842621177,0.9745677118189633,0.31868319073691964,0.06598147858167068,0.8380352309904993,0.13250665622763336,0.1768962973728776,0.15527352499775587,0.928385047474876,0.31758859916590154,0.3042872140649706,0.11662579752737656,0.9861518347170204,0.3890182974282652,0.7903705332428217,0.3561659854371101,0.8575847262982279,0.08055459917522967,0.2067622672766447,0.44658929541474207,0.8402068370487541,0.2780678207054734,0.005740787833929062,0.059449837787542495,0.7521491521038115,0.02647565444931388,0.13385192933492362,0.07680115666007624,0.0722896980587393,0.024777755374088883,0.03380355425179005,0.45494674721267075,0.990615978371352,0.31198793346993625,0.06869213073514402,0.1836903224117123,0.8027320133987814,0.6740723501425236,0.3407149401027709,0.46506113884970546,0.15996022010222077,0.04716230393387377,0.2530465228483081,0.4898149663116783,0.671297456137836,0.22807791410014033,0.05818596691824496,0.05941031868569553,0.983617807738483,0.16237342031672597,0.15102766454219818,0.23443005863809957,0.9171989820897579,0.42345360293984413,0.8129478150513023,0.11457883870461956,0.38741760049015284,0.26683559105731547,0.5537341779563576,0.21455973635893316,0.5599980920087546,0.4100648902822286,0.0317546627484262,0.17860018236096947,0.9330172287300229,0.8427171637304127,0.6846998215187341,0.18975309253437445,0.9816108930390328,0.5530070103704929,0.7291223115753382,0.405975702253636,0.993672187672928,0.816157407592982,0.7591149285435677,0.4543783140950836,0.9141398908104748,0.4667086114641279,0.10317100258544087,0.057615174236707395,0.9752557126339525,0.5638962287921458,0.9977751788683236,0.3984667243203148,0.9339984920807183,0.9777366034686565,0.9848362063057721,0.5617229007417336,0.9586146923247725,0.9452712947968394,0.8408142009284347,0.30712577804224567,0.8608611838426441,0.8778606038540602,0.8932455787435174,0.32520435525802893,0.9959649853408337,0.7166596353054047,0.7516761056613177,0.15776966026751327,0.6769718376453966,0.1744684292934835,0.23813764727674425,0.36509669843362647,0.9626820152625442,0.8441496272571385,0.7609666073694825,0.153070438769646,0.9932759604416788,0.3592749685049057,0.9260132908821106,0.22272958408575505,0.9869744281750172,0.9530499640386552,0.640132870292291,0.5456346051301807,0.8020068779587746,0.24943343363702297,0.47983465646393597,0.10183765951078386,0.4084678436629474,0.059630563016980886,0.883012006059289,0.08135691444622353,0.4672147026285529,0.052097344771027565,0.0038326301146298647,0.06356254587881267,0.04264515219256282,0.01674246578477323,0.07986207981593907,0.1918236612924375,0.10310738114640117,0.061681934632360935,0.26893287152051926,0.48014022016432134,0.9499325179494917,0.9321373833809048,0.7651363096665591,0.4989692392293364,0.8644310683012009,0.5001631143968552,0.5683254927862436,0.44520590944448485,0.023745140759274364,0.015509380493313074,0.225965779973194,0.336212913133204,0.149778037564829,0.25735863158479333,0.7697593588382006,0.41957011172780767,0.000594448996707797,0.10279173334129155,0.6508413243573159,0.4789073337800801,0.9173352110665292,0.05629290593788028,0.03364706551656127,0.23910544514656068,0.932654685806483,0.08521623024716973,0.36266880249604583,0.3257205672329292,0.2209819129202515,0.037101809633895755,0.005439329659566283,0.05480430772295222,0.21152777248062193,0.35140683175995946,0.21448448207229376,0.4838838487514295,0.0007185342255979776,0.04501041816547513,0.21457782154902816,0.33123446655226874,0.4825786591973156,0.041047368198633194,0.284817473962903,0.4488057768670842,0.25042227283120155,0.003685886738821864,0.16629930934868753,0.460317361773923,0.18072304455563426,0.012774793663993478,0.07292233989574015,0.38608138751005755,0.7273677343036979,0.022890240186825395,0.15057484665885568,0.12726037049433217,0.9697748452890664,0.9591140891425312,0.6906414008699358,0.16237931463401767,0.9766856413334608,0.9882385283708572,0.5277084547560662,0.4355551752494648,0.9988488140515983,0.6364315832033753,0.24656474380753934,0.4464295782498084,0.7693862891755998,0.19263331638649106,0.69857133529149,0.21364127391716464,0.16905008954927325,0.05425440310500562,0.2492709916550666,0.5745914539089426,0.23253728658892214,0.17062034155242145,0.16160646453499794,0.495420805469621,0.5516464789398015,0.29897162853740156,0.4936413150280714,0.52593481275253,0.08872938947752118,0.15696693654172122,0.177075139246881,0.45953693659976125,0.1540595453698188,0.13162307790480554,0.27739421115256846,0.4442063179332763,0.24735190765932202,0.7552049092482775,0.4147826926782727,0.22096120797796176,0.7872297475114465,0.47902472387067974,0.41220649844035506,0.21379841113230214,0.5741348199080676,0.02609333535656333,0.1202534765470773,0.09047031028894709,0.8196155962068588,0.012469988549128175,0.005803366424515843,0.1906616918859072,0.7422792601864785,0.040724110091105103,0.17069599474780262,0.11485226361546666,0.07639294094406068,0.545610107248649,0.057317921658977866,0.45797605502884836,0.5134761342778802,0.039686790900304914,0.29693709895946085,0.48381009282311427,0.7231015902943909,0.7535474172327667,0.6868230723775923,0.2806087140459567,0.4043605108745396,0.12058556801639497,0.3786364309489727,0.2317068996257149,0.38028245116584003,0.017988449428230524,0.06136456201784313,0.28423095465404913,0.039679881650954485,0.08066005678847432,0.5168034764938056,0.3110923429368995,0.6936179951298982,0.008321574656292796,0.18964960426092148,0.49931319439783695,0.28651641192846,0.0683604956138879,0.20978188887238503,0.05301161927636713,0.2606079063843936,0.0928913748357445,0.5834957524202764,0.21331890414003285,0.1811302441637963,0.013745164964348078,0.011614335468038917,0.48504713956499473,0.9527151067741215,0.9873446163255721,0.9755674244370311,0.482136522536166,0.9228181117214262,0.8297736283857375,0.8083775602281094,0.5633498437469825,0.852894309675321,0.4134077997878194,0.12688936875201762,0.3973596358438954,0.7512855110689998,0.8496339202392846,0.6464041012804955,0.47850390743697063,0.8632418299093843,0.9483742450829595,0.9140715235844254,0.19743741474812854,0.8393190156202763,0.4807322225533426,0.9717927761375904,0.3246118070906959,0.8573849680833519,0.9998850340489298,0.9662002383265644,0.4968917956342921,0.9595866482704878,0.9532639619428664,0.8207111502997577,0.47916697046021,0.9892226769588888,0.057004682486876845,0.05675861961208284,0.1454626310733147,0.8750001674052328,0.012704689521342516,0.2182428592350334,0.16059534975793213,0.8662492772564292,0.8615489406511188,0.6818023251835257,0.3789620871888474,0.9646621139254421,0.6055259343702346,0.411378663033247,0.2998166392440908,0.974737640703097,0.9994845183100551,0.8849122996907681,0.28473132986109706,0.8058180510997772,0.873160204384476,0.7485490781255066,0.3421023770351894,0.35807028668932617,0.03329235245473683,0.17315284116193652,0.3670583451981656,0.31056980323046446,0.029830481158569455,0.2514163367450237,0.41441789058735595,0.921083724591881,0.7204138599336147,0.510049830423668,0.2800560752628371,0.398909097770229,0.011392692802473903,0.3616168284788728,0.1933696212945506,0.02358554257079959,0.014305321034044027,0.09286582376807928,0.27886819613631814,0.22420136095024645,0.09220285434275866,0.009708451339975,0.25877942679217086,0.6283823188859969,0.7485367557965219,0.27904473594389856,0.20301053766161203,0.7128236226271838,0.7806340269744396,0.7886779787950218,0.2806765194516629,0.9869760568253696,0.8823501989245415,0.5526570586953312,0.39113076028879734,0.8754910500720143,0.8250054400414228,0.8883320901077241,0.4229202277725562,0.7265840242616832,0.17870296142064035,0.13179743848741055,0.45751295739319175,0.7213540775701404,0.638400026364252,0.5597439310513437,0.08083522144006566,0.8782599542755634,0.5913235025946051,0.2844711975194514,0.060514254833105956,0.9815260679461062,0.522191823925823,0.48329315381124616,0.1758518669521436,0.37153368745930493,0.019820238696411252,0.5098844124004245,0.22024732348509135,0.5328717513475567,0.11774307722225785,0.32186890789307654,0.36910961378598584,0.9883988767396659,0.8738930760882795,0.6650531790219247,0.39986946965800596,0.8450306169688702,0.5822106911800802,0.7969307536259294,0.05019598649814725,0.46665172511711717,0.027194350259378552,0.18097894196398556,0.32816397058777513,0.7074423742014915,0.9204342721495777,0.8918183040805161,0.08738269648747518,0.06900191609747708,0.029905298724770546,0.04939361708238721,0.4507252933573909,0.7981490476522595,0.5674680108204484,0.9876812298316509,0.49310899631818755,0.5072373498696834,0.6743298668880016,0.5048306984826922,0.4001229811576195,0.8542664106935263,0.04744261549785733,0.015004195971414447,0.16108995098620654,0.3179599358700216,0.04138100054115057,0.07705831760540605,0.24538105630781504,0.9816426148172468,0.9936403471510857,0.9238702114671469,0.5245615303516388,0.3481721035204828,0.11291725421324372,0.6356870785821229,0.08608597069978714,0.9565156267490238,0.8990774957928807,0.5091686206869781,0.06150422727223486,0.9794169287197292,0.9717495469376445,0.8877814149018377,0.4996665585669689,0.7887077666819096,0.8056911402381957,0.8706742103677243,0.3586844715755433,0.9951013047248125,0.8013022148516029,0.41718233190476894,0.32767872031545264,0.6567047357093543,0.23000355483964086,0.27203742880374193,0.25653372812084857,0.05195487290620804,0.034229210345074534,0.04363174154423177,0.5962308908579871,0.008396605495363474,0.013961510732769966,0.16139287897385657,0.47956079700961707,0.27691767713986337,0.036874546902254224,0.04616585886105895,0.47340040768031033,0.6229576540645212,0.1237576452549547,0.3518032585270703,0.47188470634864643,0.08197553479112685,0.05709871486760676,0.08636464667506516,0.4584370730095543,0.9360468019731343,0.9506435091607273,0.15206505497917533,0.2200414753635414,0.9077901341952384,0.6046998193487525,0.7848235571291298,0.1148206492769532,0.8902611029334366,0.06429972220212221,0.021457870723679662,0.05631654994795099,0.8961440077982843,0.7772078737616539,0.5846047168597579,0.3453261808375828,0.9802448800764978,0.8513572926167399,0.6757034829352051,0.30838117287494243,0.7860734700225294,0.9689449262805283,0.9987950236536562,0.4896830752841197,0.9387077440042049,0.8548792512156069,0.8479855931364,0.06935448874719441,0.05893014091998339,0.05425440310500562,0.35452060541138053,0.5210215114522725,0.9229464146774262,0.1388862868770957,0.17982860910706222,0.00186644506175071,0.6053223458584398,0.43736792355775833,0.129153017885983,0.23704436313128102,0.9548605310264975,0.27872334560379386,0.3251084480434656,0.1527156493626535,0.9772100783884525,0.624925737734884,0.6677576296497136,0.4977179452427663,0.08352103480137885,0.01369329821318388,0.17706152773462236,0.49285146810580044,0.17481562867760658,0.036296473583206534,0.46183113707229495,0.47794996736338363,0.7403757700230926,0.268328164704144,0.1053520767018199,0.32688065731199456,0.5303779528476298,0.19054950098507106,0.4096205907408148,0.43829555351985616,0.6996779190376401,0.23353910236619413,0.3447186092380434,0.25437437950167807,0.8101624578703195,0.4523140660021454,0.30832098284736276,0.2645477070240304,0.9874635490123183,0.9584436195436865,0.8893731646239758,0.46607879482908177,0.9782395095098764,0.9551358537282795,0.7674822988919914,0.4042551246820949,0.6686830343678594,0.9704574709758162,0.9580482917372137,0.38360261399066076,0.998863285407424,0.013191570993512869,0.36337886028923094,0.01625943067483604,0.954604147002101,0.6971216273959726,0.5039131389930844,0.12190591498510912,0.9478929319884628,0.004265134921297431,0.0613683860283345,0.10309002839494497,0.6405046810396016,0.08646613359451294,0.4455890611279756,0.4079030310967937,0.953538519795984,0.7961093711201102,0.4908022109884769,0.14311661820393057,0.856236070394516,0.9806232887785882,0.6340888489503413,0.2520380431204103,0.9288571623619646,0.8000569448340684,0.7331624284852296,0.3428393316688016,0.9963634086307138,0.9929017834365368,0.9037570771761239,0.4586049963720143,0.979154888773337,0.9977285726927221,0.9947832284960896,0.4980854491586797,0.6550334640778601,0.16455720295198262,0.2994567849673331,0.44328540849965065,0.6183542998041958,0.09912681276910007,0.3585452469997108,0.3012170963222161,0.8369662538170815,0.6683964980766177,0.4794359903316945,0.37917973765870555,0.6856619629543275,0.23835510364733636,0.08784055011346936,0.10285699019441381,0.026669183978810906,0.26941577391698956,0.16855828324332833,0.19631403216626497,0.7965118170250207,0.26465870696119964,0.1666896897368133,0.47550517701311035,0.7060561876278371,0.46741729718632996,0.2794230270665139,0.18575514956610278,0.6203905092552304,0.19470503251068294,0.04981857677921653,0.47550043809460474,0.9159974737558514,0.3077275513205677,0.5378854270093143,0.0466845374321565,0.002755776746198535,0.3168791667558253,0.1919779572635889,0.09164092018036171,0.9405949858482927,0.5528361992910504,0.5607012980617583,0.2949325547670014,0.9644801546819508,0.8990341557655483,0.9787381191272289,0.35720444404287266,0.896581846056506,0.9017153182066977,0.826920548453927,0.1928830765420571,0.9815223205368966,0.7662994416896254,0.5577848784159869,0.1952737047104165,0.9871273431926966,0.49203711678273976,0.3419405361637473,0.29304548787185924,0.5520781658124179,0.10951364226639271,0.28699446259997785,0.18853379447245971,0.5373416435904801,0.299460336798802,0.4523922835942358,0.14189530366566033,0.15662571182474494,0.048432257026433945,0.14292080560699105,0.20972105759428816,0.9882414387539029,0.6437175536993891,0.5403818932827562,0.2902470140019432,0.9915829920209944,0.9890755931846797,0.7666363066527992,0.16917335625039415,0.9879614487290382,0.6040503235999495,0.4732114130165428,0.00589175964705646,0.9835511464625597,0.8044699635356665,0.638612465467304,0.2739234834676609,0.845612192992121,0.8111474213656038,0.5808923284057528,0.4250708795385435,0.3366160443983972,0.3258479714859277,0.45796059840358794,0.4787131131393835,0.9827614563982934,0.832502025179565,0.8509241214487702,0.23014963212190198,0.21701849484816194,0.923205784521997,0.14183394191786647,0.07844118068460376,0.9856714848428965,0.8885450379457325,0.614543373696506,0.06475395483430475,0.9933285019360483,0.8019795685540885,0.19206847622990608,0.5959748248802498,0.9971560609992594,0.7577210066374391,0.12090942519716918,0.16157049408648164,0.9730517130810767,0.9950978141278028,0.768535966752097,0.5896130778361112,0.97387043107301,0.03727846429683268,0.17160775023512542,0.01294450310524553,0.6457681935280561,0.4704062307719141,0.20455060922540724,0.32705810052575546,0.9680018965154886,0.3732714713551104,0.5329469377174973,0.202830959786661,0.9073944690171629,0.30378118087537587,0.3766373216640204,0.41830449013505133,0.317124784225598,0.03586931177414954,0.026470491662621498,0.13875209678662942,0.9984735080506653,0.9237731392495334,0.712183490395546,0.5728472755523398,0.17622450669296086,0.06973191141150892,0.1702983311843127,0.3675664574257098,0.016466658329591155,0.02114441990852356,0.10697180032730103,0.5661020821658894,0.44317682599648833,0.028898409800603986,0.07563135353848338,0.11438055315520615,0.8786798163782805,0.6892038537189364,0.7809287281706929,0.3327365894103423,0.504151689587161,0.6473290401045233,0.7243140880018473,0.36735692168585954,0.5620702130254358,0.8220393650699407,0.7110931649804115,0.07317336377454922,0.8065466084517539,0.8311305278912187,0.31146982684731483,0.09987071506911889,0.48252808139659464,0.2716570431366563,0.2245965814217925,0.3395365956937894,0.7421506412792951,0.4103028681129217,0.7409322643652558,0.10131779124494641,0.9822709776926786,0.9944864099379629,0.710468394914642,0.22427031482802706,0.9987389401067048,0.6174451883416623,0.3390887582208961,0.06731919851154089,0.9826657301746309,0.2381693774368614,0.914689329918474,0.06677416616585106,0.7984226732514799,0.12273837113752961,0.4077914822846651,0.5658286070916801,0.9079077255446464,0.3680763344746083,0.23054164019413292,0.381098136107903,0.9559006220661104,0.04539086343720555,0.0826914228964597,0.08067611363949255,0.6209829249419272,0.10256509808823466,0.48339068749919534,0.29302587296115234,0.6995947398245335,0.18550058058463037,0.0866548593621701,0.022393586579710245,0.9767790522892028,0.025839594192802906,0.1499218218959868,0.05987460201140493,0.366624956484884,0.0337782371789217,0.08428073418326676,0.32219680791022254,0.1042110389098525,0.01509570563212037,0.28064013784751296,0.5964318495476618,0.2511522176209837,0.026777464197948575,0.7196707036346197,0.06284244547132403,0.9749354079831392,0.9896077611483634,0.8947881883941591,0.5172303468221798,0.10627037473022938,0.010678445221856236,0.12756650685332716,0.005675661028362811,0.9855409907177091,0.8979448461905122,0.9471470995340496,0.34961641459958626,0.9706295635551214,0.9998321845196187,0.6164094766136259,0.11996495727216826,0.9869819805026054,0.994804005138576,0.9150940030813217,0.4511970153427683,0.9999532627407461,0.9785319296643138,0.7668523956090212,0.4797936829505488,0.9637395143508911,0.6900383774191141,0.12427929230034351,0.4991751602734439,0.6662508680019528,0.014614545507356524,0.26459468295797706,0.022768532275222242,0.9918000036850572,0.9850723696872592,0.7227076361887157,0.5838760423008352,0.8820139630697668,0.9565119571052492,0.6722274860367179,0.17225027285749095,0.9557244603056461,0.8764387932606041,0.7704812565352768,0.3011276756646112,0.9672705372795463,0.8279029552359134,0.7557472779881209,0.3483478757902049,0.9997058338485658,0.9365903255529702,0.7747012507170439,0.309738294465933,0.977468884550035,0.9725111632142216,0.998639955651015,0.09758671665331349,0.9848447854164988,0.0636954614892602,0.037296224385499954,0.07477878112113104,0.8895856747403741,0.05894418642856181,0.11402017693035305,0.24997063213959336,0.8720654810313135,0.7862438936717808,0.9085578313097358,0.1521202044095844,0.9371980007272214,0.24343751347623765,0.08929006429389119,0.10490205963142216,0.8468308614101261,0.9535466167144477,0.974443692015484,0.1693434348097071,0.9355706337373704,0.5631259430665523,0.6544149529654533,0.4958414659486152,0.752763710450381,0.9014383137691766,0.8606353166978806,0.05484780728584156,0.7636441020295024,0.3194905200507492,0.28931225440464914,0.17116807150887325,0.034377299482002854,0.004433089634403586,0.06565564800985157,0.06029716427437962,0.024968432495370507,0.3405054621398449,0.8411697156261653,0.002434311551041901,0.9436574198771268,0.9968275837600231,0.8439997548703104,0.24497053363593296,0.6158928161021322,0.007252792362123728,0.3440753810573369,0.05153107887599617,0.7708073074463755,0.7328910497017205,0.46240825578570366,0.3259683773620054,0.7593093016184866,0.7802854494657367,0.731600675964728,0.49185781402047724,0.9991704348940402,0.6865895052906126,0.7078861929476261,0.49765290900832043,0.8899278393946588,0.8494712985120714,0.5632052656728774,0.24054217396769673,0.7819269311148673,0.24056468717753887,0.09339975821785629,0.23593393771443516,0.8643883084878325,0.7273017046973109,0.8843202216085047,0.3554044613498263,0.9644801546819508,0.7968267132528126,0.8484216327778995,0.37840783803258093,0.09968112409114838,0.0709789814427495,0.39041776629164815,0.10129964348161594,0.6159455794841051,0.037178680999204516,0.25261993519961834,0.32673903258983045,0.2015987834893167,0.007444041781127453,0.09978513838723302,0.31363381843548266,0.8784583562519401,0.33991284389048815,0.49516700115054846,0.12386050397763029,0.8769836537539959,0.44026512326672673,0.3100008233450353,0.4883056339691393,0.14084474416449666,0.015606192871928215,0.025901729706674814,0.4791291017550975,0.2758001293987036,0.03486027102917433,0.48040054040029645,0.16586777461925523,0.9945221566595137,0.40082184760831296,0.6273527801968157,0.3397654150496237,0.06402900838293135,0.0403978917747736,0.364830082282424,0.49236614459659905,0.2269086774904281,0.1565819140523672,0.4668211326934397,0.4278189043048769,0.3637967109680176,0.10448230500333011,0.42286469717510045,0.3312808827031404,0.25195360952056944,0.006184566533192992,0.23205694369971752,0.4833325139828958,0.9962885419372469,0.8675590851344168,0.4286344996653497,0.5045203361893073,0.9805091556627303,0.9731137179769576,0.5418921688105911,0.5982642760733142,0.9309529699385166,0.9658949139993638,0.07061669672839344,0.4898516226792708,0.8292214057873935,0.9184844777919352,0.9793003380764276,0.09561603472102434,0.968106843996793,0.46220303303562105,0.3157268902286887,0.4609983591362834,0.6446990645490587,0.29847563593648374,0.19449395942501724,0.4692150163347833,0.9784240759909153,0.5183796077035367,0.24376517720520496,0.06743551529943943,0.06030685221776366,0.003926626872271299,0.22841604030691087,0.4442173558520153,0.25583500508219004,0.017604344757273793,0.2987366230227053,0.4721364886732772,0.9994533667340875,0.9173111864365637,0.34209049376659095,0.05051380092045293,0.9786716192029417,0.24370555742643774,0.9986002596560866,0.07408492487156765,0.9011720966082066,0.5431610888335854,0.41934671672061086,0.3632481674430892,0.7749856153968722,0.026934974128380418,0.3742303973995149,0.07457182501675562,0.6613555883523077,0.052381058456376195,0.33514664927497506,0.05596366710960865,0.08754040929488838,0.02573177427984774,0.11853060638532043,0.236717952019535,0.9204367233905941,0.8151247145142406,0.5228567433077842,0.29955968173453584,0.9996659369207919,0.3979082943405956,0.6701448683161288,0.09432711960980669,0.9756943576503545,0.5813119320664555,0.2746655934024602,0.05450558720622212,0.965524808736518,0.33595969434827566,0.6536399512551725,0.011336543364450336,0.9546380864921957,0.17801905889064074,0.23659629398025572,0.31394527906086295,0.9784499232191592,0.9787792616989464,0.8659119091462344,0.317036582052242,0.999674859456718,0.98548992886208,0.7238479170482606,0.49463615686399864,0.8125124161597341,0.008024034556001425,0.03593650762923062,0.09250362295424566,0.9986115226056427,0.9777333044912666,0.8372197016142309,0.4999700568034314,0.9414520729333162,0.8279854792635888,0.6744414146523923,0.44817010674159974,0.9587931442074478,0.9109082755167037,0.6815629596821964,0.30563850204925985,0.3006711683701724,0.809507291065529,0.6646127973217517,0.1987048228387721,0.6842590419109911,0.0013683068100363016,0.09555751038715243,0.07302129624877125,0.9827587497420609,0.7546427552588284,0.5258852164261043,0.2368973843636923,0.9091580535750836,0.002467636251822114,0.0019696045201271772,0.031056713429279625,0.9881641361862421,0.7801289157941937,0.9354933593422174,0.4533238006872125,0.8393416979815811,0.23621050943620503,0.6096829101443291,0.07663588983705268,0.9170878299046308,0.8287154685240239,0.986058441689238,0.461781204061117,0.972812834661454,0.7573281289078295,0.3533876514993608,0.48608442596159873,0.8661561633925885,0.27031818544492126,0.5945831779390574,0.3128274482325651,0.968002243200317,0.7555866558104753,0.3506253012456,0.46098888664273546,0.10019957972690463,0.11842673271894455,0.1876181699335575,0.4084490291075781,0.7476445820648223,0.7968712784349918,0.5268995249643922,0.07680705919628963,0.803759079426527,0.8026633183471859,0.8783546083141118,0.49840426343725996,0.4979481229092926,0.01475854660384357,0.03266320517286658,0.24574980745092034,0.9473299214150757,0.0883520981296897,0.11520840227603912,0.07719250520458446,0.9945183617528528,0.9809452672488987,0.9371780855581164,0.05426133788423613,0.9702297355979681,0.9812186849303544,0.7500634393654764,0.47780458147171884,0.9656945150345564,0.5496533003170043,0.7150429245084524,0.07948500171769411,0.8217048738151789,0.9363633876200765,0.6748385832179338,0.38989001063164325,0.06414552335627377,0.004160648910328746,0.194494268624112,0.17714706597616897,0.004668212030082941,0.01570069743320346,0.09379099402576685,0.20983942945022138,0.045673646265640855,0.06844915659166873,0.16352428123354912,0.3660897563560866,0.8214196299668401,0.6617588065564632,0.5406944963615388,0.06300798826850951,0.13454745383933187,0.005240717437118292,0.30641056993044913,0.5953978374833241,0.4630509519483894,0.001995120197534561,0.292289397213608,0.4591223914525472,0.2930590850301087,0.14589920872822404,0.34905298869125545,0.06961636234773323,0.7853157068602741,0.04131377907469869,0.177075139246881,0.061139064526651056,0.1540595453698188,0.08671890245750546,0.11778161814436316,0.4839553030091338,0.22406126675195992,0.01505291904322803,0.09302848624065518,0.4625020503532141,0.5613054533023387,0.6885664074216038,0.9610336520709097,0.052205139538273215,0.49953785818070173,0.002467636251822114,0.532597596058622,0.013144432683475316,0.46790869534015656,0.028193213511258364,0.20367319625802338,0.4747681535431184,0.07880411669611931,0.04559831274673343,0.18437979160808027,0.2840539179625921,0.2649877634830773,0.08982289838604629,0.5305059885140508,0.010347157600335777,0.28146195760928094,0.02359565906226635,0.4452438000589609,0.08651243755593896,0.9938866198062897,0.2424125224351883,0.3333117861766368,0.0381586552830413,0.4754909093026072,0.060201521730050445,0.5451671821065247,0.061602518393192446,0.9969079543370754,0.9898253204301,0.5233709097374231,0.3499991090386175,0.9419860800262541,0.9731437123846263,0.684029150288552,0.344749844528269,0.9966208531986922,0.9878866712097079,0.6903588378336281,0.2399410496465862,0.8383261188864708,0.9337923326529562,0.8713676575571299,0.47676080957753586,0.97866918053478,0.9976369002833962,0.799116256646812,0.4812357020098716,0.9268843035679311,0.5838299207389355,0.6517356606200337,0.45697450047591703,0.21152777248062193,0.0017974823713302612,0.21448448207229376,0.4838838487514295,0.0007185342255979776,0.04501041816547513,0.21457782154902816,0.2711775201256387,0.6012203842401505,0.041047368198633194,0.284817473962903,0.4488057768670842,0.9998846927192062,0.8189615737646818,0.6349816443398595,0.18402195932576432,0.38634958723559976,0.6976493098773062,0.9567562646698207,0.010042280773632228,0.8261893223971128,0.22732862178236246,0.06836994108743966,0.06807266367832199,0.2812861790880561,0.015671453205868602,0.3502462476026267,0.4808392121107318,0.9224154497496784,0.5752405582461506,0.6074964697472751,0.400677039520815,0.1850830998737365,0.027743099024519324,0.24782082624733448,0.46222641681088134,0.9979444020427763,0.9814180580433458,0.9377193409018219,0.5017187387216836,0.980169789167121,0.7642867164686322,0.15038138208910823,0.11690673775738106,0.951302838511765,0.9687743345275521,0.5443060558754951,0.05600867227185518,0.5274730098899454,0.3544237951282412,0.4071984973270446,0.4064718801178969,0.4837740247603506,0.02174798585474491,0.19566106493584812,0.5856410210486501,0.9166067116893828,0.28125418885611,0.39998754719272256,0.1077942849835381,0.1882749937940389,0.01505291904322803,0.05199279449880123,0.4741084547014907,0.12657735869288445,0.006556976120918989,0.12916738749481738,0.10491448629181832,0.6528743088711053,0.002467636251822114,0.6052180780097842,0.06250890586525203,0.8163503333926201,0.811195520684123,0.7935938101727515,0.09490715432912111,0.9241353559773415,0.6387252691201866,0.4230839987285435,0.46890675256727266,0.7725334214046597,0.6327406554482877,0.7085547156166285,0.13794277007691563,0.31960754725150764,0.033887447556480765,0.18517848197370768,0.44299772701924667,0.4319072561338544,0.31686187093146145,0.46958213043399155,0.3406568354810588,0.861144492868334,0.5990796016994864,0.5786727543454617,0.14252502326853572,0.934898458654061,0.6968320491723716,0.7479195569176227,0.32069530164590104,0.922456061700359,0.9574177484028041,0.537517715478316,0.5225325409788638,0.9504218159709126,0.24192790011875331,0.386979874689132,0.10978633270133287,0.9749467712827027,0.7912288319785148,0.45882086106576025,0.16097809637431054,0.6642052438110113,0.5802530322689563,0.9693247803952545,0.010042280773632228,0.9905072432011366,0.3459324592258781,0.20448012393899262,0.07062128894031049,0.014715893426910043,0.06394280609674752,0.026652896776795387,0.45743871028535066,0.042985776672139764,0.0003835137467831373,0.08692865120247006,0.46066412058426065,0.2577398002613336,0.017604344757273793,0.10759146977216005,0.499918392742984,0.584385285153985,0.3192900284193456,0.48534605000168085,0.4860099357785657,0.1365129540208727,0.005240717437118292,0.30641056993044913,0.5953978374833241,0.8624294034671038,0.033384329406544566,0.08307419787161052,0.05180165917845443,0.8438130682334304,0.7119266823865473,0.46117337490431964,0.34138524256413805,0.7732789334841073,0.7479506307281554,0.6281576890032738,0.4252696472569369,0.8626943551935256,0.16587304696440697,0.4160841149277985,0.0504452322376892,0.8597282627597451,0.13544757454656065,0.38754569040611386,0.18895287443883718,0.6673920233733952,0.13844512752257288,0.15596781088970602,0.4196908249636181,0.5668950425460935,0.019754913868382573,0.16793731390498579,0.23950488086557015,0.9272733486723155,0.803997450042516,0.7811648815404624,0.4777707641595043,0.8087976458482444,0.6041769944131374,0.6164249842986465,0.5981730948202312,0.883109871763736,0.7270163076464087,0.6463153418153524,0.5812771962024271,0.8509300402365625,0.8124596495181322,0.7537389327771962,0.4760430579888634,0.903349794447422,0.7460859643761069,0.7405773811042309,0.42119981375290083,0.8899278393946588,0.8167258787434548,0.5919458500575274,0.3584191599278711,0.9632127122022212,0.7638627595733851,0.4617256917990744,0.05226969302166254,0.8490627857390791,0.04762372630648315,0.3180208473931998,0.3599945210269652,0.34317835164256394,0.04001907864585519,0.45424627466127276,0.12988799498416484,0.6928973554167897,0.021725106285884976,0.5677643597591668,0.033765127416700125,0.28541433764621615,0.030326962703838944,0.07869293820112944,0.23904300688300284,0.3844272179994732,0.2622538732830435,0.2396968505345285,0.20254067006753756,0.9934967337176204,0.7453062944114208,0.5136044262908399,0.4901208892231807,0.8072927920147777,0.5119825238361955,0.29127006116323173,0.19985065697692334,0.8723839828744531,0.8218039979692549,0.6248586585279554,0.1613354835426435,0.836309349630028,0.48539291857741773,0.25870223878882825,0.031182763050310314,0.8830489329993725,0.8108784097712487,0.15931491320952773,0.05761949206935242,0.6789062048774213,0.17526692687533796,0.2360973982140422,0.3380509535432793,0.9632127122022212,0.7800168781541288,0.45097521250136197,0.45653800123836846,0.9767713882029057,0.4882656233385205,0.2880939820315689,0.03538081981241703,0.9521429147571325,0.9682068333495408,0.9021404802333564,0.4831417292938568,0.8848084369674325,0.6886109572369605,0.6787611942272633,0.3900357879581861,0.9959472557529807,0.870480470592156,0.32820845930837095,0.4931605264777318,0.9191425093449652,0.5224003794137388,0.5253605127800256,0.23721546700689944,0.43479943461716175,0.0004183878190815449,0.2572664930485189,0.292256770376116,0.32769826683215797,0.1105390852317214,0.33426750963553786,0.3871097292634659,0.8859311598353088,0.10818912577815354,0.3628089448902756,0.01688069710507989,0.936891030985862,0.5897082141600549,0.7221921614836901,0.49865131699480114,0.8547919581178576,0.3829296079929918,0.011227917624637485,0.13882805600296705,0.8669186141341925,0.21044706902466714,0.4675745372660458,0.348523039650172,0.8470717004965991,0.8266931574326009,0.694645453710109,0.4496473929728381,0.8248820684384555,0.9552505773026496,0.6255729992408305,0.4750897859223187,0.854299686383456,0.9990794046316296,0.9756916586775333,0.49559420892037453,0.9710248198825866,0.980043901829049,0.9094279278069735,0.5617229007417336,0.980169789167121,0.7935797132086009,0.4774470168631524,0.5433253256138414,0.9893104808870703,0.8037925788667053,0.44941485463641584,0.5750117486109957,0.8062278444413096,0.8253760123625398,0.8533441904000938,0.0711441915598698,0.4675444921012968,0.08242482389323413,0.2900796786416322,0.18873136934125795,0.8100588079541922,0.22887945920228958,0.4971363025251776,0.1479700630530715,0.010372574208304286,0.059083556989207864,0.23236862639896572,0.08913044253131375,0.4376984261907637,0.006745487451553345,0.6179526136256754,0.3372225933126174,0.17446202435530722,0.012551181484013796,0.03747064503841102,0.4939379764953628,0.9198235352523625,0.9620698236394674,0.8047508543822914,0.080415151885245,0.8896810333244503,0.4767684943508357,0.31843267125077546,0.46909797060070557,0.8472697876859456,0.26672619418241084,0.5998043788131326,0.06856276686303318,0.6125097540207207,0.006172914057970047,0.06918053142726421,0.3215161766274832,0.6601114117074758,0.35671247309073806,0.5326683204621077,0.34972814096836374,0.750563042704016,0.034300117986276746,0.22405828046612442,0.12195609733462334,0.7457452164962888,0.21228845394216478,0.7607999304309487,0.06929124948801474,0.24765107803978026,0.024133248487487435,0.02226379280909896,0.27823732632678005,0.5530621332582086,0.2944276675116271,0.7231520474888384,0.061208874569274485,0.8494916036725044,0.7443671952933073,0.516948904376477,0.247036292438861,0.9854899602942169,0.7020057588815689,0.31594409281387925,0.249162547418382,0.9996942656580359,0.6765648617874831,0.5492112257052213,0.3431062361923978,0.8037020638585091,0.3530427434016019,0.3788708436768502,0.4895369794452563,0.8126788346562535,0.34892975236289203,0.33271440165117383,0.4977561660925858,0.6416614511981606,0.20896705565974116,0.36323018930852413,0.2101057183230296,0.11733407294377685,0.006524489959701896,0.139364825328812,0.22362426748732106,0.8432489694096148,0.16501243482343853,0.4290130666922778,0.05514456678647548,0.8439724578056484,0.16551943845115602,0.7658736146986485,0.050427432847209276,0.3959824740886688,0.006412359187379479,0.32715207687579095,0.06239972790936008,0.4030579321552068,0.1943408774677664,0.4855939457193017,0.07702598497271539,0.0516545451246202,0.010674025863409042,0.15915429452434182,0.5741563267307356,0.4011992502491921,0.1021057644393295,0.06201838445849717,0.52593481275253,0.27328990516252816,0.04131377907469869,0.38395047560334206,0.06656568968901411,0.4611789828632027,0.13162307790480554,0.36779291508719325,0.4894970457535237,0.06165099632926285,0.012106008362025023,0.0041618747636675835,0.4224059462547302,0.871241397690028,0.28082965849898756,0.7195553085766733,0.03559389873407781,0.7198845413513482,0.17276111734099686,0.05146481958217919,0.05024206642992795,0.9156662761233747,0.6069041031878442,0.1437211660668254,0.09168378963368014,0.9933403609320521,0.8062663390301168,0.0007540001533925533,0.4724061504122801,0.9999419264495373,0.7819429298397154,0.33147798222489655,0.276938099169638,0.28139514941722155,0.005756355589255691,0.20683801267296076,0.17377145804930477,0.15352767938748002,0.007229698123410344,0.2925718396436423,0.29384713518666106,0.013194022700190544,0.023052531061694026,0.2601717668585479,0.10393558973446489,0.9321408302057534,0.9659631659742445,0.8752115380484611,0.20046709262533113,0.7278057977091521,0.2647602732758969,0.4977835852187127,0.18001449304865674,0.9789548069238663,0.5126191519666463,0.4099546952638775,0.07496818834915758,0.3787192893214524,0.040370112052187324,0.34055281919427216,0.05460921232588589,0.0592999616637826,0.03306757775135338,0.13060305593535304,0.48852406489895656,0.3806299944408238,0.12367723067291081,0.4527101437561214,0.12368838620604948,0.4249994398560375,0.032063357066363096,0.16265354654751718,0.29914305242709816,0.2284061796963215,0.036296473583206534,0.2370870071463287,0.4767796688596718,0.49709690012969077,0.29446614952757955,0.43835283629596233,0.31492914570262653,0.9691225884016603,0.27987442328594625,0.7856588594149798,0.11516723992535845,0.5516625863965601,0.7067765048705041,0.23361261514946818,0.12262062111403793,0.9330708996858448,0.9321941728703678,0.9266391124110669,0.16774734222562984,0.45580867235548794,0.29959452291950583,0.20419704797677696,0.11464326379355044,0.9529211132321507,0.707027371507138,0.41497855517081916,0.09780384880723432,0.4991964886430651,0.05385842779651284,0.1821503173559904,0.45338986108545215,0.9461716138757765,0.3546835952438414,0.3805790739133954,0.08077136578503996,0.8952354949433357,0.8779650270007551,0.8245479222387075,0.13727767297532412,0.9120113349054009,0.888387864921242,0.8104429105296731,0.3908827687962912,0.8600762188434601,0.46838884614408016,0.5498354325536638,0.2937103811884299,0.8093913549091667,0.18463244498707354,0.1680873588193208,0.1629018105217256,0.8221184751018882,0.09459761157631874,0.1045929342508316,0.1488575571915135,0.9251252885442227,0.18959941249340773,0.0430335511919111,0.034330367227084935,0.9902303805574775,0.11086755036376417,0.08045290620066226,0.15933831573929638,0.9252008786424994,0.5344059786293656,0.8015670948661864,0.3877029032446444,0.792709379689768,0.04327089432626963,0.224930873606354,0.1680480986367911,0.8225790911819786,0.9911968666128814,0.7206329517066479,0.4981622710824013,0.35080228350125253,0.7610788678284734,0.14120282442308962,0.48903282986721025,0.2895938931033015,0.0316905805375427,0.08974604168906808,0.21880912196356805,0.05624951352365315,0.05425440310500562,0.3208089617546648,0.5745914539089426,0.5387271912768483,0.10760314483195543,0.13737013516947627,0.1287832230562344,0.8854962177574635,0.9631191140506417,0.9918516920879483,0.3256200610892847,0.29623437533155084,0.3940008687786758,0.1824092259630561,0.05609294748865068,0.1715820210520178,0.2892005452886224,0.8987527922727168,0.1700203585671261,0.4799000497441739,0.1761303951498121,0.43645338993519545,0.414668088092003,0.9968733780551702,0.566525032510981,0.6883954906370491,0.05351874275365845,0.61060482240282,0.3517762229312211,0.11754195345565677,0.2166512032970786,0.10350921517238021,0.005636818706989288,0.1119514883030206,0.4854496885323897,0.807054347358644,0.16335022798739374,0.5742130584549159,0.4516745219938457,0.10642875800840557,0.002360936254262924,0.13841635338030756,0.35055636247852817,0.9290160653181374,0.7308142078109086,0.27554215700365603,0.46168225904693827,0.9941772751044482,0.8124896252993494,0.6336885115597397,0.353006367420312,0.9968899574596435,0.887087729992345,0.7891718205064535,0.18485294120619072,0.22727329935878515,0.016579643124714494,0.11018988210707903,0.217643904988654,0.9362583837937564,0.4598830796312541,0.30854659155011177,0.4147793112322688,0.26341159362345934,0.0025138172786682844,0.24287442513741553,0.49825168220559135,0.8546839337795973,0.43351710168644786,0.5814341194927692,0.15127675130497664,0.47202092385850847,0.26574407098814845,0.2277154962066561,0.3057038460043259,0.6807978190481663,0.5542163499630988,0.6237140644807369,0.14074452954810113,0.8006511044222862,0.8680324857123196,0.7005973176565021,0.060260975931305444,0.9897009166888893,0.21332504181191325,0.6688221446238458,0.05584335599560291,0.996345478342846,0.9696497726254165,0.8681107696611434,0.06001972401281819,0.44777860096655786,0.0010244003497064114,0.44952980405651033,0.38706476003862916,0.12960071582347155,0.047725745709612966,0.034195981454104185,0.06438469847198576,0.13494123192504048,0.010078082559630275,0.07991733844392002,0.05877555243205279,0.9043510090559721,0.7582727323751897,0.7552257406059653,0.3315257044741884,0.9168750336393714,0.48251150478608906,0.3144293329678476,0.00485678983386606,0.865684109274298,0.4966895719990134,0.12682392308488488,0.03421413816977292,0.026930477935820818,0.21635142038576305,0.46578104910440743,0.01863422174938023,0.23778732912614942,0.27811146643944085,0.6477232871111482,0.062012661050539465,0.9518682656344026,0.9283150555565953,0.9337650963570923,0.055149168451316656,0.9301128596998751,0.5043545793741941,0.4404315333813429,0.48620650796219705,0.6694055374246091,0.07849431596696377,0.07502464298158884,0.07525209577288479,0.23643261450342834,0.002467636251822114,0.05488953599706292,0.49773962891194967,0.6795824677683413,0.0012168020475655794,0.18327870010398328,0.21318225481081754,0.07411084906198084,0.009906584862619638,0.0832922332920134,0.4600635623559356,0.3439494182821363,0.04027096088975668,0.23920484445989132,0.052464854530990125,0.8037020638585091,0.3694100233260542,0.3432338875718415,0.32407389405416326,0.7576501651201397,0.37833405658602715,0.3412764952518046,0.43993613923666997,0.48838707292452455,0.1634677336551249,0.34843597072176635,0.4978052436024882,0.9256267985329032,0.6047587674111128,0.49921698635444045,0.1870005429023877,0.9516688308212906,0.9903016202151775,0.8788935944903642,0.46826190425781533,0.754131359513849,0.4967366892378777,0.38621288258582354,0.4847158104763366,0.9800207007210702,0.8291029520332813,0.8097007621545345,0.22180298543535176,0.6942336950451136,0.4568698387593031,0.32120021781884134,0.4752702860161662,0.9941371630411595,0.6735579315572977,0.7769526883494109,0.3428903117659502,0.26592724141664803,0.00472803832963109,0.051841157022863626,0.47442737595411016,0.17610818822868168,0.03753482596948743,0.33703584666363895,0.3418662189040333,0.32407004316337407,0.04511316120624542,0.09787291823886335,0.24744891519658269,0.9732994600199163,0.3901205467991531,0.41476586391218007,0.0004555407213047147,0.985088411020115,0.09836492734029889,0.009641925804316998,0.12545784913236274,0.9336127007845789,0.6413839363958687,0.5771979200653732,0.06677211469504983,0.9364444136153907,0.8158457321114838,0.6965973179321736,0.4542741784825921,0.9585709709208459,0.8012523171491921,0.49361370876431465,0.4737386963679455,0.9752194604370743,0.33274921774864197,0.2528872122056782,0.49066379986470565,0.010372574208304286,0.059083556989207864,0.23236862639896572,0.08913044253131375,0.5821659101638943,0.08049692981876433,0.29520317050628364,0.03144374885596335,0.17446202435530722,0.000010363059118390083,0.03747064503841102,0.14146545431576668,0.8533380255103111,0.3449890862684697,0.39253621827811,0.4920213960809633,0.7081779572181404,0.24817632441408932,0.40197668340988457,0.16577481103595348,0.5488194201607257,0.18456238973885775,0.2837882924359292,0.3458392062224448,0.8937044919002801,0.3678660218138248,0.39328078646212816,0.2970409964211285,0.6481665400788188,0.12867644778452814,0.04673147830180824,0.16415155144641175,0.991807751590386,0.933452300960198,0.9011597123462707,0.06344985098112375,0.2373744696378708,0.0014192590024322271,0.5139806321822107,0.31702872705645857,0.1231892523355782,0.12534110061824322,0.22728106076829135,0.08059562696143985,0.4342570712324232,0.07683478179387748,0.18991726730018854,0.4892847148585133,0.6844450978096575,0.24568166746757925,0.5022011680994183,0.16858732427936046,0.002541028428822756,0.009832274168729782,0.0600145545322448,0.055269425397273156,0.48444905830547214,0.0034927106462419033,0.15325595252215862,0.20291319201933222,0.6717671472579241,0.07741697854362428,0.542143922066316,0.20381095178890973,0.1068301775958389,0.04185166023671627,0.0843552858568728,0.42744762800866737,0.7698000117670745,0.0635358092840761,0.1207178218755871,0.12705986499786376,0.3967093718238175,0.058898078510537744,0.14759756857529283,0.26349780031014236,0.9816806172020733,0.42416456574574113,0.2038810453377664,0.07470559411449358,0.9030165974982083,0.2456768280826509,0.5119588600937277,0.0727499844157137,0.6174119622446597,0.4142447232734412,0.4114617616869509,0.07404828558210284,0.3622586920391768,0.08938804967328906,0.13078260561451316,0.27516466804081574,0.8959593002218753,0.1383243389427662,0.3678619945421815,0.05679442466935143,0.4575165032874793,0.13255607103928924,0.7349195547867566,0.05123314936645329,0.18701856420375407,0.008372229291126132,0.1573272340465337,0.12055891412310303,0.2529305652715266,0.040141415782272816,0.11727546341717243,0.06763716524001212,0.9970011583063751,0.5681132224854082,0.794130741385743,0.021588596515357494,0.37568699521943927,0.024091614177450538,0.24130519502796233,0.3303209727979265,0.9657509729731828,0.666067342273891,0.3756034174002707,0.38238687582779674,0.6468216101638973,0.37878335476852953,0.42484196461737156,0.10369257426355034,0.9909817860461771,0.5504824835807085,0.6103613898158073,0.05600893053924665,0.9544363915920258,0.8869383793789893,0.7461138982325792,0.4122547411941923,0.7294267385732383,0.04723847680725157,0.3861341511365026,0.06983757512643934,0.0007433630526065826,0.006588801275938749,0.08876411523669958,0.23245568458223714,0.07469904609024525,0.034482428105548024,0.3869919793214649,0.10775275799678638,0.9587606240529567,0.9933858441654593,0.5939582092687488,0.512932728533633,0.9027083828113973,0.9943071438465267,0.9067593079525977,0.19353090461809191,0.9838695435319096,0.9917724868282676,0.8932891928125173,0.598268153402023,0.6928973554167897,0.021725106285884976,0.6680069360882044,0.033765127416700125,0.17616162705235183,0.03833317197859287,0.2167804343625903,0.3023008512565866,0.3844272179994732,0.022288730600848794,0.2396968505345285,0.154224248288665,0.18168391077779233,0.03300936031155288,0.14969353540800512,0.05646155970171094,0.25072684488259256,0.03559906524606049,0.29173519648611546,0.2335123009979725,0.004813935374841094,0.05987185565754771,0.7426887303590775,0.010347157600335777,0.32194192172028124,0.665349135408178,0.7724593165330589,0.2239843055373058,0.8831067509017885,0.7535989680327475,0.8767555968370289,0.3576330368407071,0.2906860541552305,0.8187678642570972,0.13347997446544468,0.05184794488595799,0.9251164572779089,0.9236487017478794,0.8213162764441222,0.4876631826744415,0.8762774628121406,0.628876477247104,0.672287933761254,0.5063009212259203,0.8692138181068003,0.4642952876165509,0.44403243344277143,0.26010593662504106,0.9437551952432841,0.49243684648536146,0.19800821016542614,0.12449917189078406,0.9233096207026392,0.16572100622579455,0.7494893542025238,0.10076276822946967,0.9697364640887827,0.05332327331416309,0.5226376110222191,0.030062583042308688,0.9175933776423335,0.7086431882344186,0.7673228713683784,0.20126560804201293,0.863563816761598,0.5876447919290513,0.5396041220519692,0.43548556867754085,0.8895741656888276,0.7536897659301758,0.7769733883906156,0.49768903804942966,0.9970011583063751,0.3465525000356138,0.02491385815665126,0.060780632449314004,0.5644188590813428,0.15541289001703262,0.07811596943065524,0.06198924107011408,0.36529706697911024,0.02051757648587227,0.2852795314975083,0.24381784634897485,0.8165501591283828,0.3301714526023716,0.29184858314692974,0.4613998375250958,0.83938392624259,0.3377765358891338,0.27044371934607625,0.20137137456331405,0.9254778292961419,0.7829400068148971,0.9431040179915726,0.09434472862631083,0.882721938425675,0.8027437082491815,0.7315844919066876,0.47041086371755225,0.9199832757003605,0.7437192010693252,0.644947174238041,0.48011549868388104,0.8140970638487488,0.38135084277018905,0.39700519340112805,0.4787949664052576,0.7472921831067652,0.11786839924752712,0.14900727313943207,0.10486275295261294,0.9987220920156687,0.3144125088583678,0.22308058245107532,0.2227882375009358,0.9270505385939032,0.4228599851485342,0.5850456201005727,0.31449380358681084,0.6470718949567527,0.007874373346567154,0.9113463894464076,0.055612670723348856,0.9538759004790336,0.09386529307812452,0.4872133613098413,0.006837321794591844,0.9901438758242875,0.7391192577779293,0.9040539180859923,0.31770610542735084,0.7830272414721549,0.6850456069223583,0.6263106723781675,0.07385821430943906,0.7917261812835932,0.5181861303281039,0.27514016395434737,0.3527698510675691,0.9814543109387159,0.2513131375890225,0.10630609910003841,0.5071863475255668,0.9502623858861625,0.46188984578475356,0.3182865087874234,0.2538017975515686,0.9870717213489115,0.8872514828108251,0.8059171356726438,0.25066498145461086,0.9709471228998154,0.9389321322087198,0.7857478000223637,0.1218413224676624,0.9832579237408936,0.7668023898731917,0.6809904016554356,0.058160043100360784,0.9884970439597964,0.8524981781374663,0.6895714041311294,0.4875873762182891,0.9417058825492859,0.612646761815995,0.544532943982631,0.0500291959499009,0.9597289657685906,0.9328495820518583,0.7904028254561126,0.4941929343971424,0.9991704348940402,0.9303093431517482,0.7898052870295942,0.5740089554106816,0.6566327398177236,0.14809739240445197,0.3905301650520414,0.0806454470846802,0.8797126284334809,0.9896636612247676,0.7324006836861372,0.512932728533633,0.9027083828113973,0.9943071438465267,0.8557650672737509,0.4016003332915716,0.6937940791249275,0.973667158279568,0.9074282229412347,0.598268153402023,0.9928023221436888,0.7819704792927951,0.3144469577819109,0.26499183431733403,0.9801238987129182,0.5045650540851057,0.4315703611355275,0.4958434082451276,0.9805983111727983,0.9045195407234132,0.6822128531057388,0.4880554523901083,0.9669946464709938,0.9961177373770624,0.6000226968899369,0.43329833503812554,0.980169789167121,0.9798643942922354,0.6794953946955502,0.10666909274877981,0.9689765512011945,0.9276118343695998,0.7245037141256034,0.16392077292548493,0.837681169854477,0.5017224522307515,0.28705356852151453,0.06731511648977176,0.9905205741524696,0.0011463537812232971,0.03310466720722616,0.010042280773632228,0.9166488307528198,0.13753617578186095,0.8483988428488374,0.0670691691339016,0.7145627883728594,0.21791071840561926,0.5190221900120378,0.2956961031886749,0.9872983419336379,0.24562496109865606,0.17777804750949144,0.3102858303464018,0.7036945035215467,0.4516559266485274,0.28593703592196107,0.05002723102224991,0.9979990387801081,0.8278284447733313,0.3418834877666086,0.2988990023150109,0.9232986832503229,0.6455185352824628,0.2671067917253822,0.10992109861690552,0.9819032165687531,0.651961229275912,0.4800144194159657,0.020636091590858996,0.28139514941722155,0.005756355589255691,0.20683801267296076,0.09751127858180553,0.026992012513801455,0.007229698123410344,0.24106141133233905,0.29384713518666106,0.09990236046724021,0.029147060588002205,0.2489208630286157,0.10393558973446489,0.8395357341505587,0.06232056766748428,0.14257175265811384,0.05567318240646273,0.582013200270012,0.032991524087265134,0.14803059585392475,0.41482142474269496,0.6026370886247605,0.004533964907750487,0.04870527726598084,0.05293968620244414,0.9702297355979681,0.9496043375693262,0.868612889200449,0.39075977557804437,0.9866108091082424,0.40721267415210605,0.38298338605090976,0.05487672432791442,0.46143527375534177,0.04718788526952267,0.02263622242026031,0.09363214919576421,0.9554527166765183,0.2456093616783619,0.6655271020717919,0.16757402571383864,0.9664697267580777,0.1686362400650978,0.0367791042663157,0.02030661061871797,0.998816687380895,0.13551855506375432,0.561484785284847,0.1938083317829296,0.9837323995307088,0.5006237062625587,0.7989879094529897,0.35914152062032373,0.8766495371237397,0.05756837665103376,0.27032032143324614,0.00027526181656867266,0.708152728388086,0.006369979120790958,0.27944515692070127,0.05519426109967754,0.6804665145464242,0.0542992337141186,0.15782619244419038,0.5658286070916801,0.9926137623842806,0.5313357987906784,0.6134138407651335,0.06537348832935096,0.9651015657000244,0.023705568863078952,0.01330929552204907,0.05661106624174864,0.8404145406093448,0.9619512306526303,0.8981336161959916,0.24825414525112138,0.9737809160724282,0.7627639428246766,0.8830526301171631,0.4966782227507792,0.8409578022547066,0.6930981515906751,0.5930675836279988,0.16454066265141593,0.7237193854525685,0.10566948493942618,0.46887865476310253,0.0675274963141419,0.6252434530761093,0.16685931896790862,0.2620982474181801,0.43018394336104393,0.5215701528359205,0.5184507856611162,0.7868124975357205,0.40884050641907377,0.9354743370786309,0.8263735782820731,0.4721807527821511,0.01742739521432668,0.8959834459237754,0.40249007823877037,0.7841637204401195,0.3075488748261705,0.9918000036850572,0.21790561662055552,0.20265756524167955,0.06145465690642596,0.9837323995307088,0.6286880471743643,0.3733835199382156,0.01742739521432668,0.9986549492459744,0.9874442196451128,0.9929856820963323,0.4546115111093968,0.9918000036850572,0.06365555501542985,0.22448342968709767,0.18278341945260762,0.9732994600199163,0.20415431540459394,0.3280987108591944,0.0004555407213047147,0.9718420298304409,0.18425360578112304,0.48269767174497247,0.12545784913236274,0.9336127007845789,0.9616852526087314,0.5584389523137361,0.06677211469504983,0.9045855344738811,0.24802407273091376,0.5669209803454578,0.1456378044676967,0.9918603454716504,0.4504414957482368,0.4333996351342648,0.13292455901391803,0.774115783860907,0.40208312193863094,0.42360476474277675,0.061742918100208044,0.989144561579451,0.48549559339880943,0.19864370045252144,0.03836748411413282,0.8711270182393491,0.3145371968857944,0.36024593259207904,0.2121674518217333,0.6768864672631025,0.4851674896199256,0.6255214586853981,0.05069262159522623,0.19848992209881544,0.09707763814367354,0.2671200886834413,0.18331191604956987,0.8609355571679771,0.3473755242303014,0.34383763070218265,0.010042280773632228,0.7117514531128109,0.12865510676056147,0.31475299084559083,0.46548145650885997,0.7673618367407471,0.19051872962154448,0.37360567366704345,0.06251438029576094,0.9040676290169358,0.5176402656361461,0.3662053442094475,0.4474014037637971,0.9050037853885442,0.30137654626742005,0.35064199240878224,0.09369812568183988"



//var div = document.getElementById('canvas-container')
//div.style.width = div.style.height = "500px"


// create a shell and get started
var shell = require("gl-now")({
	element:'canvas-container',
	clearColor:[0,0,0,1],
	glOptions:{
		alpha: false
	}
})

window.shell = shell
shell.preventDefaults = false	

shell.on('gl-init', function() {
	
	proj.init(shell.gl)
	
	proj.importData( polyDat )
	
})

shell.on("gl-error", function(e) {
	document.write("Oops! Looks like WebGL isn't supported :(")
  throw new Error("WebGL not supported :(")
})




shell.on("gl-render", function(t) {
	
	// update camera focus point from mouse dragging
	updateCameraXY()
	
	proj.paint(cameraXY[1], cameraXY[0] )
	
})





// mouse tracking
var dragging = false
var dragStartLoc = [0,0]
var dragLoc = [0,0]
var cameraXY = [0,0]

$('body').bind('mousedown touchstart', function(e) {
	if (e.target.nodeName==="CANVAS") {
		dragging = true
		var ev = (e.touches) ? e.touches[0] : e
		dragLoc = dragStartLoc = [ ev.pageX, ev.pageY ]
	}
})

$('body').bind('mousemove touchmove	', function(e) {
	if (e.target.nodeName==="CANVAS") {
		var ev = (e.touches) ? e.touches[0] : e
		dragLoc = [ ev.pageX, ev.pageY ]
	}
})

$('body').bind('mouseup touchend', function(e) {
	dragging = false
})


function updateCameraXY() {
	var tgt = [0,0]
	if (dragging) {
		tgt = [
			(dragLoc[0]-dragStartLoc[0]) / -200,
			(dragLoc[1]-dragStartLoc[1]) / -200
		]
	}
	var ease = 0.1
	cameraXY[0] += ease * (tgt[0] - cameraXY[0])
	cameraXY[1] += ease * (tgt[1] - cameraXY[1])
}





},{"../index.js":2,"browserify-zepto":3,"gl-now":52}],2:[function(require,module,exports){
"use strict";
var perspective = 0.2;
var compareonGPU = true;
var keepFewerPolysTolerance = 0;
var minAlpha = 0.05;
var maxAlpha = 0.5;
var useFlatPolys = false;
var glslify = require("glslify");
var createBuffer = require("gl-buffer");
var createVAO = require("gl-vao");
var mat4 = require("gl-mat4");
var createFBO = require("gl-fbo");
var createTexture = require("gl-texture2d");
var createCameraShader = require("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec4 position;\nattribute vec4 vertColor;\nuniform float perspective;\nuniform mat4 camera;\nvarying vec4 fragColor;\nvoid main() {\n  vec4 pos = 2.0 * position - 1.0;\n  pos.z = pos.z * 0.75 + 0.25;\n  pos = camera * pos;\n  float w = 1.0 + perspective * (pos.z);\n  pos.z = pos.z * 0.5;\n  gl_Position = vec4(pos.xyz, w);\n  fragColor = vertColor;\n}", "\n#define GLSLIFY 1\n\nprecision mediump float;\nvarying vec4 fragColor;\nvoid main() {\n  gl_FragColor = fragColor;\n}", [{"name":"perspective","type":"float"},{"name":"camera","type":"mat4"}], [{"name":"position","type":"vec4"},{"name":"vertColor","type":"vec4"}]);
var createFlatShader = require("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec2 position;\nuniform float multY;\nvarying vec2 uv;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n  uv = position * vec2(1.0, multY);\n  uv = 0.5 * (uv + 1.0);\n}", "\n#define GLSLIFY 1\n\nprecision mediump float;\nuniform sampler2D buffer;\nvarying vec2 uv;\nvoid main() {\n  gl_FragColor = texture2D(buffer, uv);\n}", [{"name":"multY","type":"float"},{"name":"buffer","type":"sampler2D"}], [{"name":"position","type":"vec2"}]);
var createDiffShader = require("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec2 position;\nuniform float multY;\nvarying vec2 uv;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n  uv = position * vec2(1.0, multY);\n  uv = 0.5 * (uv + 1.0);\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform float inputDim;\nuniform sampler2D bufferA;\nuniform sampler2D bufferB;\nconst float mag = 255.0;\nvarying vec2 uv;\nvoid main() {\n  float ip = 1.0 / inputDim;\n  float op = ip * 4.0;\n  vec2 p = vec2(floor(uv.x / op) * op, floor(uv.y / op) * op);\n  float sum = 0.0;\n  vec2 offset = vec2(0.0);\n  vec3 diff;\n  for(int i = 0; i < 4; ++i) {\n    for(int j = 0; j < 4; ++j) {\n      diff = texture2D(bufferA, p + offset).rgb - texture2D(bufferB, p + offset).rgb;\n      sum += dot(diff, diff);\n      offset.y += ip;\n    }\n    offset.x += ip;\n    offset.y = 0.0;\n  }\n  float avg = sum / 16.0;\n  avg /= 3.0;\n  float r = floor(avg * mag) / mag;\n  float g = floor((avg - r) * mag * mag) / mag;\n  float b = ((avg - r) * mag - g) * mag;\n  gl_FragColor = vec4(r, g, b, 1.0);\n}", [{"name":"multY","type":"float"},{"name":"inputDim","type":"float"},{"name":"bufferA","type":"sampler2D"},{"name":"bufferB","type":"sampler2D"}], [{"name":"position","type":"vec2"}]);
var createAvgShader = require("glslify/adapter.js")("\n#define GLSLIFY 1\n\nprecision mediump float;\nattribute vec2 position;\nuniform float multY;\nvarying vec2 uv;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n  uv = position * vec2(1.0, multY);\n  uv = 0.5 * (uv + 1.0);\n}", "\n#define GLSLIFY 1\n\nprecision highp float;\nuniform float inputDim;\nuniform sampler2D buffer;\nconst float mag = 255.0;\nvarying vec2 uv;\nvoid main() {\n  float ip = 1.0 / inputDim;\n  float op = ip * 4.0;\n  vec2 p = vec2(floor(uv.x / op) * op, floor(uv.y / op) * op);\n  float sum = 0.0;\n  vec2 offset = vec2(0.0);\n  vec4 col;\n  for(int i = 0; i < 4; ++i) {\n    for(int j = 0; j < 4; ++j) {\n      col = texture2D(buffer, p + offset);\n      sum += col.r + (col.g + col.b / mag) / mag;\n      offset.y += ip;\n    }\n    offset.x += ip;\n    offset.y = 0.0;\n  }\n  float avg = sum / 16.0;\n  float r = floor(avg * mag) / mag;\n  float g = floor((avg - r) * mag * mag) / mag;\n  float b = ((avg - r) * mag - g) * mag;\n  gl_FragColor = vec4(r, g, b, 1.0);\n}", [{"name":"multY","type":"float"},{"name":"inputDim","type":"float"},{"name":"buffer","type":"sampler2D"}], [{"name":"position","type":"vec2"}]);
var polys = require("./polydata");
polys.setAlphaRange(minAlpha, maxAlpha);
var gl, fboSize, currentScore;
var camShader, flatShader, diffReduceShader, avgReduceShader;
var vertBuffer, colBuffer, dataVao, flatVao, camMatrix;
var polyBuffersOutdated;
var refTexture, referenceFB, scratchFB;
var reducedFBs;
var SCREEN = "screen";
var initialized = false;
var rand = Math.random;
var floor = Math.floor;

function init(glRef, imageRef, size) {
    if (!glRef) {
        throw new Error("Need a reference to a gl context");
    }

    gl = glRef;
    var s = parseInt(size);
    fboSize = (s && s >= 16 ? s : 256);

    if (imageRef) {
        refTexture = createTexture(gl, imageRef);
    } else {
        refTexture = null;
    }

    gl.disable(gl.DEPTH_TEST);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    camShader = createCameraShader(gl);
    flatShader = createFlatShader(gl);

    if (refTexture) {
        diffReduceShader = createDiffShader(gl);
        avgReduceShader = createAvgShader(gl);
    }

    referenceFB = createFBO(gl, [fboSize, fboSize], {
        color: 1
    });

    referenceFB.drawn = false;

    scratchFB = createFBO(gl, [fboSize, fboSize], {
        color: 1
    });

    reducedFBs = [];
    var reducedSize = fboSize / 4;

    while (reducedSize >= 16) {
        var buff = createFBO(gl, [reducedSize, reducedSize], {
            color: 1
        });

        reducedFBs.push(buff);
        reducedSize /= 4;
    }

    if (reducedFBs.length === 0) {
        throw new Error("Comparison framebuffer is too small - increase \"fboSize\"");
    }

    polys.init(1);
    vertBuffer = createBuffer(gl, polys.vertArr);
    colBuffer = createBuffer(gl, polys.colArr);
    polyBuffersOutdated = false;

    dataVao = createVAO(gl, [{
        "buffer": vertBuffer,
        "type": gl.FLOAT,
        "size": 3
    }, {
        "buffer": colBuffer,
        "type": gl.FLOAT,
        "size": 4
    }]);

    var squareBuffer = createBuffer(gl, [-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1]);

    flatVao = createVAO(gl, [{
        "buffer": squareBuffer,
        "type": gl.FLOAT,
        "size": 2
    }]);

    if (refTexture) {
        drawFlat(refTexture, referenceFB, true);
    }

    currentScore = -200;
    initialized = true;
}

function runGeneration() {
    if (!initialized || !refTexture) {
        return;
    }

    polys.cacheDataNow();
    var vertCount = polys.numVerts;
    mutateSomething();
    polys.sortPolygonsByZ();
    vertBuffer.update(polys.vertArr);
    colBuffer.update(polys.colArr);
    polyBuffersOutdated = false;
    drawData(scratchFB, perspective, null);
    var scoreFn = (compareonGPU ? compareFBOsOnGPU : compareFBOs);
    var score = scoreFn(referenceFB, scratchFB);
    var keep = score > currentScore;

    if (polys.numVerts < vertCount) {
        keep = score >= currentScore - keepFewerPolysTolerance;
    }

    if (keep) {
        currentScore = score;
    } else {
        polys.restoreCachedData();
        polyBuffersOutdated = true;
    }
}

function mutateSomething() {
    var i, num, ct = 0;
    num = floor(6 * rand());

    for (i = 0; i < num; i++) {
        polys.mutateValue();
        ct++;
    }

    num = floor(6 * rand() * rand());

    for (i = 0; i < num; i++) {
        polys.mutateVertex();
        ct++;
    }

    if (rand() < 0.2) {
        polys.addPoly();
        ct++;
    }

    if (rand() < 0.3) {
        polys.clonePoly();
        ct++;
    }

    if (rand() < 0.3) {
        polys.removePoly();
        ct++;
    }

    if (ct === 0) {
        polys.mutateValue();
    }
}

function paint(xRot, yRot) {
    if (!initialized) {
        return;
    }

    if (polyBuffersOutdated) {
        vertBuffer.update(polys.vertArr);
        colBuffer.update(polys.colArr);
    }

    camMatrix = mat4.create();
    mat4.rotateY(camMatrix, camMatrix, yRot);
    mat4.rotateX(camMatrix, camMatrix, xRot);
    drawData(SCREEN, perspective, camMatrix);
}

function paintReference() {
    if (!initialized || !refTexture) {
        return;
    }

    drawFlat(referenceFB.color[0], SCREEN, false);
}

function paintScratchBuffer() {
    if (!initialized) {
        return;
    }

    drawFlat(scratchFB.color[0], SCREEN, false);
}

function drawFlat(source, target, flipY) {
    var multY = (flipY ? -1 : 1);
    drawGeneral(target, flatShader, flatVao, 6, ["multY", "buffer"], [multY, source]);
}

function drawData(target, perspective, camMat4) {
    camMatrix = camMat4 || mat4.create();
    drawGeneral(target, camShader, dataVao, polys.numVerts, ["perspective", "camera"], [perspective, camMatrix]);
}

function drawGeneral(target, shader, vao, numVs, uniNames, uniVals) {
    if (target == SCREEN)
        {} else {
        target.bind();
        gl.colorMask(true, true, true, true);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.colorMask(true, true, true, false);
    }

    shader.bind();
    var textureNum = 0;

    for (var i = 0; i < uniNames.length; i++) {
        var n = uniNames[i];
        var u = uniVals[i];

        if (typeof u.bind === "function") {
            shader.uniforms[n] = u.bind(textureNum++);
        } else {
            shader.uniforms[n] = u;
        }
    }

    vao.bind();
    vao.draw(gl.TRIANGLES, numVs);
    vao.unbind();
}

function compareFBOs(a, b) {
    var w = a.shape[0], h = a.shape[1];
    var abuff = new Uint8Array(w * h * 4);
    var bbuff = new Uint8Array(w * h * 4);
    a.bind();
    gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, abuff);
    b.bind();
    gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, bbuff);
    var sum = 0;

    for (var i = 0; i < abuff.length; i += 4) {
        var dx = abuff[i] - bbuff[i];
        var dy = abuff[i + 1] - bbuff[i + 1];
        var dz = abuff[i + 2] - bbuff[i + 2];
        sum += dx * dx + dy * dy + dz * dz;
    }

    sum /= 256;
    var avg = sum / w / h;
    return 100 * (1 - avg / 128);
}

function compareFBOsOnGPU(a, b) {
    var uNames, uVals, i;
    uNames = ["multY", "inputDim", "bufferA", "bufferB"];
    uVals = [1, a.shape[0], a.color[0], b.color[0]];
    drawGeneral(reducedFBs[0], diffReduceShader, flatVao, 6, uNames, uVals);

    for (i = 1; i < reducedFBs.length; i++) {
        uNames = ["multY", "inputDim", "buffer"];
        uVals = [1, reducedFBs[i - 1].shape[0], reducedFBs[i - 1].color[0]];
        drawGeneral(reducedFBs[i], avgReduceShader, flatVao, 6, uNames, uVals);
    }

    var buff = reducedFBs[reducedFBs.length - 1];
    var w = buff.shape[0];
    var uarr = new Uint8Array(w * w * 4);
    buff.bind();
    gl.readPixels(0, 0, w, w, gl.RGBA, gl.UNSIGNED_BYTE, uarr);
    var sum = 0;
    var mag = 255;

    for (i = 0; i < uarr.length; i += 4) {
        sum += uarr[i] + (uarr[i + 1] + uarr[i + 2] / mag) / mag;
    }

    var avg = 3 * sum / w / w;
    return 100 * (1 - avg / 128);
}

function exportData() {
    return "vert-xyz," + polys.vertArr.join() + "\n" + ",col-rgba," + polys.colArr.join();
}

function importData(s) {
    var curr, v = [], c = [];
    var arr = s.split(",");

    arr.forEach(function(s) {
        if (s == "vert-xyz") {
            curr = v;
        } else if (s == "col-rgba") {
            curr = c;
        } else {
            curr.push(parseFloat(s));
        }
    });

    if (v.length / 3 === c.length / 4) {
        polys.setArrays(v, c);
        vertBuffer.update(polys.vertArr);
        colBuffer.update(polys.colArr);

        if (refTexture) {
            drawData(scratchFB, perspective, null);
            var scoreFn = (compareonGPU ? compareFBOsOnGPU : compareFBOs);
            currentScore = scoreFn(referenceFB, scratchFB);
        }
    }
}

function logArr(arr) {
    console.log(arr.map(function(n) {
        return Math.round(n * 100);
    }));
}

if (0) {
    logArr();
    log();
}

function log(s) {
    console.log(s);
}

var proj = {
    init: init,
    runGeneration: runGeneration,
    paint: paint,
    paintReference: paintReference,
    paintScratchBuffer: paintScratchBuffer,
    exportData: exportData,
    importData: importData
};

Object.defineProperty(proj, "score", {
    get: function() {
        return currentScore;
    }
});

Object.defineProperty(proj, "numPolys", {
    get: function() {
        return polys.numVerts / 3;
    }
});

Object.defineProperty(proj, "compareonGPU", {
    get: function() {
        return compareonGPU;
    },

    set: function(b) {
        compareonGPU = !!b;
    }
});

Object.defineProperty(proj, "fewerPolysTolerance", {
    get: function() {
        return keepFewerPolysTolerance;
    },

    set: function(t) {
        keepFewerPolysTolerance = t;
        console.log(t);
    }
});

Object.defineProperty(proj, "useFlatPolys", {
    get: function() {
        return useFlatPolys;
    },

    set: function(b) {
        useFlatPolys = !!b;
        polys.setFlattenedness(useFlatPolys);
    }
});

function setAlphas(a, b) {
    minAlpha = a;
    maxAlpha = b;
    polys.setAlphaRange(a, b);
}

Object.defineProperty(proj, "minAlpha", {
    get: function() {
        return minAlpha;
    },

    set: function(a) {
        setAlphas(a, maxAlpha);
    }
});

Object.defineProperty(proj, "maxAlpha", {
    get: function() {
        return maxAlpha;
    },

    set: function(a) {
        setAlphas(minAlpha, a);
    }
});

module.exports = proj;
},{"./polydata":91,"gl-buffer":13,"gl-fbo":26,"gl-mat4":38,"gl-texture2d":77,"gl-vao":83,"glslify":85,"glslify/adapter.js":84}],3:[function(require,module,exports){
/* Zepto v1.1.4 - zepto event ajax form ie - zeptojs.com/license */

var Zepto = module.exports = (function() {
  var undefined, key, $, classList, emptyArray = [], slice = emptyArray.slice, filter = emptyArray.filter,
    document = window.document,
    elementDisplay = {}, classCache = {},
    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },
    fragmentRE = /^\s*<(\w+|!)[^>]*>/,
    singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
    rootNodeRE = /^(?:body|html)$/i,
    capitalRE = /([A-Z])/g,

    // special attributes that should be get/set via method calls
    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],

    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],
    table = document.createElement('table'),
    tableRow = document.createElement('tr'),
    containers = {
      'tr': document.createElement('tbody'),
      'tbody': table, 'thead': table, 'tfoot': table,
      'td': tableRow, 'th': tableRow,
      '*': document.createElement('div')
    },
    readyRE = /complete|loaded|interactive/,
    simpleSelectorRE = /^[\w-]*$/,
    class2type = {},
    toString = class2type.toString,
    zepto = {},
    camelize, uniq,
    tempParent = document.createElement('div'),
    propMap = {
      'tabindex': 'tabIndex',
      'readonly': 'readOnly',
      'for': 'htmlFor',
      'class': 'className',
      'maxlength': 'maxLength',
      'cellspacing': 'cellSpacing',
      'cellpadding': 'cellPadding',
      'rowspan': 'rowSpan',
      'colspan': 'colSpan',
      'usemap': 'useMap',
      'frameborder': 'frameBorder',
      'contenteditable': 'contentEditable'
    },
    isArray = Array.isArray ||
      function(object){ return object instanceof Array }

  zepto.matches = function(element, selector) {
    if (!selector || !element || element.nodeType !== 1) return false
    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector ||
                          element.oMatchesSelector || element.matchesSelector
    if (matchesSelector) return matchesSelector.call(element, selector)
    // fall back to performing a selector:
    var match, parent = element.parentNode, temp = !parent
    if (temp) (parent = tempParent).appendChild(element)
    match = ~zepto.qsa(parent, selector).indexOf(element)
    temp && tempParent.removeChild(element)
    return match
  }

  function type(obj) {
    return obj == null ? String(obj) :
      class2type[toString.call(obj)] || "object"
  }

  function isFunction(value) { return type(value) == "function" }
  function isWindow(obj)     { return obj != null && obj == obj.window }
  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
  }
  function likeArray(obj) { return typeof obj.length == 'number' }

  function compact(array) { return filter.call(array, function(item){ return item != null }) }
  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }
  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }
  function dasherize(str) {
    return str.replace(/::/g, '/')
           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
           .replace(/([a-z\d])([A-Z])/g, '$1_$2')
           .replace(/_/g, '-')
           .toLowerCase()
  }
  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }

  function classRE(name) {
    return name in classCache ?
      classCache[name] : (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))
  }

  function maybeAddPx(name, value) {
    return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
  }

  function defaultDisplay(nodeName) {
    var element, display
    if (!elementDisplay[nodeName]) {
      element = document.createElement(nodeName)
      document.body.appendChild(element)
      display = getComputedStyle(element, '').getPropertyValue("display")
      element.parentNode.removeChild(element)
      display == "none" && (display = "block")
      elementDisplay[nodeName] = display
    }
    return elementDisplay[nodeName]
  }

  function children(element) {
    return 'children' in element ?
      slice.call(element.children) :
      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })
  }

  // `$.zepto.fragment` takes a html string and an optional tag name
  // to generate DOM nodes nodes from the given html string.
  // The generated DOM nodes are returned as an array.
  // This function can be overriden in plugins for example to make
  // it compatible with browsers that don't support the DOM fully.
  zepto.fragment = function(html, name, properties) {
    var dom, nodes, container

    // A special case optimization for a single tag
    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))

    if (!dom) {
      if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>")
      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
      if (!(name in containers)) name = '*'

      container = containers[name]
      container.innerHTML = '' + html
      dom = $.each(slice.call(container.childNodes), function(){
        container.removeChild(this)
      })
    }

    if (isPlainObject(properties)) {
      nodes = $(dom)
      $.each(properties, function(key, value) {
        if (methodAttributes.indexOf(key) > -1) nodes[key](value)
        else nodes.attr(key, value)
      })
    }

    return dom
  }

  // `$.zepto.Z` swaps out the prototype of the given `dom` array
  // of nodes with `$.fn` and thus supplying all the Zepto functions
  // to the array. Note that `__proto__` is not supported on Internet
  // Explorer. This method can be overriden in plugins.
  zepto.Z = function(dom, selector) {
    dom = dom || []
    dom.__proto__ = $.fn
    dom.selector = selector || ''
    return dom
  }

  // `$.zepto.isZ` should return `true` if the given object is a Zepto
  // collection. This method can be overriden in plugins.
  zepto.isZ = function(object) {
    return object instanceof zepto.Z
  }

  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
  // takes a CSS selector and an optional context (and handles various
  // special cases).
  // This method can be overriden in plugins.
  zepto.init = function(selector, context) {
    var dom
    // If nothing given, return an empty Zepto collection
    if (!selector) return zepto.Z()
    // Optimize for string selectors
    else if (typeof selector == 'string') {
      selector = selector.trim()
      // If it's a html fragment, create nodes from it
      // Note: In both Chrome 21 and Firefox 15, DOM error 12
      // is thrown if the fragment doesn't begin with <
      if (selector[0] == '<' && fragmentRE.test(selector))
        dom = zepto.fragment(selector, RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // If it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // If a function is given, call it when the DOM is ready
    else if (isFunction(selector)) return $(document).ready(selector)
    // If a Zepto collection is given, just return it
    else if (zepto.isZ(selector)) return selector
    else {
      // normalize array if an array of nodes is given
      if (isArray(selector)) dom = compact(selector)
      // Wrap DOM nodes.
      else if (isObject(selector))
        dom = [selector], selector = null
      // If it's a html fragment, create nodes from it
      else if (fragmentRE.test(selector))
        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // And last but no least, if it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // create a new Zepto collection from the nodes found
    return zepto.Z(dom, selector)
  }

  // `$` will be the base `Zepto` object. When calling this
  // function just call `$.zepto.init, which makes the implementation
  // details of selecting nodes and creating Zepto collections
  // patchable in plugins.
  $ = function(selector, context){
    return zepto.init(selector, context)
  }

  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }

  // Copy all but undefined properties from one or more
  // objects to the `target` object.
  $.extend = function(target){
    var deep, args = slice.call(arguments, 1)
    if (typeof target == 'boolean') {
      deep = target
      target = args.shift()
    }
    args.forEach(function(arg){ extend(target, arg, deep) })
    return target
  }

  // `$.zepto.qsa` is Zepto's CSS selector implementation which
  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
  // This method can be overriden in plugins.
  zepto.qsa = function(element, selector){
    var found,
        maybeID = selector[0] == '#',
        maybeClass = !maybeID && selector[0] == '.',
        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked
        isSimple = simpleSelectorRE.test(nameOnly)
    return (isDocument(element) && isSimple && maybeID) ?
      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :
      (element.nodeType !== 1 && element.nodeType !== 9) ? [] :
      slice.call(
        isSimple && !maybeID ?
          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
          element.getElementsByTagName(selector) : // Or a tag
          element.querySelectorAll(selector) // Or it's not simple, and we need to query all
      )
  }

  function filtered(nodes, selector) {
    return selector == null ? $(nodes) : $(nodes).filter(selector)
  }

  $.contains = document.documentElement.contains ?
    function(parent, node) {
      return parent !== node && parent.contains(node)
    } :
    function(parent, node) {
      while (node && (node = node.parentNode))
        if (node === parent) return true
      return false
    }

  function funcArg(context, arg, idx, payload) {
    return isFunction(arg) ? arg.call(context, idx, payload) : arg
  }

  function setAttribute(node, name, value) {
    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)
  }

  // access className property while respecting SVGAnimatedString
  function className(node, value){
    var klass = node.className,
        svg   = klass && klass.baseVal !== undefined

    if (value === undefined) return svg ? klass.baseVal : klass
    svg ? (klass.baseVal = value) : (node.className = value)
  }

  // "true"  => true
  // "false" => false
  // "null"  => null
  // "42"    => 42
  // "42.5"  => 42.5
  // "08"    => "08"
  // JSON    => parse if valid
  // String  => self
  function deserializeValue(value) {
    var num
    try {
      return value ?
        value == "true" ||
        ( value == "false" ? false :
          value == "null" ? null :
          !/^0/.test(value) && !isNaN(num = Number(value)) ? num :
          /^[\[\{]/.test(value) ? $.parseJSON(value) :
          value )
        : value
    } catch(e) {
      return value
    }
  }

  $.type = type
  $.isFunction = isFunction
  $.isWindow = isWindow
  $.isArray = isArray
  $.isPlainObject = isPlainObject

  $.isEmptyObject = function(obj) {
    var name
    for (name in obj) return false
    return true
  }

  $.inArray = function(elem, array, i){
    return emptyArray.indexOf.call(array, elem, i)
  }

  $.camelCase = camelize
  $.trim = function(str) {
    return str == null ? "" : String.prototype.trim.call(str)
  }

  // plugin compatibility
  $.uuid = 0
  $.support = { }
  $.expr = { }

  $.map = function(elements, callback){
    var value, values = [], i, key
    if (likeArray(elements))
      for (i = 0; i < elements.length; i++) {
        value = callback(elements[i], i)
        if (value != null) values.push(value)
      }
    else
      for (key in elements) {
        value = callback(elements[key], key)
        if (value != null) values.push(value)
      }
    return flatten(values)
  }

  $.each = function(elements, callback){
    var i, key
    if (likeArray(elements)) {
      for (i = 0; i < elements.length; i++)
        if (callback.call(elements[i], i, elements[i]) === false) return elements
    } else {
      for (key in elements)
        if (callback.call(elements[key], key, elements[key]) === false) return elements
    }

    return elements
  }

  $.grep = function(elements, callback){
    return filter.call(elements, callback)
  }

  if (window.JSON) $.parseJSON = JSON.parse

  // Populate the class2type map
  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase()
  })

  // Define methods that will be available on all
  // Zepto collections
  $.fn = {
    // Because a collection acts like an array
    // copy over these useful array functions.
    forEach: emptyArray.forEach,
    reduce: emptyArray.reduce,
    push: emptyArray.push,
    sort: emptyArray.sort,
    indexOf: emptyArray.indexOf,
    concat: emptyArray.concat,

    // `map` and `slice` in the jQuery API work differently
    // from their array counterparts
    map: function(fn){
      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))
    },
    slice: function(){
      return $(slice.apply(this, arguments))
    },

    ready: function(callback){
      // need to check if document.body exists for IE as that browser reports
      // document ready when it hasn't yet created the body element
      if (readyRE.test(document.readyState) && document.body) callback($)
      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)
      return this
    },
    get: function(idx){
      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
    },
    toArray: function(){ return this.get() },
    size: function(){
      return this.length
    },
    remove: function(){
      return this.each(function(){
        if (this.parentNode != null)
          this.parentNode.removeChild(this)
      })
    },
    each: function(callback){
      emptyArray.every.call(this, function(el, idx){
        return callback.call(el, idx, el) !== false
      })
      return this
    },
    filter: function(selector){
      if (isFunction(selector)) return this.not(this.not(selector))
      return $(filter.call(this, function(element){
        return zepto.matches(element, selector)
      }))
    },
    add: function(selector,context){
      return $(uniq(this.concat($(selector,context))))
    },
    is: function(selector){
      return this.length > 0 && zepto.matches(this[0], selector)
    },
    not: function(selector){
      var nodes=[]
      if (isFunction(selector) && selector.call !== undefined)
        this.each(function(idx){
          if (!selector.call(this,idx)) nodes.push(this)
        })
      else {
        var excludes = typeof selector == 'string' ? this.filter(selector) :
          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
        this.forEach(function(el){
          if (excludes.indexOf(el) < 0) nodes.push(el)
        })
      }
      return $(nodes)
    },
    has: function(selector){
      return this.filter(function(){
        return isObject(selector) ?
          $.contains(this, selector) :
          $(this).find(selector).size()
      })
    },
    eq: function(idx){
      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)
    },
    first: function(){
      var el = this[0]
      return el && !isObject(el) ? el : $(el)
    },
    last: function(){
      var el = this[this.length - 1]
      return el && !isObject(el) ? el : $(el)
    },
    find: function(selector){
      var result, $this = this
      if (!selector) result = []
      else if (typeof selector == 'object')
        result = $(selector).filter(function(){
          var node = this
          return emptyArray.some.call($this, function(parent){
            return $.contains(parent, node)
          })
        })
      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))
      else result = this.map(function(){ return zepto.qsa(this, selector) })
      return result
    },
    closest: function(selector, context){
      var node = this[0], collection = false
      if (typeof selector == 'object') collection = $(selector)
      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))
        node = node !== context && !isDocument(node) && node.parentNode
      return $(node)
    },
    parents: function(selector){
      var ancestors = [], nodes = this
      while (nodes.length > 0)
        nodes = $.map(nodes, function(node){
          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
            ancestors.push(node)
            return node
          }
        })
      return filtered(ancestors, selector)
    },
    parent: function(selector){
      return filtered(uniq(this.pluck('parentNode')), selector)
    },
    children: function(selector){
      return filtered(this.map(function(){ return children(this) }), selector)
    },
    contents: function() {
      return this.map(function() { return slice.call(this.childNodes) })
    },
    siblings: function(selector){
      return filtered(this.map(function(i, el){
        return filter.call(children(el.parentNode), function(child){ return child!==el })
      }), selector)
    },
    empty: function(){
      return this.each(function(){ this.innerHTML = '' })
    },
    // `pluck` is borrowed from Prototype.js
    pluck: function(property){
      return $.map(this, function(el){ return el[property] })
    },
    show: function(){
      return this.each(function(){
        this.style.display == "none" && (this.style.display = '')
        if (getComputedStyle(this, '').getPropertyValue("display") == "none")
          this.style.display = defaultDisplay(this.nodeName)
      })
    },
    replaceWith: function(newContent){
      return this.before(newContent).remove()
    },
    wrap: function(structure){
      var func = isFunction(structure)
      if (this[0] && !func)
        var dom   = $(structure).get(0),
            clone = dom.parentNode || this.length > 1

      return this.each(function(index){
        $(this).wrapAll(
          func ? structure.call(this, index) :
            clone ? dom.cloneNode(true) : dom
        )
      })
    },
    wrapAll: function(structure){
      if (this[0]) {
        $(this[0]).before(structure = $(structure))
        var children
        // drill down to the inmost element
        while ((children = structure.children()).length) structure = children.first()
        $(structure).append(this)
      }
      return this
    },
    wrapInner: function(structure){
      var func = isFunction(structure)
      return this.each(function(index){
        var self = $(this), contents = self.contents(),
            dom  = func ? structure.call(this, index) : structure
        contents.length ? contents.wrapAll(dom) : self.append(dom)
      })
    },
    unwrap: function(){
      this.parent().each(function(){
        $(this).replaceWith($(this).children())
      })
      return this
    },
    clone: function(){
      return this.map(function(){ return this.cloneNode(true) })
    },
    hide: function(){
      return this.css("display", "none")
    },
    toggle: function(setting){
      return this.each(function(){
        var el = $(this)
        ;(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide()
      })
    },
    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },
    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },
    html: function(html){
      return 0 in arguments ?
        this.each(function(idx){
          var originHtml = this.innerHTML
          $(this).empty().append( funcArg(this, html, idx, originHtml) )
        }) :
        (0 in this ? this[0].innerHTML : null)
    },
    text: function(text){
      return 0 in arguments ?
        this.each(function(idx){
          var newText = funcArg(this, text, idx, this.textContent)
          this.textContent = newText == null ? '' : ''+newText
        }) :
        (0 in this ? this[0].textContent : null)
    },
    attr: function(name, value){
      var result
      return (typeof name == 'string' && !(1 in arguments)) ?
        (!this.length || this[0].nodeType !== 1 ? undefined :
          (!(result = this[0].getAttribute(name)) && name in this[0]) ? this[0][name] : result
        ) :
        this.each(function(idx){
          if (this.nodeType !== 1) return
          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])
          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))
        })
    },
    removeAttr: function(name){
      return this.each(function(){ this.nodeType === 1 && setAttribute(this, name) })
    },
    prop: function(name, value){
      name = propMap[name] || name
      return (1 in arguments) ?
        this.each(function(idx){
          this[name] = funcArg(this, value, idx, this[name])
        }) :
        (this[0] && this[0][name])
    },
    data: function(name, value){
      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()

      var data = (1 in arguments) ?
        this.attr(attrName, value) :
        this.attr(attrName)

      return data !== null ? deserializeValue(data) : undefined
    },
    val: function(value){
      return 0 in arguments ?
        this.each(function(idx){
          this.value = funcArg(this, value, idx, this.value)
        }) :
        (this[0] && (this[0].multiple ?
           $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :
           this[0].value)
        )
    },
    offset: function(coordinates){
      if (coordinates) return this.each(function(index){
        var $this = $(this),
            coords = funcArg(this, coordinates, index, $this.offset()),
            parentOffset = $this.offsetParent().offset(),
            props = {
              top:  coords.top  - parentOffset.top,
              left: coords.left - parentOffset.left
            }

        if ($this.css('position') == 'static') props['position'] = 'relative'
        $this.css(props)
      })
      if (!this.length) return null
      var obj = this[0].getBoundingClientRect()
      return {
        left: obj.left + window.pageXOffset,
        top: obj.top + window.pageYOffset,
        width: Math.round(obj.width),
        height: Math.round(obj.height)
      }
    },
    css: function(property, value){
      if (arguments.length < 2) {
        var element = this[0], computedStyle = getComputedStyle(element, '')
        if(!element) return
        if (typeof property == 'string')
          return element.style[camelize(property)] || computedStyle.getPropertyValue(property)
        else if (isArray(property)) {
          var props = {}
          $.each(isArray(property) ? property: [property], function(_, prop){
            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))
          })
          return props
        }
      }

      var css = ''
      if (type(property) == 'string') {
        if (!value && value !== 0)
          this.each(function(){ this.style.removeProperty(dasherize(property)) })
        else
          css = dasherize(property) + ":" + maybeAddPx(property, value)
      } else {
        for (key in property)
          if (!property[key] && property[key] !== 0)
            this.each(function(){ this.style.removeProperty(dasherize(key)) })
          else
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
      }

      return this.each(function(){ this.style.cssText += ';' + css })
    },
    index: function(element){
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])
    },
    hasClass: function(name){
      if (!name) return false
      return emptyArray.some.call(this, function(el){
        return this.test(className(el))
      }, classRE(name))
    },
    addClass: function(name){
      if (!name) return this
      return this.each(function(idx){
        classList = []
        var cls = className(this), newName = funcArg(this, name, idx, cls)
        newName.split(/\s+/g).forEach(function(klass){
          if (!$(this).hasClass(klass)) classList.push(klass)
        }, this)
        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "))
      })
    },
    removeClass: function(name){
      return this.each(function(idx){
        if (name === undefined) return className(this, '')
        classList = className(this)
        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass){
          classList = classList.replace(classRE(klass), " ")
        })
        className(this, classList.trim())
      })
    },
    toggleClass: function(name, when){
      if (!name) return this
      return this.each(function(idx){
        var $this = $(this), names = funcArg(this, name, idx, className(this))
        names.split(/\s+/g).forEach(function(klass){
          (when === undefined ? !$this.hasClass(klass) : when) ?
            $this.addClass(klass) : $this.removeClass(klass)
        })
      })
    },
    scrollTop: function(value){
      if (!this.length) return
      var hasScrollTop = 'scrollTop' in this[0]
      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset
      return this.each(hasScrollTop ?
        function(){ this.scrollTop = value } :
        function(){ this.scrollTo(this.scrollX, value) })
    },
    scrollLeft: function(value){
      if (!this.length) return
      var hasScrollLeft = 'scrollLeft' in this[0]
      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset
      return this.each(hasScrollLeft ?
        function(){ this.scrollLeft = value } :
        function(){ this.scrollTo(value, this.scrollY) })
    },
    position: function() {
      if (!this.length) return

      var elem = this[0],
        // Get *real* offsetParent
        offsetParent = this.offsetParent(),
        // Get correct offsets
        offset       = this.offset(),
        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0
      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0

      // Add offsetParent borders
      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0
      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      }
    },
    offsetParent: function() {
      return this.map(function(){
        var parent = this.offsetParent || document.body
        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static")
          parent = parent.offsetParent
        return parent
      })
    }
  }

  // for now
  $.fn.detach = $.fn.remove

  // Generate the `width` and `height` functions
  ;['width', 'height'].forEach(function(dimension){
    var dimensionProperty =
      dimension.replace(/./, function(m){ return m[0].toUpperCase() })

    $.fn[dimension] = function(value){
      var offset, el = this[0]
      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :
        isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :
        (offset = this.offset()) && offset[dimension]
      else return this.each(function(idx){
        el = $(this)
        el.css(dimension, funcArg(this, value, idx, el[dimension]()))
      })
    }
  })

  function traverseNode(node, fun) {
    fun(node)
    for (var i = 0, len = node.childNodes.length; i < len; i++)
      traverseNode(node.childNodes[i], fun)
  }

  // Generate the `after`, `prepend`, `before`, `append`,
  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
  adjacencyOperators.forEach(function(operator, operatorIndex) {
    var inside = operatorIndex % 2 //=> prepend, append

    $.fn[operator] = function(){
      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
      var argType, nodes = $.map(arguments, function(arg) {
            argType = type(arg)
            return argType == "object" || argType == "array" || arg == null ?
              arg : zepto.fragment(arg)
          }),
          parent, copyByClone = this.length > 1
      if (nodes.length < 1) return this

      return this.each(function(_, target){
        parent = inside ? target : target.parentNode

        // convert all methods to a "before" operation
        target = operatorIndex == 0 ? target.nextSibling :
                 operatorIndex == 1 ? target.firstChild :
                 operatorIndex == 2 ? target :
                 null

        var parentInDocument = $.contains(document.documentElement, parent)

        nodes.forEach(function(node){
          if (copyByClone) node = node.cloneNode(true)
          else if (!parent) return $(node).remove()

          parent.insertBefore(node, target)
          if (parentInDocument) traverseNode(node, function(el){
            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&
               (!el.type || el.type === 'text/javascript') && !el.src)
              window['eval'].call(window, el.innerHTML)
          })
        })
      })
    }

    // after    => insertAfter
    // prepend  => prependTo
    // before   => insertBefore
    // append   => appendTo
    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){
      $(html)[operator](this)
      return this
    }
  })

  zepto.Z.prototype = $.fn

  // Export internal API functions in the `$.zepto` namespace
  zepto.uniq = uniq
  zepto.deserializeValue = deserializeValue
  $.zepto = zepto

  return $
})()




;(function($){
  var _zid = 1, undefined,
      slice = Array.prototype.slice,
      isFunction = $.isFunction,
      isString = function(obj){ return typeof obj == 'string' },
      handlers = {},
      specialEvents={},
      focusinSupported = 'onfocusin' in window,
      focus = { focus: 'focusin', blur: 'focusout' },
      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }

  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'

  function zid(element) {
    return element._zid || (element._zid = _zid++)
  }
  function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[zid(element)] || []).filter(function(handler) {
      return handler
        && (!event.e  || handler.e == event.e)
        && (!event.ns || matcher.test(handler.ns))
        && (!fn       || zid(handler.fn) === zid(fn))
        && (!selector || handler.sel == selector)
    })
  }
  function parse(event) {
    var parts = ('' + event).split('.')
    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}
  }
  function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
  }

  function eventCapture(handler, captureSetting) {
    return handler.del &&
      (!focusinSupported && (handler.e in focus)) ||
      !!captureSetting
  }

  function realEvent(type) {
    return hover[type] || (focusinSupported && focus[type]) || type
  }

  function add(element, events, fn, data, selector, delegator, capture){
    var id = zid(element), set = (handlers[id] || (handlers[id] = []))
    events.split(/\s/).forEach(function(event){
      if (event == 'ready') return $(document).ready(fn)
      var handler   = parse(event)
      handler.fn    = fn
      handler.sel   = selector
      // emulate mouseenter, mouseleave
      if (handler.e in hover) fn = function(e){
        var related = e.relatedTarget
        if (!related || (related !== this && !$.contains(this, related)))
          return handler.fn.apply(this, arguments)
      }
      handler.del   = delegator
      var callback  = delegator || fn
      handler.proxy = function(e){
        e = compatible(e)
        if (e.isImmediatePropagationStopped()) return
        e.data = data
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
        if (result === false) e.preventDefault(), e.stopPropagation()
        return result
      }
      handler.i = set.length
      set.push(handler)
      if ('addEventListener' in element)
        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
    })
  }
  function remove(element, events, fn, selector, capture){
    var id = zid(element)
    ;(events || '').split(/\s/).forEach(function(event){
      findHandlers(element, event, fn, selector).forEach(function(handler){
        delete handlers[id][handler.i]
      if ('removeEventListener' in element)
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
      })
    })
  }

  $.event = { add: add, remove: remove }

  $.proxy = function(fn, context) {
    var args = (2 in arguments) && slice.call(arguments, 2)
    if (isFunction(fn)) {
      var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }
      proxyFn._zid = zid(fn)
      return proxyFn
    } else if (isString(context)) {
      if (args) {
        args.unshift(fn[context], fn)
        return $.proxy.apply(null, args)
      } else {
        return $.proxy(fn[context], fn)
      }
    } else {
      throw new TypeError("expected function")
    }
  }

  $.fn.bind = function(event, data, callback){
    return this.on(event, data, callback)
  }
  $.fn.unbind = function(event, callback){
    return this.off(event, callback)
  }
  $.fn.one = function(event, selector, data, callback){
    return this.on(event, selector, data, callback, 1)
  }

  var returnTrue = function(){return true},
      returnFalse = function(){return false},
      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
      eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      }

  function compatible(event, source) {
    if (source || !event.isDefaultPrevented) {
      source || (source = event)

      $.each(eventMethods, function(name, predicate) {
        var sourceMethod = source[name]
        event[name] = function(){
          this[predicate] = returnTrue
          return sourceMethod && sourceMethod.apply(source, arguments)
        }
        event[predicate] = returnFalse
      })

      if (source.defaultPrevented !== undefined ? source.defaultPrevented :
          'returnValue' in source ? source.returnValue === false :
          source.getPreventDefault && source.getPreventDefault())
        event.isDefaultPrevented = returnTrue
    }
    return event
  }

  function createProxy(event) {
    var key, proxy = { originalEvent: event }
    for (key in event)
      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]

    return compatible(proxy, event)
  }

  $.fn.delegate = function(selector, event, callback){
    return this.on(event, selector, callback)
  }
  $.fn.undelegate = function(selector, event, callback){
    return this.off(event, selector, callback)
  }

  $.fn.live = function(event, callback){
    $(document.body).delegate(this.selector, event, callback)
    return this
  }
  $.fn.die = function(event, callback){
    $(document.body).undelegate(this.selector, event, callback)
    return this
  }

  $.fn.on = function(event, selector, data, callback, one){
    var autoRemove, delegator, $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.on(type, selector, data, fn, one)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = data, data = selector, selector = undefined
    if (isFunction(data) || data === false)
      callback = data, data = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(_, element){
      if (one) autoRemove = function(e){
        remove(element, e.type, callback)
        return callback.apply(this, arguments)
      }

      if (selector) delegator = function(e){
        var evt, match = $(e.target).closest(selector, element).get(0)
        if (match && match !== element) {
          evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})
          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))
        }
      }

      add(element, event, callback, data, selector, delegator || autoRemove)
    })
  }
  $.fn.off = function(event, selector, callback){
    var $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.off(type, selector, fn)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = selector, selector = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(){
      remove(this, event, callback, selector)
    })
  }

  $.fn.trigger = function(event, args){
    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)
    event._args = args
    return this.each(function(){
      // items in the collection might not be DOM elements
      if('dispatchEvent' in this) this.dispatchEvent(event)
      else $(this).triggerHandler(event, args)
    })
  }

  // triggers event handlers on current element just as if an event occurred,
  // doesn't trigger an actual event, doesn't bubble
  $.fn.triggerHandler = function(event, args){
    var e, result
    this.each(function(i, element){
      e = createProxy(isString(event) ? $.Event(event) : event)
      e._args = args
      e.target = element
      $.each(findHandlers(element, event.type || event), function(i, handler){
        result = handler.proxy(e)
        if (e.isImmediatePropagationStopped()) return false
      })
    })
    return result
  }

  // shortcut methods for `.bind(event, fn)` for each event type
  ;('focusin focusout load resize scroll unload click dblclick '+
  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+
  'change select keydown keypress keyup error').split(' ').forEach(function(event) {
    $.fn[event] = function(callback) {
      return callback ?
        this.bind(event, callback) :
        this.trigger(event)
    }
  })

  ;['focus', 'blur'].forEach(function(name) {
    $.fn[name] = function(callback) {
      if (callback) this.bind(name, callback)
      else this.each(function(){
        try { this[name]() }
        catch(e) {}
      })
      return this
    }
  })

  $.Event = function(type, props) {
    if (!isString(type)) props = type, type = props.type
    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true
    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])
    event.initEvent(type, bubbles, true)
    return compatible(event)
  }

})(Zepto)

;(function($){
  var jsonpID = 0,
      document = window.document,
      key,
      name,
      rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      scriptTypeRE = /^(?:text|application)\/javascript/i,
      xmlTypeRE = /^(?:text|application)\/xml/i,
      jsonType = 'application/json',
      htmlType = 'text/html',
      blankRE = /^\s*$/

  // trigger a custom event and return false if it was cancelled
  function triggerAndReturn(context, eventName, data) {
    var event = $.Event(eventName)
    $(context).trigger(event, data)
    return !event.isDefaultPrevented()
  }

  // trigger an Ajax "global" event
  function triggerGlobal(settings, context, eventName, data) {
    if (settings.global) return triggerAndReturn(context || document, eventName, data)
  }

  // Number of active Ajax requests
  $.active = 0

  function ajaxStart(settings) {
    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')
  }
  function ajaxStop(settings) {
    if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')
  }

  // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
  function ajaxBeforeSend(xhr, settings) {
    var context = settings.context
    if (settings.beforeSend.call(context, xhr, settings) === false ||
        triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)
      return false

    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])
  }
  function ajaxSuccess(data, xhr, settings, deferred) {
    var context = settings.context, status = 'success'
    settings.success.call(context, data, status, xhr)
    if (deferred) deferred.resolveWith(context, [data, status, xhr])
    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])
    ajaxComplete(status, xhr, settings)
  }
  // type: "timeout", "error", "abort", "parsererror"
  function ajaxError(error, type, xhr, settings, deferred) {
    var context = settings.context
    settings.error.call(context, xhr, type, error)
    if (deferred) deferred.rejectWith(context, [xhr, type, error])
    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])
    ajaxComplete(type, xhr, settings)
  }
  // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
  function ajaxComplete(status, xhr, settings) {
    var context = settings.context
    settings.complete.call(context, xhr, status)
    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])
    ajaxStop(settings)
  }

  // Empty function, used as default callback
  function empty() {}

  $.ajaxJSONP = function(options, deferred){
    if (!('type' in options)) return $.ajax(options)

    var _callbackName = options.jsonpCallback,
      callbackName = ($.isFunction(_callbackName) ?
        _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),
      script = document.createElement('script'),
      originalCallback = window[callbackName],
      responseData,
      abort = function(errorType) {
        $(script).triggerHandler('error', errorType || 'abort')
      },
      xhr = { abort: abort }, abortTimeout

    if (deferred) deferred.promise(xhr)

    $(script).on('load error', function(e, errorType){
      clearTimeout(abortTimeout)
      $(script).off().remove()

      if (e.type == 'error' || !responseData) {
        ajaxError(null, errorType || 'error', xhr, options, deferred)
      } else {
        ajaxSuccess(responseData[0], xhr, options, deferred)
      }

      window[callbackName] = originalCallback
      if (responseData && $.isFunction(originalCallback))
        originalCallback(responseData[0])

      originalCallback = responseData = undefined
    })

    if (ajaxBeforeSend(xhr, options) === false) {
      abort('abort')
      return xhr
    }

    window[callbackName] = function(){
      responseData = arguments
    }

    script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName)
    document.head.appendChild(script)

    if (options.timeout > 0) abortTimeout = setTimeout(function(){
      abort('timeout')
    }, options.timeout)

    return xhr
  }

  $.ajaxSettings = {
    // Default type of request
    type: 'GET',
    // Callback that is executed before request
    beforeSend: empty,
    // Callback that is executed if the request succeeds
    success: empty,
    // Callback that is executed the the server drops error
    error: empty,
    // Callback that is executed on request complete (both: error and success)
    complete: empty,
    // The context for the callbacks
    context: null,
    // Whether to trigger "global" Ajax events
    global: true,
    // Transport
    xhr: function () {
      return new window.XMLHttpRequest()
    },
    // MIME types mapping
    // IIS returns Javascript as "application/x-javascript"
    accepts: {
      script: 'text/javascript, application/javascript, application/x-javascript',
      json:   jsonType,
      xml:    'application/xml, text/xml',
      html:   htmlType,
      text:   'text/plain'
    },
    // Whether the request is to another domain
    crossDomain: false,
    // Default timeout
    timeout: 0,
    // Whether data should be serialized to string
    processData: true,
    // Whether the browser should be allowed to cache GET responses
    cache: true
  }

  function mimeToDataType(mime) {
    if (mime) mime = mime.split(';', 2)[0]
    return mime && ( mime == htmlType ? 'html' :
      mime == jsonType ? 'json' :
      scriptTypeRE.test(mime) ? 'script' :
      xmlTypeRE.test(mime) && 'xml' ) || 'text'
  }

  function appendQuery(url, query) {
    if (query == '') return url
    return (url + '&' + query).replace(/[&?]{1,2}/, '?')
  }

  // serialize payload and append it to the URL for GET requests
  function serializeData(options) {
    if (options.processData && options.data && $.type(options.data) != "string")
      options.data = $.param(options.data, options.traditional)
    if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))
      options.url = appendQuery(options.url, options.data), options.data = undefined
  }

  $.ajax = function(options){
    var settings = $.extend({}, options || {}),
        deferred = $.Deferred && $.Deferred()
    for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]

    ajaxStart(settings)

    if (!settings.crossDomain) settings.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(settings.url) &&
      RegExp.$2 != window.location.host

    if (!settings.url) settings.url = window.location.toString()
    serializeData(settings)

    var dataType = settings.dataType, hasPlaceholder = /\?.+=\?/.test(settings.url)
    if (hasPlaceholder) dataType = 'jsonp'

    if (settings.cache === false || (
         (!options || options.cache !== true) &&
         ('script' == dataType || 'jsonp' == dataType)
        ))
      settings.url = appendQuery(settings.url, '_=' + Date.now())

    if ('jsonp' == dataType) {
      if (!hasPlaceholder)
        settings.url = appendQuery(settings.url,
          settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')
      return $.ajaxJSONP(settings, deferred)
    }

    var mime = settings.accepts[dataType],
        headers = { },
        setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },
        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
        xhr = settings.xhr(),
        nativeSetHeader = xhr.setRequestHeader,
        abortTimeout

    if (deferred) deferred.promise(xhr)

    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')
    setHeader('Accept', mime || '*/*')
    if (mime = settings.mimeType || mime) {
      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]
      xhr.overrideMimeType && xhr.overrideMimeType(mime)
    }
    if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))
      setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')

    if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name])
    xhr.setRequestHeader = setHeader

    xhr.onreadystatechange = function(){
      if (xhr.readyState == 4) {
        xhr.onreadystatechange = empty
        clearTimeout(abortTimeout)
        var result, error = false
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))
          result = xhr.responseText

          try {
            // http://perfectionkills.com/global-eval-what-are-the-options/
            if (dataType == 'script')    (1,eval)(result)
            else if (dataType == 'xml')  result = xhr.responseXML
            else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)
          } catch (e) { error = e }

          if (error) ajaxError(error, 'parsererror', xhr, settings, deferred)
          else ajaxSuccess(result, xhr, settings, deferred)
        } else {
          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)
        }
      }
    }

    if (ajaxBeforeSend(xhr, settings) === false) {
      xhr.abort()
      ajaxError(null, 'abort', xhr, settings, deferred)
      return xhr
    }

    if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]

    var async = 'async' in settings ? settings.async : true
    xhr.open(settings.type, settings.url, async, settings.username, settings.password)

    for (name in headers) nativeSetHeader.apply(xhr, headers[name])

    if (settings.timeout > 0) abortTimeout = setTimeout(function(){
        xhr.onreadystatechange = empty
        xhr.abort()
        ajaxError(null, 'timeout', xhr, settings, deferred)
      }, settings.timeout)

    // avoid sending empty string (#319)
    xhr.send(settings.data ? settings.data : null)
    return xhr
  }

  // handle optional data/success arguments
  function parseArguments(url, data, success, dataType) {
    if ($.isFunction(data)) dataType = success, success = data, data = undefined
    if (!$.isFunction(success)) dataType = success, success = undefined
    return {
      url: url
    , data: data
    , success: success
    , dataType: dataType
    }
  }

  $.get = function(/* url, data, success, dataType */){
    return $.ajax(parseArguments.apply(null, arguments))
  }

  $.post = function(/* url, data, success, dataType */){
    var options = parseArguments.apply(null, arguments)
    options.type = 'POST'
    return $.ajax(options)
  }

  $.getJSON = function(/* url, data, success */){
    var options = parseArguments.apply(null, arguments)
    options.dataType = 'json'
    return $.ajax(options)
  }

  $.fn.load = function(url, data, success){
    if (!this.length) return this
    var self = this, parts = url.split(/\s/), selector,
        options = parseArguments(url, data, success),
        callback = options.success
    if (parts.length > 1) options.url = parts[0], selector = parts[1]
    options.success = function(response){
      self.html(selector ?
        $('<div>').html(response.replace(rscript, "")).find(selector)
        : response)
      callback && callback.apply(self, arguments)
    }
    $.ajax(options)
    return this
  }

  var escape = encodeURIComponent

  function serialize(params, obj, traditional, scope){
    var type, array = $.isArray(obj), hash = $.isPlainObject(obj)
    $.each(obj, function(key, value) {
      type = $.type(value)
      if (scope) key = traditional ? scope :
        scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'
      // handle data in serializeArray() format
      if (!scope && array) params.add(value.name, value.value)
      // recurse into nested objects
      else if (type == "array" || (!traditional && type == "object"))
        serialize(params, value, traditional, key)
      else params.add(key, value)
    })
  }

  $.param = function(obj, traditional){
    var params = []
    params.add = function(k, v){ this.push(escape(k) + '=' + escape(v)) }
    serialize(params, obj, traditional)
    return params.join('&').replace(/%20/g, '+')
  }
})(Zepto)

;(function($){
  $.fn.serializeArray = function() {
    var result = [], el
    $([].slice.call(this.get(0).elements)).each(function(){
      el = $(this)
      var type = el.attr('type')
      if (this.nodeName.toLowerCase() != 'fieldset' &&
        !this.disabled && type != 'submit' && type != 'reset' && type != 'button' &&
        ((type != 'radio' && type != 'checkbox') || this.checked))
        result.push({
          name: el.attr('name'),
          value: el.val()
        })
    })
    return result
  }

  $.fn.serialize = function(){
    var result = []
    this.serializeArray().forEach(function(elm){
      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))
    })
    return result.join('&')
  }

  $.fn.submit = function(callback) {
    if (callback) this.bind('submit', callback)
    else if (this.length) {
      var event = $.Event('submit')
      this.eq(0).trigger(event)
      if (!event.isDefaultPrevented()) this.get(0).submit()
    }
    return this
  }

})(Zepto)

;(function($){
  // __proto__ doesn't exist on IE<11, so redefine
  // the Z function to use object extension instead
  if (!('__proto__' in {})) {
    $.extend($.zepto, {
      Z: function(dom, selector){
        dom = dom || []
        $.extend(dom, $.fn)
        dom.selector = selector || ''
        dom.__Z = true
        return dom
      },
      // this is a kludge but works
      isZ: function(object){
        return $.type(object) === 'array' && '__Z' in object
      }
    })
  }

  // getComputedStyle shouldn't freak out when called
  // without a valid element as argument
  try {
    getComputedStyle(undefined)
  } catch(e) {
    var nativeGetComputedStyle = getComputedStyle;
    window.getComputedStyle = function(element){
      try {
        return nativeGetComputedStyle(element)
      } catch(e) {
        return null
      }
    }
  }
})(Zepto)

},{}],4:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":5,"ieee754":6,"is-array":7}],5:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],6:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],7:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],9:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],10:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],11:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],12:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":11,"_process":10,"inherits":9}],13:[function(require,module,exports){
"use strict"

var pool = require("typedarray-pool")
var ops = require("ndarray-ops")
var ndarray = require("ndarray")
var webglew = require("webglew")

var SUPPORTED_TYPES = [
  "uint8",
  "uint8_clamped",
  "uint16",
  "uint32",
  "int8",
  "int16",
  "int32",
  "float32" ]

function GLBuffer(gl, type, handle, length, usage) {
  this.gl = gl
  this.type = type
  this.handle = handle
  this.length = length
  this.usage = usage
}

var proto = GLBuffer.prototype

proto.bind = function() {
  this.gl.bindBuffer(this.type, this.handle)
}

proto.unbind = function() {
  this.gl.bindBuffer(this.type, null)
}

proto.dispose = function() {
  this.gl.deleteBuffer(this.handle)
}

function updateTypeArray(gl, type, len, usage, data, offset) {
  var dataLen = data.length * data.BYTES_PER_ELEMENT 
  if(offset < 0) {
    gl.bufferData(type, data, usage)
    return dataLen
  }
  if(dataLen + offset > len) {
    throw new Error("gl-buffer: If resizing buffer, must not specify offset")
  }
  gl.bufferSubData(type, offset, data)
  return len
}

function makeScratchTypeArray(array, dtype) {
  var res = pool.malloc(array.length, dtype)
  var n = array.length
  for(var i=0; i<n; ++i) {
    res[i] = array[i]
  }
  return res
}

function isPacked(shape, stride) {
  var n = 1
  for(var i=stride.length-1; i>=0; --i) {
    if(stride[i] !== n) {
      return false
    }
    n *= shape[i]
  }
  return true
}

proto.update = function(array, offset) {
  if(typeof offset !== "number") {
    offset = -1
  }
  this.bind()
  if(typeof array === "object" && typeof array.shape !== "undefined") { //ndarray
    var dtype = array.dtype
    if(SUPPORTED_TYPES.indexOf(dtype) < 0) {
      dtype = "float32"
    }
    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
      var wgl = webglew(this.gl)
      var ext = wgl.OES_element_index_uint
      if(ext && dtype !== "uint16") {
        dtype = "uint32"
      } else {
        dtype = "uint16"
      }
    }
    if(dtype === array.dtype && isPacked(array.shape, array.stride)) {
      if(array.offset === 0 && array.data.length === array.shape[0]) {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset)
      } else {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset)
      }
    } else {
      var tmp = pool.malloc(array.size, dtype)
      var ndt = ndarray(tmp, array.shape)
      ops.assign(ndt, array)
      if(offset < 0) {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset)  
      } else {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset)  
      }
      pool.free(tmp)
    }
  } else if(Array.isArray(array)) { //Vanilla array
    var t
    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
      t = makeScratchTypeArray(array, "uint16")
    } else {
      t = makeScratchTypeArray(array, "float32")
    }
    if(offset < 0) {
      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset)
    } else {
      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset)
    }
    pool.free(t)
  } else if(typeof array === "object" && typeof array.length === "number") { //Typed array
    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset)
  } else if(typeof array === "number" || array === undefined) { //Number/default
    if(offset >= 0) {
      throw new Error("gl-buffer: Cannot specify offset when resizing buffer")
    }
    array = array | 0
    if(array <= 0) {
      array = 1
    }
    this.gl.bufferData(this.type, array|0, this.usage)
    this.length = array
  } else { //Error, case should not happen
    throw new Error("gl-buffer: Invalid data type")
  }
}

function createBuffer(gl, data, type, usage) {
  webglew(gl)
  type = type || gl.ARRAY_BUFFER
  usage = usage || gl.DYNAMIC_DRAW
  if(type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {
    throw new Error("gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER")
  }
  if(usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {
    throw new Error("gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW")
  }
  var handle = gl.createBuffer()
  var result = new GLBuffer(gl, type, handle, 0, usage)
  result.update(data)
  return result
}

module.exports = createBuffer
},{"ndarray":19,"ndarray-ops":14,"typedarray-pool":23,"webglew":25}],14:[function(require,module,exports){
"use strict"

var compile = require("cwise-compiler")

var EmptyProc = {
  body: "",
  args: [],
  thisVars: [],
  localVars: []
}

function fixup(x) {
  if(!x) {
    return EmptyProc
  }
  for(var i=0; i<x.args.length; ++i) {
    var a = x.args[i]
    if(i === 0) {
      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }
    } else {
      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}
    }
  }
  if(!x.thisVars) {
    x.thisVars = []
  }
  if(!x.localVars) {
    x.localVars = []
  }
  return x
}

function pcompile(user_args) {
  return compile({
    args:     user_args.args,
    pre:      fixup(user_args.pre),
    body:     fixup(user_args.body),
    post:     fixup(user_args.proc),
    funcName: user_args.funcName
  })
}

function makeOp(user_args) {
  var args = []
  for(var i=0; i<user_args.args.length; ++i) {
    args.push("a"+i)
  }
  var wrapper = new Function("P", [
    "return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"
  ].join(""))
  return wrapper(pcompile(user_args))
}

var assign_ops = {
  add:  "+",
  sub:  "-",
  mul:  "*",
  div:  "/",
  mod:  "%",
  band: "&",
  bor:  "|",
  bxor: "^",
  lshift: "<<",
  rshift: ">>",
  rrshift: ">>>"
}
;(function(){
  for(var id in assign_ops) {
    var op = assign_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a","b","c"],
             body: "a=b"+op+"c"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array","array"],
      body: {args:["a","b"],
             body:"a"+op+"=b"},
      rvalue: true,
      funcName: id+"eq"
    })
    exports[id+"s"] = makeOp({
      args: ["array", "array", "scalar"],
      body: {args:["a","b","s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"seq"] = makeOp({
      args: ["array","scalar"],
      body: {args:["a","s"],
             body:"a"+op+"=s"},
      rvalue: true,
      funcName: id+"seq"
    })
  }
})();

var unary_ops = {
  not: "!",
  bnot: "~",
  neg: "-",
  recip: "1.0/"
}
;(function(){
  for(var id in unary_ops) {
    var op = unary_ops[id]
    exports[id] = makeOp({
      args: ["array", "array"],
      body: {args:["a","b"],
             body:"a="+op+"b"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array"],
      body: {args:["a"],
             body:"a="+op+"a"},
      rvalue: true,
      count: 2,
      funcName: id+"eq"
    })
  }
})();

var binary_ops = {
  and: "&&",
  or: "||",
  eq: "===",
  neq: "!==",
  lt: "<",
  gt: ">",
  leq: "<=",
  geq: ">="
}
;(function() {
  for(var id in binary_ops) {
    var op = binary_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a", "b", "c"],
             body:"a=b"+op+"c"},
      funcName: id
    })
    exports[id+"s"] = makeOp({
      args: ["array","array","scalar"],
      body: {args:["a", "b", "s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"eq"] = makeOp({
      args: ["array", "array"],
      body: {args:["a", "b"],
             body:"a=a"+op+"b"},
      rvalue:true,
      count:2,
      funcName: id+"eq"
    })
    exports[id+"seq"] = makeOp({
      args: ["array", "scalar"],
      body: {args:["a","s"],
             body:"a=a"+op+"s"},
      rvalue:true,
      count:2,
      funcName: id+"seq"
    })
  }
})();

var math_unary = [
  "abs",
  "acos",
  "asin",
  "atan",
  "ceil",
  "cos",
  "exp",
  "floor",
  "log",
  "round",
  "sin",
  "sqrt",
  "tan"
]
;(function() {
  for(var i=0; i<math_unary.length; ++i) {
    var f = math_unary[i]
    exports[f] = makeOp({
                    args: ["array", "array"],
                    pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                    body: {args:["a","b"], body:"a=this_f(b)", thisVars:["this_f"]},
                    funcName: f
                  })
    exports[f+"eq"] = makeOp({
                      args: ["array"],
                      pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                      body: {args: ["a"], body:"a=this_f(a)", thisVars:["this_f"]},
                      rvalue: true,
                      count: 2,
                      funcName: f+"eq"
                    })
  }
})();

var math_comm = [
  "max",
  "min",
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_comm.length; ++i) {
    var f= math_comm[i]
    exports[f] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f
                })
    exports[f+"s"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f+"s"
                  })
    exports[f+"eq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"eq"
                  })
    exports[f+"seq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"seq"
                  })
  }
})();

var math_noncomm = [
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_noncomm.length; ++i) {
    var f= math_noncomm[i]
    exports[f+"op"] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"op"
                })
    exports[f+"ops"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"ops"
                  })
    exports[f+"opeq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"opeq"
                  })
    exports[f+"opseq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"opseq"
                  })
  }
})();

exports.any = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "if(a){return true}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return false"},
  funcName: "any"
})

exports.all = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1}], body: "if(!x){return false}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "all"
})

exports.sum = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s+=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "sum"
})

exports.prod = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=1"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s*=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "prod"
})

exports.norm2squared = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm2squared"
})
  
exports.norm2 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return Math.sqrt(this_s)"},
  funcName: "norm2"
})
  

exports.norminf = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:4}], body:"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norminf"
})

exports.norm1 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:3}], body: "this_s+=a<0?-a:a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm1"
})

exports.sup = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=-Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.inf = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.argmin = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})

exports.argmax = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})  

exports.random = makeOp({
  args: ["array"],
  pre: {args:[], body:"this_f=Math.random", thisVars:["this_f"]},
  body: {args: ["a"], body:"a=this_f()", thisVars:["this_f"]},
  funcName: "random"
})

exports.assign = makeOp({
  args:["array", "array"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assign" })

exports.assigns = makeOp({
  args:["array", "scalar"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assigns" })


exports.equals = compile({
  args:["array", "array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1},
               {name:"y", lvalue:false, rvalue:true, count:1}], 
        body: "if(x!==y){return false}", 
        localVars: [], 
        thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "equals"
})



},{"cwise-compiler":15}],15:[function(require,module,exports){
"use strict"

var createThunk = require("./lib/thunk.js")

function Procedure() {
  this.argTypes = []
  this.shimArgs = []
  this.arrayArgs = []
  this.scalarArgs = []
  this.offsetArgs = []
  this.offsetArgIndex = []
  this.indexArgs = []
  this.shapeArgs = []
  this.funcName = ""
  this.pre = null
  this.body = null
  this.post = null
  this.debug = false
}

function compileCwise(user_args) {
  //Create procedure
  var proc = new Procedure()
  
  //Parse blocks
  proc.pre    = user_args.pre
  proc.body   = user_args.body
  proc.post   = user_args.post

  //Parse arguments
  var proc_args = user_args.args.slice(0)
  proc.argTypes = proc_args
  for(var i=0; i<proc_args.length; ++i) {
    var arg_type = proc_args[i]
    if(arg_type === "array") {
      proc.arrayArgs.push(i)
      proc.shimArgs.push("array" + i)
      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {
        throw new Error("cwise: pre() block may not reference array args")
      }
      if(i < proc.post.args.length && proc.post.args[i].count>0) {
        throw new Error("cwise: post() block may not reference array args")
      }
    } else if(arg_type === "scalar") {
      proc.scalarArgs.push(i)
      proc.shimArgs.push("scalar" + i)
    } else if(arg_type === "index") {
      proc.indexArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {
        throw new Error("cwise: pre() block may not reference array index")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array index")
      }
      if(i < proc.post.args.length && proc.post.args[i].count > 0) {
        throw new Error("cwise: post() block may not reference array index")
      }
    } else if(arg_type === "shape") {
      proc.shapeArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {
        throw new Error("cwise: pre() block may not write to array shape")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array shape")
      }
      if(i < proc.post.args.length && proc.post.args[i].lvalue) {
        throw new Error("cwise: post() block may not write to array shape")
      }
    } else if(typeof arg_type === "object" && arg_type.offset) {
      proc.argTypes[i] = "offset"
      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })
      proc.offsetArgIndex.push(i)
    } else {
      throw new Error("cwise: Unknown argument type " + proc_args[i])
    }
  }
  
  //Make sure at least one array argument was specified
  if(proc.arrayArgs.length <= 0) {
    throw new Error("cwise: No array arguments specified")
  }
  
  //Make sure arguments are correct
  if(proc.pre.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in pre() block")
  }
  if(proc.body.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in body() block")
  }
  if(proc.post.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in post() block")
  }

  //Check debug flag
  proc.debug = !!user_args.printCode || !!user_args.debug
  
  //Retrieve name
  proc.funcName = user_args.funcName || "cwise"
  
  //Read in block size
  proc.blockSize = user_args.blockSize || 64

  return createThunk(proc)
}

module.exports = compileCwise

},{"./lib/thunk.js":17}],16:[function(require,module,exports){
"use strict"

var uniq = require("uniq")

function innerFill(order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , has_index = proc.indexArgs.length>0
    , code = []
    , vars = []
    , idx=0, pidx=0, i, j
  for(i=0; i<dimension; ++i) {
    vars.push(["i",i,"=0"].join(""))
  }
  //Compute scan deltas
  for(j=0; j<nargs; ++j) {
    for(i=0; i<dimension; ++i) {
      pidx = idx
      idx = order[i]
      if(i === 0) {
        vars.push(["d",j,"s",i,"=t",j,"p",idx].join(""))
      } else {
        vars.push(["d",j,"s",i,"=(t",j,"p",idx,"-s",pidx,"*t",j,"p",pidx,")"].join(""))
      }
    }
  }
  code.push("var " + vars.join(","))
  //Scan loop
  for(i=dimension-1; i>=0; --i) {
    idx = order[i]
    code.push(["for(i",i,"=0;i",i,"<s",idx,";++i",i,"){"].join(""))
  }
  //Push body of inner loop
  code.push(body)
  //Advance scan pointers
  for(i=0; i<dimension; ++i) {
    pidx = idx
    idx = order[i]
    for(j=0; j<nargs; ++j) {
      code.push(["p",j,"+=d",j,"s",i].join(""))
    }
    if(has_index) {
      if(i > 0) {
        code.push(["index[",pidx,"]-=s",pidx].join(""))
      }
      code.push(["++index[",idx,"]"].join(""))
    }
    code.push("}")
  }
  return code.join("\n")
}

function outerFill(matched, order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , blockSize = proc.blockSize
    , has_index = proc.indexArgs.length > 0
    , code = []
  for(var i=0; i<nargs; ++i) {
    code.push(["var offset",i,"=p",i].join(""))
  }
  //Generate matched loops
  for(var i=matched; i<dimension; ++i) {
    code.push(["for(var j"+i+"=SS[", order[i], "]|0;j", i, ">0;){"].join(""))
    code.push(["if(j",i,"<",blockSize,"){"].join(""))
    code.push(["s",order[i],"=j",i].join(""))
    code.push(["j",i,"=0"].join(""))
    code.push(["}else{s",order[i],"=",blockSize].join(""))
    code.push(["j",i,"-=",blockSize,"}"].join(""))
    if(has_index) {
      code.push(["index[",order[i],"]=j",i].join(""))
    }
  }
  for(var i=0; i<nargs; ++i) {
    var indexStr = ["offset"+i]
    for(var j=matched; j<dimension; ++j) {
      indexStr.push(["j",j,"*t",i,"p",order[j]].join(""))
    }
    code.push(["p",i,"=(",indexStr.join("+"),")"].join(""))
  }
  code.push(innerFill(order, proc, body))
  for(var i=matched; i<dimension; ++i) {
    code.push("}")
  }
  return code.join("\n")
}

//Count the number of compatible inner orders
function countMatches(orders) {
  var matched = 0, dimension = orders[0].length
  while(matched < dimension) {
    for(var j=1; j<orders.length; ++j) {
      if(orders[j][matched] !== orders[0][matched]) {
        return matched
      }
    }
    ++matched
  }
  return matched
}

//Processes a block according to the given data types
function processBlock(block, proc, dtypes) {
  var code = block.body
  var pre = []
  var post = []
  for(var i=0; i<block.args.length; ++i) {
    var carg = block.args[i]
    if(carg.count <= 0) {
      continue
    }
    var re = new RegExp(carg.name, "g")
    var ptrStr = ""
    var arrNum = proc.arrayArgs.indexOf(i)
    switch(proc.argTypes[i]) {
      case "offset":
        var offArgIndex = proc.offsetArgIndex.indexOf(i)
        var offArg = proc.offsetArgs[offArgIndex]
        arrNum = offArg.array
        ptrStr = "+q" + offArgIndex
      case "array":
        ptrStr = "p" + arrNum + ptrStr
        var localStr = "l" + i
        var arrStr = "a" + arrNum
        if(carg.count === 1) {
          if(dtypes[arrNum] === "generic") {
            if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }
          } else {
            code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
          }
        } else if(dtypes[arrNum] === "generic") {
          pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join(""))
          code = code.replace(re, localStr)
          if(carg.lvalue) {
            post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
          }
        } else {
          pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join(""))
          code = code.replace(re, localStr)
          if(carg.lvalue) {
            post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
          }
        }
      break
      case "scalar":
        code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
      break
      case "index":
        code = code.replace(re, "index")
      break
      case "shape":
        code = code.replace(re, "shape")
      break
    }
  }
  return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
}

function typeSummary(dtypes) {
  var summary = new Array(dtypes.length)
  var allEqual = true
  for(var i=0; i<dtypes.length; ++i) {
    var t = dtypes[i]
    var digits = t.match(/\d+/)
    if(!digits) {
      digits = ""
    } else {
      digits = digits[0]
    }
    if(t.charAt(0) === 0) {
      summary[i] = "u" + t.charAt(1) + digits
    } else {
      summary[i] = t.charAt(0) + digits
    }
    if(i > 0) {
      allEqual = allEqual && summary[i] === summary[i-1]
    }
  }
  if(allEqual) {
    return summary[0]
  }
  return summary.join("")
}

//Generates a cwise operator
function generateCWiseOp(proc, typesig) {

  //Compute dimension
  var dimension = typesig[1].length|0
  var orders = new Array(proc.arrayArgs.length)
  var dtypes = new Array(proc.arrayArgs.length)

  //First create arguments for procedure
  var arglist = ["SS"]
  var code = ["'use strict'"]
  var vars = []
  
  for(var j=0; j<dimension; ++j) {
    vars.push(["s", j, "=SS[", j, "]"].join(""))
  }
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    arglist.push("a"+i)
    arglist.push("t"+i)
    arglist.push("p"+i)
    dtypes[i] = typesig[2*i]
    orders[i] = typesig[2*i+1]
    
    for(var j=0; j<dimension; ++j) {
      vars.push(["t",i,"p",j,"=t",i,"[",j,"]"].join(""))
    }
  }
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    arglist.push("Y" + i)
  }
  if(proc.shapeArgs.length > 0) {
    vars.push("shape=SS.slice(0)")
  }
  if(proc.indexArgs.length > 0) {
    var zeros = new Array(dimension)
    for(var i=0; i<dimension; ++i) {
      zeros[i] = "0"
    }
    vars.push(["index=[", zeros.join(","), "]"].join(""))
  }
  for(var i=0; i<proc.offsetArgs.length; ++i) {
    var off_arg = proc.offsetArgs[i]
    var init_string = []
    for(var j=0; j<off_arg.offset.length; ++j) {
      if(off_arg.offset[j] === 0) {
        continue
      } else if(off_arg.offset[j] === 1) {
        init_string.push(["t", off_arg.array, "p", j].join(""))      
      } else {
        init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""))
      }
    }
    if(init_string.length === 0) {
      vars.push("q" + i + "=0")
    } else {
      vars.push(["q", i, "=", init_string.join("+")].join(""))
    }
  }

  //Prepare this variables
  var thisVars = uniq([].concat(proc.pre.thisVars)
                      .concat(proc.body.thisVars)
                      .concat(proc.post.thisVars))
  vars = vars.concat(thisVars)
  code.push("var " + vars.join(","))
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    code.push("p"+i+"|=0")
  }
  
  //Inline prelude
  if(proc.pre.body.length > 3) {
    code.push(processBlock(proc.pre, proc, dtypes))
  }

  //Process body
  var body = processBlock(proc.body, proc, dtypes)
  var matched = countMatches(orders)
  if(matched < dimension) {
    code.push(outerFill(matched, orders[0], proc, body))
  } else {
    code.push(innerFill(orders[0], proc, body))
  }

  //Inline epilog
  if(proc.post.body.length > 3) {
    code.push(processBlock(proc.post, proc, dtypes))
  }
  
  if(proc.debug) {
    console.log("Generated cwise routine for ", typesig, ":\n\n", code.join("\n"))
  }
  
  var loopName = [(proc.funcName||"unnamed"), "_cwise_loop_", orders[0].join("s"),"m",matched,typeSummary(dtypes)].join("")
  var f = new Function(["function ",loopName,"(", arglist.join(","),"){", code.join("\n"),"} return ", loopName].join(""))
  return f()
}
module.exports = generateCWiseOp
},{"uniq":18}],17:[function(require,module,exports){
"use strict"

var compile = require("./compile.js")

function createThunk(proc) {
  var code = ["'use strict'", "var CACHED={}"]
  var vars = []
  var thunkName = proc.funcName + "_cwise_thunk"
  
  //Build thunk
  code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""))
  var typesig = []
  var string_typesig = []
  var proc_args = [["array",proc.arrayArgs[0],".shape"].join("")]
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    var j = proc.arrayArgs[i]
    vars.push(["t", j, "=array", j, ".dtype,",
               "r", j, "=array", j, ".order"].join(""))
    typesig.push("t" + j)
    typesig.push("r" + j)
    string_typesig.push("t"+j)
    string_typesig.push("r"+j+".join()")
    proc_args.push("array" + j + ".data")
    proc_args.push("array" + j + ".stride")
    proc_args.push("array" + j + ".offset|0")
  }
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    proc_args.push("scalar" + proc.scalarArgs[i])
  }
  vars.push(["type=[", string_typesig.join(","), "].join()"].join(""))
  vars.push("proc=CACHED[type]")
  code.push("var " + vars.join(","))
  
  code.push(["if(!proc){",
             "CACHED[type]=proc=compile([", typesig.join(","), "])}",
             "return proc(", proc_args.join(","), ")}"].join(""))

  if(proc.debug) {
    console.log("Generated thunk:", code.join("\n"))
  }
  
  //Compile thunk
  var thunk = new Function("compile", code.join("\n"))
  return thunk(compile.bind(undefined, proc))
}

module.exports = createThunk

},{"./compile.js":16}],18:[function(require,module,exports){
"use strict"

function unique_pred(list, compare) {
  var ptr = 1
    , len = list.length
    , a=list[0], b=list[0]
  for(var i=1; i<len; ++i) {
    b = a
    a = list[i]
    if(compare(a, b)) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique_eq(list) {
  var ptr = 1
    , len = list.length
    , a=list[0], b = list[0]
  for(var i=1; i<len; ++i, b=a) {
    b = a
    a = list[i]
    if(a !== b) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique(list, compare, sorted) {
  if(list.length === 0) {
    return list
  }
  if(compare) {
    if(!sorted) {
      list.sort(compare)
    }
    return unique_pred(list, compare)
  }
  if(!sorted) {
    list.sort()
  }
  return unique_eq(list)
}

module.exports = unique

},{}],19:[function(require,module,exports){
(function (Buffer){
var iota = require("iota-array")

var arrayMethods = [
  "concat",
  "join",
  "slice",
  "toString",
  "indexOf",
  "lastIndexOf",
  "forEach",
  "every",
  "some",
  "filter",
  "map",
  "reduce",
  "reduceRight"
]

var hasTypedArrays  = ((typeof Float64Array) !== "undefined")
var hasBuffer       = ((typeof Buffer) !== "undefined")

function compare1st(a, b) {
  return a[0] - b[0]
}

function order() {
  var stride = this.stride
  var terms = new Array(stride.length)
  var i
  for(i=0; i<terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i]
  }
  terms.sort(compare1st)
  var result = new Array(terms.length)
  for(i=0; i<result.length; ++i) {
    result[i] = terms[i][1]
  }
  return result
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("")
  if(dimension < 0) {
    className = "View_Nil" + dtype
  }
  var useGetters = (dtype === "generic")
  
  if(dimension === -1) {
    //Special case for trivial arrays
    var code = 
      "function "+className+"(a){this.data=a;};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new "+className+"(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_"+className+"(a){return new "+className+"(a);}"
    var procedure = new Function(code)
    return procedure()
  } else if(dimension === 0) {
    //Special case for 0d arrays
    var code =
      "function "+className+"(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function "+className+"_copy() {\
return new "+className+"(this.data,this.offset)\
};\
proto.pick=function "+className+"_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function "+className+"_get(){\
return "+(useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]")+
"};\
proto.set=function "+className+"_set(v){\
return "+(useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v")+"\
};\
return function construct_"+className+"(a,b,c,d){return new "+className+"(a,d)}"
    var procedure = new Function("TrivialArray", code)
    return procedure(CACHED_CONSTRUCTORS[dtype][0])
  }

  var code = ["'use strict'"]
    
  //Create constructor for view
  var indices = iota(dimension)
  var args = indices.map(function(i) { return "i"+i })
  var index_str = "this.offset+" + indices.map(function(i) {
        return "this._stride" + i + "*i" + i
      }).join("+")
  code.push("function "+className+"(a,"+
    indices.map(function(i) {
      return "b"+i
    }).join(",") + "," +
    indices.map(function(i) {
      return "c"+i
    }).join(",") + ",d){this.data=a")
  for(var i=0; i<dimension; ++i) {
    code.push("this._shape"+i+"=b"+i+"|0")
  }
  for(var i=0; i<dimension; ++i) {
    code.push("this._stride"+i+"=c"+i+"|0")
  }
  code.push("this.offset=d|0}",
    "var proto="+className+".prototype",
    "proto.dtype='"+dtype+"'",
    "proto.dimension="+dimension)
  
  //view.stride and view.shape
  var strideClassName = "VStride" + dimension + "d" + dtype
  var shapeClassName = "VShape" + dimension + "d" + dtype
  var props = {"stride":strideClassName, "shape":shapeClassName}
  for(var prop in props) {
    var arrayName = props[prop]
    code.push(
      "function " + arrayName + "(v) {this._v=v} var aproto=" + arrayName + ".prototype",
      "aproto.length="+dimension)
    
    var array_elements = []
    for(var i=0; i<dimension; ++i) {
      array_elements.push(["this._v._", prop, i].join(""))
    }
    code.push(
      "aproto.toJSON=function " + arrayName + "_toJSON(){return [" + array_elements.join(",") + "]}",
      "aproto.valueOf=aproto.toString=function " + arrayName + "_toString(){return [" + array_elements.join(",") + "].join()}")
    
    for(var i=0; i<dimension; ++i) {
      code.push("Object.defineProperty(aproto,"+i+",{get:function(){return this._v._"+prop+i+"},set:function(v){return this._v._"+prop+i+"=v|0},enumerable:true})")
    }
    for(var i=0; i<arrayMethods.length; ++i) {
      if(arrayMethods[i] in Array.prototype) {
        code.push("aproto."+arrayMethods[i]+"=Array.prototype."+arrayMethods[i])
      }
    }
    code.push(["Object.defineProperty(proto,'",prop,"',{get:function ", arrayName, "_get(){return new ", arrayName, "(this)},set: function ", arrayName, "_set(v){"].join(""))
    for(var i=0; i<dimension; ++i) {
      code.push("this._"+prop+i+"=v["+i+"]|0")
    }
    code.push("return v}})")
  }
  
  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function "+className+"_size(){\
return "+indices.map(function(i) { return "this._shape"+i }).join("*"),
"}})")

  //view.order:
  if(dimension === 1) {
    code.push("proto.order=[0]")
  } else {
    code.push("Object.defineProperty(proto,'order',{get:")
    if(dimension < 4) {
      code.push("function "+className+"_order(){")
      if(dimension === 2) {
        code.push("return (Math.abs(this._stride0)>Math.abs(this._stride1))?[1,0]:[0,1]}})")
      } else if(dimension === 3) {
        code.push(
"var s0=Math.abs(this._stride0),s1=Math.abs(this._stride1),s2=Math.abs(this._stride2);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
      }
    } else {
      code.push("ORDER})")
    }
  }
  
  //view.set(i0, ..., v):
  code.push(
"proto.set=function "+className+"_set("+args.join(",")+",v){")
  if(useGetters) {
    code.push("return this.data.set("+index_str+",v)}")
  } else {
    code.push("return this.data["+index_str+"]=v}")
  }
  
  //view.get(i0, ...):
  code.push("proto.get=function "+className+"_get("+args.join(",")+"){")
  if(useGetters) {
    code.push("return this.data.get("+index_str+")}")
  } else {
    code.push("return this.data["+index_str+"]}")
  }
  
  //view.index:
  code.push(
    "proto.index=function "+className+"_index(", args.join(), "){return "+index_str+"}")

  //view.hi():
  code.push("proto.hi=function "+className+"_hi("+args.join(",")+"){return new "+className+"(this.data,"+
    indices.map(function(i) {
      return ["(typeof i",i,"!=='number'||i",i,"<0)?this._shape", i, ":i", i,"|0"].join("")
    }).join(",")+","+
    indices.map(function(i) {
      return "this._stride"+i
    }).join(",")+",this.offset)}")
  
  //view.lo():
  var a_vars = indices.map(function(i) { return "a"+i+"=this._shape"+i })
  var c_vars = indices.map(function(i) { return "c"+i+"=this._stride"+i })
  code.push("proto.lo=function "+className+"_lo("+args.join(",")+"){var b=this.offset,d=0,"+a_vars.join(",")+","+c_vars.join(","))
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'&&i"+i+">=0){\
d=i"+i+"|0;\
b+=c"+i+"*d;\
a"+i+"-=d}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "c"+i
    }).join(",")+",b)}")
  
  //view.step():
  code.push("proto.step=function "+className+"_step("+args.join(",")+"){var "+
    indices.map(function(i) {
      return "a"+i+"=this._shape"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "b"+i+"=this._stride"+i
    }).join(",")+",c=this.offset,d=0,ceil=Math.ceil")
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'){\
d=i"+i+"|0;\
if(d<0){\
c+=b"+i+"*(a"+i+"-1);\
a"+i+"=ceil(-a"+i+"/d)\
}else{\
a"+i+"=ceil(a"+i+"/d)\
}\
b"+i+"*=d\
}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a" + i
    }).join(",")+","+
    indices.map(function(i) {
      return "b" + i
    }).join(",")+",c)}")
  
  //view.transpose():
  var tShape = new Array(dimension)
  var tStride = new Array(dimension)
  for(var i=0; i<dimension; ++i) {
    tShape[i] = "a[i"+i+"]"
    tStride[i] = "b[i"+i+"]"
  }
  code.push("proto.transpose=function "+className+"_transpose("+args+"){"+
    args.map(function(n,idx) { return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"}).join(";"),
    "var a=this.shape,b=this.stride;return new "+className+"(this.data,"+tShape.join(",")+","+tStride.join(",")+",this.offset)}")
  
  //view.pick():
  code.push("proto.pick=function "+className+"_pick("+args+"){var a=[],b=[],c=this.offset")
  for(var i=0; i<dimension; ++i) {
    code.push("if(typeof i"+i+"==='number'&&i"+i+">=0){c=(c+this._stride"+i+"*i"+i+")|0}else{a.push(this._shape"+i+");b.push(this._stride"+i+")}")
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")
    
  //Add return statement
  code.push("return function construct_"+className+"(data,shape,stride,offset){return new "+className+"(data,"+
    indices.map(function(i) {
      return "shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "stride["+i+"]"
    }).join(",")+",offset)}")

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
  return procedure(CACHED_CONSTRUCTORS[dtype], order)
}

function arrayDType(data) {
  if(hasBuffer) {
    if(Buffer.isBuffer(data)) {
      return "buffer"
    }
  }
  if(hasTypedArrays) {
    switch(Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64"
      case "[object Float32Array]":
        return "float32"
      case "[object Int8Array]":
        return "int8"
      case "[object Int16Array]":
        return "int16"
      case "[object Int32Array]":
        return "int32"
      case "[object Uint8Array]":
        return "uint8"
      case "[object Uint16Array]":
        return "uint16"
      case "[object Uint32Array]":
        return "uint32"
      case "[object Uint8ClampedArray]":
        return "uint8_clamped"
    }
  }
  if(Array.isArray(data)) {
    return "array"
  }
  return "generic"
}

var CACHED_CONSTRUCTORS = {
  "float32":[],
  "float64":[],
  "int8":[],
  "int16":[],
  "int32":[],
  "uint8":[],
  "uint16":[],
  "uint32":[],
  "array":[],
  "uint8_clamped":[],
  "buffer":[],
  "generic":[]
}

;(function() {
  for(var id in CACHED_CONSTRUCTORS) {
    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
  }
});

function wrappedNDArrayCtor(data, shape, stride, offset) {
  if(data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0]
    return ctor([])
  } else if(typeof data === "number") {
    data = [data]
  }
  if(shape === undefined) {
    shape = [ data.length ]
  }
  var d = shape.length
  if(stride === undefined) {
    stride = new Array(d)
    for(var i=d-1, sz=1; i>=0; --i) {
      stride[i] = sz
      sz *= shape[i]
    }
  }
  if(offset === undefined) {
    offset = 0
    for(var i=0; i<d; ++i) {
      if(stride[i] < 0) {
        offset -= (shape[i]-1)*stride[i]
      }
    }
  }
  var dtype = arrayDType(data)
  var ctor_list = CACHED_CONSTRUCTORS[dtype]
  while(ctor_list.length <= d+1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))
  }
  var ctor = ctor_list[d+1]
  return ctor(data, shape, stride, offset)
}

module.exports = wrappedNDArrayCtor
}).call(this,require("buffer").Buffer)
},{"buffer":4,"iota-array":20}],20:[function(require,module,exports){
"use strict"

function iota(n) {
  var result = new Array(n)
  for(var i=0; i<n; ++i) {
    result[i] = i
  }
  return result
}

module.exports = iota
},{}],21:[function(require,module,exports){
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

"use strict"; "use restrict";

//Number of bits in an integer
var INT_BITS = 32;

//Constants
exports.INT_BITS  = INT_BITS;
exports.INT_MAX   =  0x7fffffff;
exports.INT_MIN   = -1<<(INT_BITS-1);

//Returns -1, 0, +1 depending on sign of x
exports.sign = function(v) {
  return (v > 0) - (v < 0);
}

//Computes absolute value of integer
exports.abs = function(v) {
  var mask = v >> (INT_BITS-1);
  return (v ^ mask) - mask;
}

//Computes minimum of integers x and y
exports.min = function(x, y) {
  return y ^ ((x ^ y) & -(x < y));
}

//Computes maximum of integers x and y
exports.max = function(x, y) {
  return x ^ ((x ^ y) & -(x < y));
}

//Checks if a number is a power of two
exports.isPow2 = function(v) {
  return !(v & (v-1)) && (!!v);
}

//Computes log base 2 of v
exports.log2 = function(v) {
  var r, shift;
  r =     (v > 0xFFFF) << 4; v >>>= r;
  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
  return r | (v >> 1);
}

//Computes log base 10 of v
exports.log10 = function(v) {
  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
}

//Counts number of bits
exports.popCount = function(v) {
  v = v - ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
exports.nextPow2 = function(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
}

//Rounds down to previous power of 2
exports.prevPow2 = function(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v>>>1);
}

//Computes parity of word
exports.parity = function(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return (0x6996 >>> v) & 1;
}

var REVERSE_TABLE = new Array(256);

(function(tab) {
  for(var i=0; i<256; ++i) {
    var v = i, r = i, s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = (r << s) & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
exports.reverse = function(v) {
  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
           REVERSE_TABLE[(v >>> 24) & 0xff];
}

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
exports.interleave2 = function(x, y) {
  x &= 0xFFFF;
  x = (x | (x << 8)) & 0x00FF00FF;
  x = (x | (x << 4)) & 0x0F0F0F0F;
  x = (x | (x << 2)) & 0x33333333;
  x = (x | (x << 1)) & 0x55555555;

  y &= 0xFFFF;
  y = (y | (y << 8)) & 0x00FF00FF;
  y = (y | (y << 4)) & 0x0F0F0F0F;
  y = (y | (y << 2)) & 0x33333333;
  y = (y | (y << 1)) & 0x55555555;

  return x | (y << 1);
}

//Extracts the nth interleaved component
exports.deinterleave2 = function(v, n) {
  v = (v >>> n) & 0x55555555;
  v = (v | (v >>> 1))  & 0x33333333;
  v = (v | (v >>> 2))  & 0x0F0F0F0F;
  v = (v | (v >>> 4))  & 0x00FF00FF;
  v = (v | (v >>> 16)) & 0x000FFFF;
  return (v << 16) >> 16;
}


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
exports.interleave3 = function(x, y, z) {
  x &= 0x3FF;
  x  = (x | (x<<16)) & 4278190335;
  x  = (x | (x<<8))  & 251719695;
  x  = (x | (x<<4))  & 3272356035;
  x  = (x | (x<<2))  & 1227133513;

  y &= 0x3FF;
  y  = (y | (y<<16)) & 4278190335;
  y  = (y | (y<<8))  & 251719695;
  y  = (y | (y<<4))  & 3272356035;
  y  = (y | (y<<2))  & 1227133513;
  x |= (y << 1);
  
  z &= 0x3FF;
  z  = (z | (z<<16)) & 4278190335;
  z  = (z | (z<<8))  & 251719695;
  z  = (z | (z<<4))  & 3272356035;
  z  = (z | (z<<2))  & 1227133513;
  
  return x | (z << 2);
}

//Extracts nth interleaved component of a 3-tuple
exports.deinterleave3 = function(v, n) {
  v = (v >>> n)       & 1227133513;
  v = (v | (v>>>2))   & 3272356035;
  v = (v | (v>>>4))   & 251719695;
  v = (v | (v>>>8))   & 4278190335;
  v = (v | (v>>>16))  & 0x3FF;
  return (v<<22)>>22;
}

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
exports.nextCombination = function(v) {
  var t = v | (v - 1);
  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
}


},{}],22:[function(require,module,exports){
"use strict"

function dupe_array(count, value, i) {
  var c = count[i]|0
  if(c <= 0) {
    return []
  }
  var result = new Array(c), j
  if(i === count.length-1) {
    for(j=0; j<c; ++j) {
      result[j] = value
    }
  } else {
    for(j=0; j<c; ++j) {
      result[j] = dupe_array(count, value, i+1)
    }
  }
  return result
}

function dupe_number(count, value) {
  var result, i
  result = new Array(count)
  for(i=0; i<count; ++i) {
    result[i] = value
  }
  return result
}

function dupe(count, value) {
  if(typeof value === "undefined") {
    value = 0
  }
  switch(typeof count) {
    case "number":
      if(count > 0) {
        return dupe_number(count|0, value)
      }
    break
    case "object":
      if(typeof (count.length) === "number") {
        return dupe_array(count, value, 0)
      }
    break
  }
  return []
}

module.exports = dupe
},{}],23:[function(require,module,exports){
(function (global,Buffer){
'use strict'

var bits = require('bit-twiddle')
var dup = require('dup')

//Legacy pool support
if(!global.__TYPEDARRAY_POOL) {
  global.__TYPEDARRAY_POOL = {
      UINT8   : dup([32, 0])
    , UINT16  : dup([32, 0])
    , UINT32  : dup([32, 0])
    , INT8    : dup([32, 0])
    , INT16   : dup([32, 0])
    , INT32   : dup([32, 0])
    , FLOAT   : dup([32, 0])
    , DOUBLE  : dup([32, 0])
    , DATA    : dup([32, 0])
    , UINT8C  : dup([32, 0])
    , BUFFER  : dup([32, 0])
  }
}

var hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'
var POOL = global.__TYPEDARRAY_POOL

//Upgrade pool
if(!POOL.UINT8C) {
  POOL.UINT8C = dup([32, 0])
}
if(!POOL.BUFFER) {
  POOL.BUFFER = dup([32, 0])
}

//New technique: Only allocate from ArrayBufferView and Buffer
var DATA    = POOL.DATA
  , BUFFER  = POOL.BUFFER

exports.free = function free(array) {
  if(Buffer.isBuffer(array)) {
    BUFFER[bits.log2(array.length)].push(array)
  } else {
    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {
      array = array.buffer
    }
    if(!array) {
      return
    }
    var n = array.length || array.byteLength
    var log_n = bits.log2(n)|0
    DATA[log_n].push(array)
  }
}

function freeArrayBuffer(buffer) {
  if(!buffer) {
    return
  }
  var n = buffer.length || buffer.byteLength
  var log_n = bits.log2(n)
  DATA[log_n].push(buffer)
}

function freeTypedArray(array) {
  freeArrayBuffer(array.buffer)
}

exports.freeUint8 =
exports.freeUint16 =
exports.freeUint32 =
exports.freeInt8 =
exports.freeInt16 =
exports.freeInt32 =
exports.freeFloat32 = 
exports.freeFloat =
exports.freeFloat64 = 
exports.freeDouble = 
exports.freeUint8Clamped = 
exports.freeDataView = freeTypedArray

exports.freeArrayBuffer = freeArrayBuffer

exports.freeBuffer = function freeBuffer(array) {
  BUFFER[bits.log2(array.length)].push(array)
}

exports.malloc = function malloc(n, dtype) {
  if(dtype === undefined || dtype === 'arraybuffer') {
    return mallocArrayBuffer(n)
  } else {
    switch(dtype) {
      case 'uint8':
        return mallocUint8(n)
      case 'uint16':
        return mallocUint16(n)
      case 'uint32':
        return mallocUint32(n)
      case 'int8':
        return mallocInt8(n)
      case 'int16':
        return mallocInt16(n)
      case 'int32':
        return mallocInt32(n)
      case 'float':
      case 'float32':
        return mallocFloat(n)
      case 'double':
      case 'float64':
        return mallocDouble(n)
      case 'uint8_clamped':
        return mallocUint8Clamped(n)
      case 'buffer':
        return mallocBuffer(n)
      case 'data':
      case 'dataview':
        return mallocDataView(n)

      default:
        return null
    }
  }
  return null
}

function mallocArrayBuffer(n) {
  var n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var d = DATA[log_n]
  if(d.length > 0) {
    return d.pop()
  }
  return new ArrayBuffer(n)
}
exports.mallocArrayBuffer = mallocArrayBuffer

function mallocUint8(n) {
  return new Uint8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocUint8 = mallocUint8

function mallocUint16(n) {
  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocUint16 = mallocUint16

function mallocUint32(n) {
  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocUint32 = mallocUint32

function mallocInt8(n) {
  return new Int8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocInt8 = mallocInt8

function mallocInt16(n) {
  return new Int16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocInt16 = mallocInt16

function mallocInt32(n) {
  return new Int32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocInt32 = mallocInt32

function mallocFloat(n) {
  return new Float32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocFloat32 = exports.mallocFloat = mallocFloat

function mallocDouble(n) {
  return new Float64Array(mallocArrayBuffer(8*n), 0, n)
}
exports.mallocFloat64 = exports.mallocDouble = mallocDouble

function mallocUint8Clamped(n) {
  if(hasUint8C) {
    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)
  } else {
    return mallocUint8(n)
  }
}
exports.mallocUint8Clamped = mallocUint8Clamped

function mallocDataView(n) {
  return new DataView(mallocArrayBuffer(n), 0, n)
}
exports.mallocDataView = mallocDataView

function mallocBuffer(n) {
  n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var cache = BUFFER[log_n]
  if(cache.length > 0) {
    return cache.pop()
  }
  return new Buffer(n)
}
exports.mallocBuffer = mallocBuffer

exports.clearCache = function clearCache() {
  for(var i=0; i<32; ++i) {
    POOL.UINT8[i].length = 0
    POOL.UINT16[i].length = 0
    POOL.UINT32[i].length = 0
    POOL.INT8[i].length = 0
    POOL.INT16[i].length = 0
    POOL.INT32[i].length = 0
    POOL.FLOAT[i].length = 0
    POOL.DOUBLE[i].length = 0
    POOL.UINT8C[i].length = 0
    DATA[i].length = 0
    BUFFER[i].length = 0
  }
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"bit-twiddle":21,"buffer":4,"dup":22}],24:[function(require,module,exports){
// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Install a leaky WeakMap emulation on platforms that
 * don't provide a built-in one.
 *
 * <p>Assumes that an ES5 platform where, if {@code WeakMap} is
 * already present, then it conforms to the anticipated ES6
 * specification. To run this file on an ES5 or almost ES5
 * implementation where the {@code WeakMap} specification does not
 * quite conform, run <code>repairES5.js</code> first.
 *
 * <p>Even though WeakMapModule is not global, the linter thinks it
 * is, which is why it is in the overrides list below.
 *
 * <p>NOTE: Before using this WeakMap emulation in a non-SES
 * environment, see the note below about hiddenRecord.
 *
 * @author Mark S. Miller
 * @requires crypto, ArrayBuffer, Uint8Array, navigator, console
 * @overrides WeakMap, ses, Proxy
 * @overrides WeakMapModule
 */

/**
 * This {@code WeakMap} emulation is observably equivalent to the
 * ES-Harmony WeakMap, but with leakier garbage collection properties.
 *
 * <p>As with true WeakMaps, in this emulation, a key does not
 * retain maps indexed by that key and (crucially) a map does not
 * retain the keys it indexes. A map by itself also does not retain
 * the values associated with that map.
 *
 * <p>However, the values associated with a key in some map are
 * retained so long as that key is retained and those associations are
 * not overridden. For example, when used to support membranes, all
 * values exported from a given membrane will live for the lifetime
 * they would have had in the absence of an interposed membrane. Even
 * when the membrane is revoked, all objects that would have been
 * reachable in the absence of revocation will still be reachable, as
 * far as the GC can tell, even though they will no longer be relevant
 * to ongoing computation.
 *
 * <p>The API implemented here is approximately the API as implemented
 * in FF6.0a1 and agreed to by MarkM, Andreas Gal, and Dave Herman,
 * rather than the offially approved proposal page. TODO(erights):
 * upgrade the ecmascript WeakMap proposal page to explain this API
 * change and present to EcmaScript committee for their approval.
 *
 * <p>The first difference between the emulation here and that in
 * FF6.0a1 is the presence of non enumerable {@code get___, has___,
 * set___, and delete___} methods on WeakMap instances to represent
 * what would be the hidden internal properties of a primitive
 * implementation. Whereas the FF6.0a1 WeakMap.prototype methods
 * require their {@code this} to be a genuine WeakMap instance (i.e.,
 * an object of {@code [[Class]]} "WeakMap}), since there is nothing
 * unforgeable about the pseudo-internal method names used here,
 * nothing prevents these emulated prototype methods from being
 * applied to non-WeakMaps with pseudo-internal methods of the same
 * names.
 *
 * <p>Another difference is that our emulated {@code
 * WeakMap.prototype} is not itself a WeakMap. A problem with the
 * current FF6.0a1 API is that WeakMap.prototype is itself a WeakMap
 * providing ambient mutability and an ambient communications
 * channel. Thus, if a WeakMap is already present and has this
 * problem, repairES5.js wraps it in a safe wrappper in order to
 * prevent access to this channel. (See
 * PATCH_MUTABLE_FROZEN_WEAKMAP_PROTO in repairES5.js).
 */

/**
 * If this is a full <a href=
 * "http://code.google.com/p/es-lab/wiki/SecureableES5"
 * >secureable ES5</a> platform and the ES-Harmony {@code WeakMap} is
 * absent, install an approximate emulation.
 *
 * <p>If WeakMap is present but cannot store some objects, use our approximate
 * emulation as a wrapper.
 *
 * <p>If this is almost a secureable ES5 platform, then WeakMap.js
 * should be run after repairES5.js.
 *
 * <p>See {@code WeakMap} for documentation of the garbage collection
 * properties of this WeakMap emulation.
 */
(function WeakMapModule() {
  "use strict";

  if (typeof ses !== 'undefined' && ses.ok && !ses.ok()) {
    // already too broken, so give up
    return;
  }

  /**
   * In some cases (current Firefox), we must make a choice betweeen a
   * WeakMap which is capable of using all varieties of host objects as
   * keys and one which is capable of safely using proxies as keys. See
   * comments below about HostWeakMap and DoubleWeakMap for details.
   *
   * This function (which is a global, not exposed to guests) marks a
   * WeakMap as permitted to do what is necessary to index all host
   * objects, at the cost of making it unsafe for proxies.
   *
   * Do not apply this function to anything which is not a genuine
   * fresh WeakMap.
   */
  function weakMapPermitHostObjects(map) {
    // identity of function used as a secret -- good enough and cheap
    if (map.permitHostObjects___) {
      map.permitHostObjects___(weakMapPermitHostObjects);
    }
  }
  if (typeof ses !== 'undefined') {
    ses.weakMapPermitHostObjects = weakMapPermitHostObjects;
  }

  // IE 11 has no Proxy but has a broken WeakMap such that we need to patch
  // it using DoubleWeakMap; this flag tells DoubleWeakMap so.
  var doubleWeakMapCheckSilentFailure = false;

  // Check if there is already a good-enough WeakMap implementation, and if so
  // exit without replacing it.
  if (typeof WeakMap === 'function') {
    var HostWeakMap = WeakMap;
    // There is a WeakMap -- is it good enough?
    if (typeof navigator !== 'undefined' &&
        /Firefox/.test(navigator.userAgent)) {
      // We're now *assuming not*, because as of this writing (2013-05-06)
      // Firefox's WeakMaps have a miscellany of objects they won't accept, and
      // we don't want to make an exhaustive list, and testing for just one
      // will be a problem if that one is fixed alone (as they did for Event).

      // If there is a platform that we *can* reliably test on, here's how to
      // do it:
      //  var problematic = ... ;
      //  var testHostMap = new HostWeakMap();
      //  try {
      //    testHostMap.set(problematic, 1);  // Firefox 20 will throw here
      //    if (testHostMap.get(problematic) === 1) {
      //      return;
      //    }
      //  } catch (e) {}

    } else {
      // IE 11 bug: WeakMaps silently fail to store frozen objects.
      var testMap = new HostWeakMap();
      var testObject = Object.freeze({});
      testMap.set(testObject, 1);
      if (testMap.get(testObject) !== 1) {
        doubleWeakMapCheckSilentFailure = true;
        // Fall through to installing our WeakMap.
      } else {
        module.exports = WeakMap;
        return;
      }
    }
  }

  var hop = Object.prototype.hasOwnProperty;
  var gopn = Object.getOwnPropertyNames;
  var defProp = Object.defineProperty;
  var isExtensible = Object.isExtensible;

  /**
   * Security depends on HIDDEN_NAME being both <i>unguessable</i> and
   * <i>undiscoverable</i> by untrusted code.
   *
   * <p>Given the known weaknesses of Math.random() on existing
   * browsers, it does not generate unguessability we can be confident
   * of.
   *
   * <p>It is the monkey patching logic in this file that is intended
   * to ensure undiscoverability. The basic idea is that there are
   * three fundamental means of discovering properties of an object:
   * The for/in loop, Object.keys(), and Object.getOwnPropertyNames(),
   * as well as some proposed ES6 extensions that appear on our
   * whitelist. The first two only discover enumerable properties, and
   * we only use HIDDEN_NAME to name a non-enumerable property, so the
   * only remaining threat should be getOwnPropertyNames and some
   * proposed ES6 extensions that appear on our whitelist. We monkey
   * patch them to remove HIDDEN_NAME from the list of properties they
   * returns.
   *
   * <p>TODO(erights): On a platform with built-in Proxies, proxies
   * could be used to trap and thereby discover the HIDDEN_NAME, so we
   * need to monkey patch Proxy.create, Proxy.createFunction, etc, in
   * order to wrap the provided handler with the real handler which
   * filters out all traps using HIDDEN_NAME.
   *
   * <p>TODO(erights): Revisit Mike Stay's suggestion that we use an
   * encapsulated function at a not-necessarily-secret name, which
   * uses the Stiegler shared-state rights amplification pattern to
   * reveal the associated value only to the WeakMap in which this key
   * is associated with that value. Since only the key retains the
   * function, the function can also remember the key without causing
   * leakage of the key, so this doesn't violate our general gc
   * goals. In addition, because the name need not be a guarded
   * secret, we could efficiently handle cross-frame frozen keys.
   */
  var HIDDEN_NAME_PREFIX = 'weakmap:';
  var HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'ident:' + Math.random() + '___';

  if (typeof crypto !== 'undefined' &&
      typeof crypto.getRandomValues === 'function' &&
      typeof ArrayBuffer === 'function' &&
      typeof Uint8Array === 'function') {
    var ab = new ArrayBuffer(25);
    var u8s = new Uint8Array(ab);
    crypto.getRandomValues(u8s);
    HIDDEN_NAME = HIDDEN_NAME_PREFIX + 'rand:' +
      Array.prototype.map.call(u8s, function(u8) {
        return (u8 % 36).toString(36);
      }).join('') + '___';
  }

  function isNotHiddenName(name) {
    return !(
        name.substr(0, HIDDEN_NAME_PREFIX.length) == HIDDEN_NAME_PREFIX &&
        name.substr(name.length - 3) === '___');
  }

  /**
   * Monkey patch getOwnPropertyNames to avoid revealing the
   * HIDDEN_NAME.
   *
   * <p>The ES5.1 spec requires each name to appear only once, but as
   * of this writing, this requirement is controversial for ES6, so we
   * made this code robust against this case. If the resulting extra
   * search turns out to be expensive, we can probably relax this once
   * ES6 is adequately supported on all major browsers, iff no browser
   * versions we support at that time have relaxed this constraint
   * without providing built-in ES6 WeakMaps.
   */
  defProp(Object, 'getOwnPropertyNames', {
    value: function fakeGetOwnPropertyNames(obj) {
      return gopn(obj).filter(isNotHiddenName);
    }
  });

  /**
   * getPropertyNames is not in ES5 but it is proposed for ES6 and
   * does appear in our whitelist, so we need to clean it too.
   */
  if ('getPropertyNames' in Object) {
    var originalGetPropertyNames = Object.getPropertyNames;
    defProp(Object, 'getPropertyNames', {
      value: function fakeGetPropertyNames(obj) {
        return originalGetPropertyNames(obj).filter(isNotHiddenName);
      }
    });
  }

  /**
   * <p>To treat objects as identity-keys with reasonable efficiency
   * on ES5 by itself (i.e., without any object-keyed collections), we
   * need to add a hidden property to such key objects when we
   * can. This raises several issues:
   * <ul>
   * <li>Arranging to add this property to objects before we lose the
   *     chance, and
   * <li>Hiding the existence of this new property from most
   *     JavaScript code.
   * <li>Preventing <i>certification theft</i>, where one object is
   *     created falsely claiming to be the key of an association
   *     actually keyed by another object.
   * <li>Preventing <i>value theft</i>, where untrusted code with
   *     access to a key object but not a weak map nevertheless
   *     obtains access to the value associated with that key in that
   *     weak map.
   * </ul>
   * We do so by
   * <ul>
   * <li>Making the name of the hidden property unguessable, so "[]"
   *     indexing, which we cannot intercept, cannot be used to access
   *     a property without knowing the name.
   * <li>Making the hidden property non-enumerable, so we need not
   *     worry about for-in loops or {@code Object.keys},
   * <li>monkey patching those reflective methods that would
   *     prevent extensions, to add this hidden property first,
   * <li>monkey patching those methods that would reveal this
   *     hidden property.
   * </ul>
   * Unfortunately, because of same-origin iframes, we cannot reliably
   * add this hidden property before an object becomes
   * non-extensible. Instead, if we encounter a non-extensible object
   * without a hidden record that we can detect (whether or not it has
   * a hidden record stored under a name secret to us), then we just
   * use the key object itself to represent its identity in a brute
   * force leaky map stored in the weak map, losing all the advantages
   * of weakness for these.
   */
  function getHiddenRecord(key) {
    if (key !== Object(key)) {
      throw new TypeError('Not an object: ' + key);
    }
    var hiddenRecord = key[HIDDEN_NAME];
    if (hiddenRecord && hiddenRecord.key === key) { return hiddenRecord; }
    if (!isExtensible(key)) {
      // Weak map must brute force, as explained in doc-comment above.
      return void 0;
    }

    // The hiddenRecord and the key point directly at each other, via
    // the "key" and HIDDEN_NAME properties respectively. The key
    // field is for quickly verifying that this hidden record is an
    // own property, not a hidden record from up the prototype chain.
    //
    // NOTE: Because this WeakMap emulation is meant only for systems like
    // SES where Object.prototype is frozen without any numeric
    // properties, it is ok to use an object literal for the hiddenRecord.
    // This has two advantages:
    // * It is much faster in a performance critical place
    // * It avoids relying on Object.create(null), which had been
    //   problematic on Chrome 28.0.1480.0. See
    //   https://code.google.com/p/google-caja/issues/detail?id=1687
    hiddenRecord = { key: key };

    // When using this WeakMap emulation on platforms where
    // Object.prototype might not be frozen and Object.create(null) is
    // reliable, use the following two commented out lines instead.
    // hiddenRecord = Object.create(null);
    // hiddenRecord.key = key;

    // Please contact us if you need this to work on platforms where
    // Object.prototype might not be frozen and
    // Object.create(null) might not be reliable.

    try {
      defProp(key, HIDDEN_NAME, {
        value: hiddenRecord,
        writable: false,
        enumerable: false,
        configurable: false
      });
      return hiddenRecord;
    } catch (error) {
      // Under some circumstances, isExtensible seems to misreport whether
      // the HIDDEN_NAME can be defined.
      // The circumstances have not been isolated, but at least affect
      // Node.js v0.10.26 on TravisCI / Linux, but not the same version of
      // Node.js on OS X.
      return void 0;
    }
  }

  /**
   * Monkey patch operations that would make their argument
   * non-extensible.
   *
   * <p>The monkey patched versions throw a TypeError if their
   * argument is not an object, so it should only be done to functions
   * that should throw a TypeError anyway if their argument is not an
   * object.
   */
  (function(){
    var oldFreeze = Object.freeze;
    defProp(Object, 'freeze', {
      value: function identifyingFreeze(obj) {
        getHiddenRecord(obj);
        return oldFreeze(obj);
      }
    });
    var oldSeal = Object.seal;
    defProp(Object, 'seal', {
      value: function identifyingSeal(obj) {
        getHiddenRecord(obj);
        return oldSeal(obj);
      }
    });
    var oldPreventExtensions = Object.preventExtensions;
    defProp(Object, 'preventExtensions', {
      value: function identifyingPreventExtensions(obj) {
        getHiddenRecord(obj);
        return oldPreventExtensions(obj);
      }
    });
  })();

  function constFunc(func) {
    func.prototype = null;
    return Object.freeze(func);
  }

  var calledAsFunctionWarningDone = false;
  function calledAsFunctionWarning() {
    // Future ES6 WeakMap is currently (2013-09-10) expected to reject WeakMap()
    // but we used to permit it and do it ourselves, so warn only.
    if (!calledAsFunctionWarningDone && typeof console !== 'undefined') {
      calledAsFunctionWarningDone = true;
      console.warn('WeakMap should be invoked as new WeakMap(), not ' +
          'WeakMap(). This will be an error in the future.');
    }
  }

  var nextId = 0;

  var OurWeakMap = function() {
    if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()
      calledAsFunctionWarning();
    }

    // We are currently (12/25/2012) never encountering any prematurely
    // non-extensible keys.
    var keys = []; // brute force for prematurely non-extensible keys.
    var values = []; // brute force for corresponding values.
    var id = nextId++;

    function get___(key, opt_default) {
      var index;
      var hiddenRecord = getHiddenRecord(key);
      if (hiddenRecord) {
        return id in hiddenRecord ? hiddenRecord[id] : opt_default;
      } else {
        index = keys.indexOf(key);
        return index >= 0 ? values[index] : opt_default;
      }
    }

    function has___(key) {
      var hiddenRecord = getHiddenRecord(key);
      if (hiddenRecord) {
        return id in hiddenRecord;
      } else {
        return keys.indexOf(key) >= 0;
      }
    }

    function set___(key, value) {
      var index;
      var hiddenRecord = getHiddenRecord(key);
      if (hiddenRecord) {
        hiddenRecord[id] = value;
      } else {
        index = keys.indexOf(key);
        if (index >= 0) {
          values[index] = value;
        } else {
          // Since some browsers preemptively terminate slow turns but
          // then continue computing with presumably corrupted heap
          // state, we here defensively get keys.length first and then
          // use it to update both the values and keys arrays, keeping
          // them in sync.
          index = keys.length;
          values[index] = value;
          // If we crash here, values will be one longer than keys.
          keys[index] = key;
        }
      }
      return this;
    }

    function delete___(key) {
      var hiddenRecord = getHiddenRecord(key);
      var index, lastIndex;
      if (hiddenRecord) {
        return id in hiddenRecord && delete hiddenRecord[id];
      } else {
        index = keys.indexOf(key);
        if (index < 0) {
          return false;
        }
        // Since some browsers preemptively terminate slow turns but
        // then continue computing with potentially corrupted heap
        // state, we here defensively get keys.length first and then use
        // it to update both the keys and the values array, keeping
        // them in sync. We update the two with an order of assignments,
        // such that any prefix of these assignments will preserve the
        // key/value correspondence, either before or after the delete.
        // Note that this needs to work correctly when index === lastIndex.
        lastIndex = keys.length - 1;
        keys[index] = void 0;
        // If we crash here, there's a void 0 in the keys array, but
        // no operation will cause a "keys.indexOf(void 0)", since
        // getHiddenRecord(void 0) will always throw an error first.
        values[index] = values[lastIndex];
        // If we crash here, values[index] cannot be found here,
        // because keys[index] is void 0.
        keys[index] = keys[lastIndex];
        // If index === lastIndex and we crash here, then keys[index]
        // is still void 0, since the aliasing killed the previous key.
        keys.length = lastIndex;
        // If we crash here, keys will be one shorter than values.
        values.length = lastIndex;
        return true;
      }
    }

    return Object.create(OurWeakMap.prototype, {
      get___:    { value: constFunc(get___) },
      has___:    { value: constFunc(has___) },
      set___:    { value: constFunc(set___) },
      delete___: { value: constFunc(delete___) }
    });
  };

  OurWeakMap.prototype = Object.create(Object.prototype, {
    get: {
      /**
       * Return the value most recently associated with key, or
       * opt_default if none.
       */
      value: function get(key, opt_default) {
        return this.get___(key, opt_default);
      },
      writable: true,
      configurable: true
    },

    has: {
      /**
       * Is there a value associated with key in this WeakMap?
       */
      value: function has(key) {
        return this.has___(key);
      },
      writable: true,
      configurable: true
    },

    set: {
      /**
       * Associate value with key in this WeakMap, overwriting any
       * previous association if present.
       */
      value: function set(key, value) {
        return this.set___(key, value);
      },
      writable: true,
      configurable: true
    },

    'delete': {
      /**
       * Remove any association for key in this WeakMap, returning
       * whether there was one.
       *
       * <p>Note that the boolean return here does not work like the
       * {@code delete} operator. The {@code delete} operator returns
       * whether the deletion succeeds at bringing about a state in
       * which the deleted property is absent. The {@code delete}
       * operator therefore returns true if the property was already
       * absent, whereas this {@code delete} method returns false if
       * the association was already absent.
       */
      value: function remove(key) {
        return this.delete___(key);
      },
      writable: true,
      configurable: true
    }
  });

  if (typeof HostWeakMap === 'function') {
    (function() {
      // If we got here, then the platform has a WeakMap but we are concerned
      // that it may refuse to store some key types. Therefore, make a map
      // implementation which makes use of both as possible.

      // In this mode we are always using double maps, so we are not proxy-safe.
      // This combination does not occur in any known browser, but we had best
      // be safe.
      if (doubleWeakMapCheckSilentFailure && typeof Proxy !== 'undefined') {
        Proxy = undefined;
      }

      function DoubleWeakMap() {
        if (!(this instanceof OurWeakMap)) {  // approximate test for new ...()
          calledAsFunctionWarning();
        }

        // Preferable, truly weak map.
        var hmap = new HostWeakMap();

        // Our hidden-property-based pseudo-weak-map. Lazily initialized in the
        // 'set' implementation; thus we can avoid performing extra lookups if
        // we know all entries actually stored are entered in 'hmap'.
        var omap = undefined;

        // Hidden-property maps are not compatible with proxies because proxies
        // can observe the hidden name and either accidentally expose it or fail
        // to allow the hidden property to be set. Therefore, we do not allow
        // arbitrary WeakMaps to switch to using hidden properties, but only
        // those which need the ability, and unprivileged code is not allowed
        // to set the flag.
        //
        // (Except in doubleWeakMapCheckSilentFailure mode in which case we
        // disable proxies.)
        var enableSwitching = false;

        function dget(key, opt_default) {
          if (omap) {
            return hmap.has(key) ? hmap.get(key)
                : omap.get___(key, opt_default);
          } else {
            return hmap.get(key, opt_default);
          }
        }

        function dhas(key) {
          return hmap.has(key) || (omap ? omap.has___(key) : false);
        }

        var dset;
        if (doubleWeakMapCheckSilentFailure) {
          dset = function(key, value) {
            hmap.set(key, value);
            if (!hmap.has(key)) {
              if (!omap) { omap = new OurWeakMap(); }
              omap.set(key, value);
            }
            return this;
          };
        } else {
          dset = function(key, value) {
            if (enableSwitching) {
              try {
                hmap.set(key, value);
              } catch (e) {
                if (!omap) { omap = new OurWeakMap(); }
                omap.set___(key, value);
              }
            } else {
              hmap.set(key, value);
            }
            return this;
          };
        }

        function ddelete(key) {
          var result = !!hmap['delete'](key);
          if (omap) { return omap.delete___(key) || result; }
          return result;
        }

        return Object.create(OurWeakMap.prototype, {
          get___:    { value: constFunc(dget) },
          has___:    { value: constFunc(dhas) },
          set___:    { value: constFunc(dset) },
          delete___: { value: constFunc(ddelete) },
          permitHostObjects___: { value: constFunc(function(token) {
            if (token === weakMapPermitHostObjects) {
              enableSwitching = true;
            } else {
              throw new Error('bogus call to permitHostObjects___');
            }
          })}
        });
      }
      DoubleWeakMap.prototype = OurWeakMap.prototype;
      module.exports = DoubleWeakMap;

      // define .constructor to hide OurWeakMap ctor
      Object.defineProperty(WeakMap.prototype, 'constructor', {
        value: WeakMap,
        enumerable: false,  // as default .constructor is
        configurable: true,
        writable: true
      });
    })();
  } else {
    // There is no host WeakMap, so we must use the emulation.

    // Emulated WeakMaps are incompatible with native proxies (because proxies
    // can observe the hidden name), so we must disable Proxy usage (in
    // ArrayLike and Domado, currently).
    if (typeof Proxy !== 'undefined') {
      Proxy = undefined;
    }

    module.exports = OurWeakMap;
  }
})();

},{}],25:[function(require,module,exports){
'use strict'

var weakMap = typeof WeakMap === 'undefined' ? require('weak-map') : WeakMap

var WebGLEWStruct = new weakMap()

function baseName(ext_name) {
  return ext_name.replace(/^[A-Z]+_/, '')
}

function initWebGLEW(gl) {
  var struct = WebGLEWStruct.get(gl)
  if(struct) {
    return struct
  }
  var extensions = {}
  var supported = gl.getSupportedExtensions()
  for(var i=0; i<supported.length; ++i) {
    var extName = supported[i]

    //Skip MOZ_ extensions
    if(extName.indexOf('MOZ_') === 0) {
      continue
    }
    var ext = gl.getExtension(supported[i])
    if(!ext) {
      continue
    }
    while(true) {
      extensions[extName] = ext
      var base = baseName(extName)
      if(base === extName) {
        break
      }
      extName = base
    }
  }
  WebGLEWStruct.set(gl, extensions)
  return extensions
}
module.exports = initWebGLEW
},{"weak-map":24}],26:[function(require,module,exports){
'use strict'

var webglew = require('webglew')
var createTexture = require('gl-texture2d')

module.exports = createFBO

var colorAttachmentArrays = null
var FRAMEBUFFER_UNSUPPORTED
var FRAMEBUFFER_INCOMPLETE_ATTACHMENT
var FRAMEBUFFER_INCOMPLETE_DIMENSIONS
var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT

function saveFBOState(gl) {
  var fbo = gl.getParameter(gl.FRAMEBUFFER_BINDING)
  var rbo = gl.getParameter(gl.RENDERBUFFER_BINDING)
  var tex = gl.getParameter(gl.TEXTURE_BINDING_2D)
  return [fbo, rbo, tex]
}

function restoreFBOState(gl, data) {
  gl.bindFramebuffer(gl.FRAMEBUFFER, data[0])
  gl.bindRenderbuffer(gl.RENDERBUFFER, data[1])
  gl.bindTexture(gl.TEXTURE_2D, data[2])
}

function lazyInitColorAttachments(gl, ext) {
  var maxColorAttachments = gl.getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL)
  colorAttachmentArrays = new Array(maxColorAttachments + 1)
  for(var i=0; i<=maxColorAttachments; ++i) {
    var x = new Array(maxColorAttachments)
    for(var j=0; j<i; ++j) {
      x[j] = gl.COLOR_ATTACHMENT0 + j
    }
    for(var j=i; j<maxColorAttachments; ++j) {
      x[j] = gl.NONE
    }
    colorAttachmentArrays[i] = x
  }
}

//Throw an appropriate error
function throwFBOError(status) {
  switch(status){
    case FRAMEBUFFER_UNSUPPORTED:
      throw new Error('gl-fbo: Framebuffer unsupported')
    case FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      throw new Error('gl-fbo: Framebuffer incomplete attachment')
    case FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      throw new Error('gl-fbo: Framebuffer incomplete dimensions')
    case FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      throw new Error('gl-fbo: Framebuffer incomplete missing attachment')
    default:
      throw new Error('gl-fbo: Framebuffer failed for unspecified reason')
  }
}

//Initialize a texture object
function initTexture(gl, width, height, type, format, attachment) {
  if(!type) {
    return null
  }
  var result = createTexture(gl, width, height, format, type)
  result.magFilter = gl.NEAREST
  result.minFilter = gl.NEAREST
  result.mipSamples = 1
  result.bind()
  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, result.handle, 0)
  return result
}

//Initialize a render buffer object
function initRenderBuffer(gl, width, height, component, attachment) {
  var result = gl.createRenderbuffer()
  gl.bindRenderbuffer(gl.RENDERBUFFER, result)
  gl.renderbufferStorage(gl.RENDERBUFFER, component, width, height)
  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, result)
  return result
}

//Rebuild the frame buffer
function rebuildFBO(fbo) {

  //Save FBO state
  var state = saveFBOState(fbo.gl)

  var gl = fbo.gl
  var handle = fbo.handle = gl.createFramebuffer()
  var width = fbo._shape[0]
  var height = fbo._shape[1]
  var numColors = fbo.color.length
  var ext = fbo._ext
  var useStencil = fbo._useStencil
  var useDepth = fbo._useDepth
  var colorType = fbo._colorType
  var extensions = webglew(gl)

  //Bind the fbo
  gl.bindFramebuffer(gl.FRAMEBUFFER, handle)
  
  //Allocate color buffers
  for(var i=0; i<numColors; ++i) {
    fbo.color[i] = initTexture(gl, width, height, colorType, gl.RGBA, gl.COLOR_ATTACHMENT0 + i)
  }
  if(numColors === 0) {
    fbo._color_rb = initRenderBuffer(gl, width, height, gl.RGBA4, gl.COLOR_ATTACHMENT0)
    if(ext) {
      ext.drawBuffersWEBGL(colorAttachmentArrays[0])
    }
  } else if(numColors > 1) {
    ext.drawBuffersWEBGL(colorAttachmentArrays[numColor])
  }

  //Allocate depth/stencil buffers
  if(extensions.WEBGL_depth_texture) {
    if(useStencil) {
      fbo.depth = initTexture(gl, width, height,
                          extensions.WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL,
                          gl.DEPTH_STENCIL,
                          gl.DEPTH_STENCIL_ATTACHMENT)
    } else if(useDepth) {
      fbo.depth = initTexture(gl, width, height,
                          gl.UNSIGNED_SHORT,
                          gl.DEPTH_COMPONENT,
                          gl.DEPTH_ATTACHMENT)
    }
  } else {
    if(useDepth && useStencil) {
      fbo._depth_rb = initRenderBuffer(gl, width, height, gl.DEPTH_STENCIL, gl.DEPTH_STENCIL_ATTACHMENT)
    } else if(useDepth) {
      fbo._depth_rb = initRenderBuffer(gl, width, height, gl.DEPTH_COMPONENT16, gl.DEPTH_ATTACHMENT)
    } else if(useStencil) {
      fbo._depth_rb = initRenderBuffer(gl, width, height, gl.STENCIL_INDEX, gl.STENCIL_ATTACHMENT)
    }
  }

  //Check frame buffer state
  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER)
  if(status !== gl.FRAMEBUFFER_COMPLETE) {

    //Release all partially allocated resources
    fbo._destroyed = true

    //Release all resources
    gl.bindFramebuffer(gl.FRAMEBUFFER, null)
    gl.deleteFramebuffer(fbo.handle)
    fbo.handle = null
    if(fbo.depth) {
      fbo.depth.dispose()
      fbo.depth = null
    }
    if(fbo._depth_rb) {
      gl.deleteRenderbuffer(fbo._depth_rb)
      fbo._depth_rb = null
    }
    for(var i=0; i<fbo.color.length; ++i) {
      fbo.color[i].dispose()
      fbo.color[i] = null
    }
    if(fbo._color_rb) {
      gl.deleteRenderbuffer(fbo._color_rb)
      fbo._color_rb = null
    }

    restoreFBOState(gl, state)

    //Throw the frame buffer error
    throwFBOError(status)
  }

  //Everything ok, let's get on with life
  restoreFBOState(gl, state)
}

function Framebuffer(gl, width, height, colorType, numColors, useDepth, useStencil, ext) {
  var extensions = webglew(gl)

  //Handle and set properties
  this.gl = gl
  this._shape = [width|0, height|0]
  this._destroyed = false
  this._ext = ext

  //Allocate buffers
  this.color = new Array(numColors)
  for(var i=0; i<numColors; ++i) {
    this.color[i] = null
  }
  this._color_rb = null
  this.depth = null
  this._depth_rb = null

  //Save depth and stencil flags
  this._colorType = colorType
  this._useDepth = useDepth
  this._useStencil = useStencil
  
  //Shape vector for resizing
  var parent = this
  var shapeVector = [width|0, height|0]
  Object.defineProperties(shapeVector, {
    0: {
      get: function() {
        return parent._shape[0]
      },
      set: function(w) {
        return parent.width = w
      }
    },
    1: {
      get: function() {
        return parent._shape[1]
      },
      set: function(h) {
        return parent.height = h
      }
    }
  })
  this._shapeVector = shapeVector

  //Initialize all attachments
  rebuildFBO(this)
}

var proto = Framebuffer.prototype

function reshapeFBO(fbo, w, h) {
  //If fbo is invalid, just skip this
  if(fbo._destroyed) {
    throw new Error('gl-fbo: Can\'t resize destroyed FBO')
  }

  //Don't resize if no change in shape
  if( (fbo._shape[0] === w) &&
      (fbo._shape[1] === h) ) {
    return
  }

  var gl = fbo.gl
  
  //Check parameter ranges
  var maxFBOSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)
  if( w < 0 || w > maxFBOSize || 
      h < 0 || h > maxFBOSize) {
    throw new Error('gl-fbo: Can\'t resize FBO, invalid dimensions')
  }

  //Update shape
  fbo._shape[0] = w
  fbo._shape[1] = h

  //Save framebuffer state
  var state = saveFBOState(gl)

  //Resize framebuffer attachments
  for(var i=0; i<fbo.color.length; ++i) {
    fbo.color[i].shape = fbo._shape
  }
  if(fbo._color_rb) {
    gl.bindRenderbuffer(gl.RENDERBUFFER, fbo._color_rb)
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, fbo._shape[0], fbo._shape[1])
  }
  if(fbo.depth) {
    fbo.depth.shape = fbo._shape
  }
  if(fbo._depth_rb) {
    gl.bindRenderbuffer(gl.RENDERBUFFER, fbo._depth_rb)
    if(fbo._useDepth && fbo._useStencil) {
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, fbo._shape[0], fbo._shape[1])
    } else if(fbo._useDepth) {
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, fbo._shape[0], fbo._shape[1])
    } else if(fbo._useStencil) {
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX, fbo._shape[0], fbo._shape[1])
    }
  }

  //Check FBO status after resize, if something broke then die in a fire
  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.handle)
  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER)
  if(status !== gl.FRAMEBUFFER_COMPLETE) {
    fbo.dispose()
    restoreFBOState(gl, state)
    throwFBOError(status)
  }
  
  //Restore framebuffer state
  restoreFBOState(gl, state)
}

Object.defineProperties(proto, {
  'shape': {
    get: function() {
      if(this._destroyed) {
        return [0,0]
      }
      return this._shapeVector
    },
    set: function(x) {
      if(!Array.isArray(x)) {
        x = [x|0, x|0]
      }
      if(x.length !== 2) {
        throw new Error('gl-fbo: Shape vector must be length 2')
      }

      var w = x[0]|0
      var h = x[1]|0
      reshapeFBO(this, w, h)

      return [w, h]
    },
    enumerable: false
  },
  'width': {
    get: function() {
      if(this._destroyed) {
        return 0
      }
      return this._shape[0]
    },
    set: function(w) {
      w = w|0
      reshapeFBO(this, w, this._shape[1])
      return w
    },
    enumerable: false
  },
  'height': {
    get: function() {
      if(this._destroyed) {
        return 0
      }
      return this._shape[1]
    },
    set: function(h) {
      h = h|0
      reshapeFBO(this, this._shape[0], h)
      return h
    },
    enumerable: false
  }
})

proto.bind = function() {
  if(this._destroyed) {
    return
  }
  var gl = this.gl
  gl.bindFramebuffer(gl.FRAMEBUFFER, this.handle)
  gl.viewport(0, 0, this._shape[0], this._shape[1])
}

proto.dispose = function() {
  if(this._destroyed) {
    return
  }
  this._destroyed = true
  var gl = this.gl
  gl.deleteFramebuffer(this.handle)
  this.handle = null
  if(this.depth) {
    this.depth.dispose()
    this.depth = null
  }
  if(this._depth_rb) {
    gl.deleteRenderbuffer(this._depth_rb)
    this._depth_rb = null
  }
  for(var i=0; i<this.color.length; ++i) {
    this.color[i].dispose()
    this.color[i] = null
  }
  if(this._color_rb) {
    gl.deleteRenderbuffer(this._color_rb)
    this._color_rb = null
  }
}

function createFBO(gl, width, height, options) {

  //Update frame buffer error code values
  if(!FRAMEBUFFER_UNSUPPORTED) {
    FRAMEBUFFER_UNSUPPORTED = gl.FRAMEBUFFER_UNSUPPORTED
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT = gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS = gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
  }

  var extensions = webglew(gl)
  
  //Lazily initialize color attachment arrays
  if(!colorAttachmentArrays && extensions.WEBGL_draw_buffers) {
    lazyInitColorAttachments(gl, extensions.WEBGL_draw_buffers)
  }

  //Special case: Can accept an array as argument
  if(Array.isArray(width)) {
    options = height
    height = width[1]|0
    width = width[0]|0
  }
  
  if(typeof width !== 'number') {
    throw new Error('gl-fbo: Missing shape parameter')
  }

  //Validate width/height properties
  var maxFBOSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)
  if(width < 0 || width > maxFBOSize || height < 0 || height > maxFBOSize) {
    throw new Error('gl-fbo: Parameters are too large for FBO')
  }

  //Handle each option type
  options = options || {}

  //Figure out number of color buffers to use
  var numColors = 1
  if('color' in options) {
    numColors = Math.max(options.color|0, 0)
    if(numColors < 0) {
      throw new Error('gl-fbo: Must specify a nonnegative number of colors')
    }
    if(numColors > 1) {
      //Check if multiple render targets supported
      var mrtext = extensions.WEBGL_draw_buffers
      if(!mrtext) {
        throw new Error('gl-fbo: Multiple draw buffer extension not supported')
      } else if(numColors > gl.getParameter(mrtext.MAX_COLOR_ATTACHMENTS_WEBGL)) {
        throw new Error('gl-fbo: Context does not support ' + numColors + ' draw buffers')
      }
    }
  }

  //Determine whether to use floating point textures
  var colorType = gl.UNSIGNED_BYTE
  if(options.float && numColors > 0) {
    if(!extensions.OES_texture_float) {
      throw new Error('gl-fbo: Context does not support floating point textures')
    }
    colorType = gl.FLOAT
  } else if(options.preferFloat && numColors > 0) {
    if(extensions.OES_texture_float) {
      colorType = gl.FLOAT
    }
  }

  //Check if we should use depth buffer
  var useDepth = true
  if('depth' in options) {
    useDepth = !!options.depth
  }

  //Check if we should use a stencil buffer
  var useStencil = false
  if('stencil' in options) {
    useStencil = !!options.stencil
  }

  return new Framebuffer(
    gl, 
    width, 
    height, 
    colorType, 
    numColors, 
    useDepth, 
    useStencil, 
    extensions.WEBGL_draw_buffers)
}
},{"gl-texture2d":77,"webglew":28}],27:[function(require,module,exports){
module.exports=require(24)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/node_modules/weak-map/weak-map.js":24}],28:[function(require,module,exports){
module.exports=require(25)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/webglew.js":25,"weak-map":27}],29:[function(require,module,exports){
module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};
},{}],30:[function(require,module,exports){
module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],31:[function(require,module,exports){
module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],32:[function(require,module,exports){
module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],33:[function(require,module,exports){
module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
},{}],34:[function(require,module,exports){
module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};
},{}],35:[function(require,module,exports){
module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};
},{}],36:[function(require,module,exports){
module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};
},{}],37:[function(require,module,exports){
module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],38:[function(require,module,exports){
module.exports = {
  create: require('./create')
  , clone: require('./clone')
  , copy: require('./copy')
  , identity: require('./identity')
  , transpose: require('./transpose')
  , invert: require('./invert')
  , adjoint: require('./adjoint')
  , determinant: require('./determinant')
  , multiply: require('./multiply')
  , translate: require('./translate')
  , scale: require('./scale')
  , rotate: require('./rotate')
  , rotateX: require('./rotateX')
  , rotateY: require('./rotateY')
  , rotateZ: require('./rotateZ')
  , fromRotationTranslation: require('./fromRotationTranslation')
  , fromQuat: require('./fromQuat')
  , frustum: require('./frustum')
  , perspective: require('./perspective')
  , ortho: require('./ortho')
  , lookAt: require('./lookAt')
  , str: require('./str')
}
},{"./adjoint":29,"./clone":30,"./copy":31,"./create":32,"./determinant":33,"./fromQuat":34,"./fromRotationTranslation":35,"./frustum":36,"./identity":37,"./invert":39,"./lookAt":40,"./multiply":41,"./ortho":42,"./perspective":43,"./rotate":44,"./rotateX":45,"./rotateY":46,"./rotateZ":47,"./scale":48,"./str":49,"./translate":50,"./transpose":51}],39:[function(require,module,exports){
module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};
},{}],40:[function(require,module,exports){
module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};
},{}],41:[function(require,module,exports){
module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};
},{}],42:[function(require,module,exports){
module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};
},{}],43:[function(require,module,exports){
module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};
},{}],44:[function(require,module,exports){
module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};
},{}],45:[function(require,module,exports){
module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};
},{}],46:[function(require,module,exports){
module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};
},{}],47:[function(require,module,exports){
module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};
},{}],48:[function(require,module,exports){
module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],49:[function(require,module,exports){
module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};
},{}],50:[function(require,module,exports){
module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};
},{}],51:[function(require,module,exports){
module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};
},{}],52:[function(require,module,exports){
"use strict"

var makeGameShell = require("game-shell")
var webglew = require("webglew")

function createGLShell(options) {
  options = options || {}
  
  var extensions = options.extensions || []

  //First create shell
  var shell = makeGameShell(options)
  var scale = shell.scale || 1
  var contextOptions = options.glOptions

  shell.on("init", function initGLNow() {
  
    //Create canvas
    var canvas = document.createElement("canvas")
    
    //Try initializing WebGL
    var gl = canvas.getContext("webgl", contextOptions) || 
             canvas.getContext("experimental-webgl", contextOptions)
    if(!gl) {
      shell.emit("gl-error", new Error("Unable to initialize WebGL"))
      return
    }
    
    //Check extensions
    var ext = webglew(gl)
    for(var i=0; i<extensions.length; ++i) {
      if(!(extensions[i] in ext)) {
        shell.emit("gl-error", new Error("Missing extension: " + extensions[i]))
        return
      }
    }

    //Set canvas style
    canvas.style.position = "absolute"
    canvas.style.left = "0px"
    canvas.style.top = "0px"
    shell.element.appendChild(canvas)

    //Add variables to game-shell
    shell.canvas = canvas
    shell.gl = gl

    //Load width/height
    resize()

    //Load default parameters
    shell.clearFlags = options.clearFlags === undefined ? (gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT) : options.clearFlags
    shell.clearColor = options.clearColor || [0,0,0,0]
    shell.clearDepth = options.clearDepth || 1.0
    shell.clearStencil = options.clearStencil || 0

    shell.on("resize", resize)

    //Hook render event
    shell.on("render", function renderGLNow(t) {
    
      //Bind default framebuffer
      gl.bindFramebuffer(gl.FRAMEBUFFER, null)
      
      //Set viewport
      gl.viewport(0, 0, (shell._width / scale)|0, (shell._height / scale)|0)

      //Clear buffers
      if(shell.clearFlags & gl.STENCIL_BUFFER_BIT) {
        gl.clearStencil(shell.clearStencil)
      }
      if(shell.clearFlags & gl.COLOR_BUFFER_BIT) {
        gl.clearColor(shell.clearColor[0], shell.clearColor[1], shell.clearColor[2], shell.clearColor[3])
      }
      if(shell.clearFlags & gl.DEPTH_BUFFER_BIT) {
        gl.clearDepth(shell.clearDepth)
      }
      if(shell.clearFlags) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)
      }
    
      //Render frame
      shell.emit("gl-render", t)
    })
    
    //WebGL initialized
    shell.emit("gl-init")
  })

  function resize() {
    var nw = (shell._width/scale)|0
    var nh = (shell._height/scale)|0
    shell.canvas.width = nw
    shell.canvas.height = nh
    shell.canvas.style.width = shell._width + 'px'
    shell.canvas.style.height = shell._height + 'px'
    shell.emit("gl-resize", nw, nh)
  }

  Object.defineProperty(shell, 'scale', {
    get: function() {
      return scale
    },
    set: function(_scale) {
      _scale = +_scale
      if((_scale <= 0) || isNaN(_scale) || (scale === _scale)) {
        return scale
      }
      scale = _scale
      resize()
      return scale
    }
  })

  Object.defineProperty(shell, "width", {
    get: function() {
      return (shell._width / scale)|0
    }
  })

  Object.defineProperty(shell, "height", {
    get: function() {
      return (shell._height / scale)|0
    }
  })

  Object.defineProperty(shell, "mouse", {
    get: function() {
      return [shell.mouseX/scale, shell.mouseY/scale]
    }
  })

  Object.defineProperty(shell, "prevMouse", {
    get: function() {
      return [shell.prevMouseX/scale, shell.prevMouseY/scale]
    }
  })

  return shell
}

module.exports = createGLShell
},{"game-shell":62,"webglew":64}],53:[function(require,module,exports){
if(typeof window.performance === "object") {
  if(window.performance.now) {
    module.exports = function() { return window.performance.now() }
  } else if(window.performance.webkitNow) {
    module.exports = function() { return window.performance.webkitNow() }
  }
} else if(Date.now) {
  module.exports = Date.now
} else {
  module.exports = function() { return (new Date()).getTime() }
}

},{}],54:[function(require,module,exports){
//Adapted from here: https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel

var prefix = "", _addEventListener, onwheel, support;

// detect event model
if ( window.addEventListener ) {
  _addEventListener = "addEventListener";
} else {
  _addEventListener = "attachEvent";
  prefix = "on";
}

// detect available wheel event
support = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
          document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
          "DOMMouseScroll"; // let's assume that remaining browsers are older Firefox

function _addWheelListener( elem, eventName, callback, useCapture ) {
  elem[ _addEventListener ]( prefix + eventName, support == "wheel" ? callback : function( originalEvent ) {
    !originalEvent && ( originalEvent = window.event );

    // create a normalized event object
    var event = {
      // keep a ref to the original event object
      originalEvent: originalEvent,
      target: originalEvent.target || originalEvent.srcElement,
      type: "wheel",
      deltaMode: originalEvent.type == "MozMousePixelScroll" ? 0 : 1,
      deltaX: 0,
      delatZ: 0,
      preventDefault: function() {
        originalEvent.preventDefault ?
          originalEvent.preventDefault() :
          originalEvent.returnValue = false;
      }
    };
    
    // calculate deltaY (and deltaX) according to the event
    if ( support == "mousewheel" ) {
      event.deltaY = - 1/40 * originalEvent.wheelDelta;
      // Webkit also support wheelDeltaX
      originalEvent.wheelDeltaX && ( event.deltaX = - 1/40 * originalEvent.wheelDeltaX );
    } else {
      event.deltaY = originalEvent.detail;
    }

    // it's time to fire the callback
    return callback( event );
  }, useCapture || false );
}

module.exports = function( elem, callback, useCapture ) {
  _addWheelListener( elem, support, callback, useCapture );

  // handle MozMousePixelScroll in older Firefox
  if( support == "DOMMouseScroll" ) {
    _addWheelListener( elem, "MozMousePixelScroll", callback, useCapture );
  }
};
},{}],55:[function(require,module,exports){
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 
// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
 
// MIT license
var lastTime = 0;
var vendors = ['ms', 'moz', 'webkit', 'o'];
for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
                               || window[vendors[x]+'CancelRequestAnimationFrame'];
}

if (!window.requestAnimationFrame)
    window.requestAnimationFrame = function(callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
          timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };

if (!window.cancelAnimationFrame)
    window.cancelAnimationFrame = function(id) {
        clearTimeout(id);
    };

},{}],56:[function(require,module,exports){
"use strict"

function compileSearch(funcName, predicate, reversed, extraArgs, useNdarray, earlyOut) {
  var code = [
    "function ", funcName, "(a,l,h,", extraArgs.join(","),  "){",
earlyOut ? "" : "var i=", (reversed ? "l-1" : "h+1"),
";while(l<=h){\
var m=(l+h)>>>1,x=a", useNdarray ? ".get(m)" : "[m]"]
  if(earlyOut) {
    if(predicate.indexOf("c") < 0) {
      code.push(";if(x===y){return m}else if(x<=y){")
    } else {
      code.push(";var p=c(x,y);if(p===0){return m}else if(p<=0){")
    }
  } else {
    code.push(";if(", predicate, "){i=m;")
  }
  if(reversed) {
    code.push("l=m+1}else{h=m-1}")
  } else {
    code.push("h=m-1}else{l=m+1}")
  }
  code.push("}")
  if(earlyOut) {
    code.push("return -1};")
  } else {
    code.push("return i};")
  }
  return code.join("")
}

function compileBoundsSearch(predicate, reversed, suffix, earlyOut) {
  var result = new Function([
  compileSearch("A", "x" + predicate + "y", reversed, ["y"], false, earlyOut),
  compileSearch("B", "x" + predicate + "y", reversed, ["y"], true, earlyOut),
  compileSearch("P", "c(x,y)" + predicate + "0", reversed, ["y", "c"], false, earlyOut),
  compileSearch("Q", "c(x,y)" + predicate + "0", reversed, ["y", "c"], true, earlyOut),
"function dispatchBsearch", suffix, "(a,y,c,l,h){\
if(a.shape){\
if(typeof(c)==='function'){\
return Q(a,(l===undefined)?0:l|0,(h===undefined)?a.shape[0]-1:h|0,y,c)\
}else{\
return B(a,(c===undefined)?0:c|0,(l===undefined)?a.shape[0]-1:l|0,y)\
}}else{\
if(typeof(c)==='function'){\
return P(a,(l===undefined)?0:l|0,(h===undefined)?a.length-1:h|0,y,c)\
}else{\
return A(a,(c===undefined)?0:c|0,(l===undefined)?a.length-1:l|0,y)\
}}}\
return dispatchBsearch", suffix].join(""))
  return result()
}

module.exports = {
  ge: compileBoundsSearch(">=", false, "GE"),
  gt: compileBoundsSearch(">", false, "GT"),
  lt: compileBoundsSearch("<", true, "LT"),
  le: compileBoundsSearch("<=", true, "LE"),
  eq: compileBoundsSearch("-", true, "EQ", true)
}

},{}],57:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)


  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? fn() : fns.push(fn)
  }

});

},{}],58:[function(require,module,exports){
"use strict"

function invert(hash) {
  var result = {}
  for(var i in hash) {
    if(hash.hasOwnProperty(i)) {
      result[hash[i]] = i
    }
  }
  return result
}

module.exports = invert
},{}],59:[function(require,module,exports){
module.exports=require(20)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray/node_modules/iota-array/iota.js":20}],60:[function(require,module,exports){
module.exports=require(18)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/node_modules/cwise-compiler/node_modules/uniq/uniq.js":18}],61:[function(require,module,exports){
var ua = typeof window !== 'undefined' ? window.navigator.userAgent : ''
  , isOSX = /OS X/.test(ua)
  , isOpera = /Opera/.test(ua)
  , maybeFirefox = !/like Gecko/.test(ua) && !isOpera

var i, output = module.exports = {
  0:  isOSX ? '<menu>' : '<UNK>'
, 1:  '<mouse 1>'
, 2:  '<mouse 2>'
, 3:  '<break>'
, 4:  '<mouse 3>'
, 5:  '<mouse 4>'
, 6:  '<mouse 5>'
, 8:  '<backspace>'
, 9:  '<tab>'
, 12: '<clear>'
, 13: '<enter>'
, 16: '<shift>'
, 17: '<control>'
, 18: '<alt>'
, 19: '<pause>'
, 20: '<caps-lock>'
, 21: '<ime-hangul>'
, 23: '<ime-junja>'
, 24: '<ime-final>'
, 25: '<ime-kanji>'
, 27: '<escape>'
, 28: '<ime-convert>'
, 29: '<ime-nonconvert>'
, 30: '<ime-accept>'
, 31: '<ime-mode-change>'
, 27: '<escape>'
, 32: '<space>'
, 33: '<page-up>'
, 34: '<page-down>'
, 35: '<end>'
, 36: '<home>'
, 37: '<left>'
, 38: '<up>'
, 39: '<right>'
, 40: '<down>'
, 41: '<select>'
, 42: '<print>'
, 43: '<execute>'
, 44: '<snapshot>'
, 45: '<insert>'
, 46: '<delete>'
, 47: '<help>'
, 91: '<meta>'  // meta-left -- no one handles left and right properly, so we coerce into one.
, 92: '<meta>'  // meta-right
, 93: isOSX ? '<meta>' : '<menu>'      // chrome,opera,safari all report this for meta-right (osx mbp).
, 95: '<sleep>'
, 106: '<num-*>'
, 107: '<num-+>'
, 108: '<num-enter>'
, 109: '<num-->'
, 110: '<num-.>'
, 111: '<num-/>'
, 144: '<num-lock>'
, 145: '<scroll-lock>'
, 160: '<shift-left>'
, 161: '<shift-right>'
, 162: '<control-left>'
, 163: '<control-right>'
, 164: '<alt-left>'
, 165: '<alt-right>'
, 166: '<browser-back>'
, 167: '<browser-forward>'
, 168: '<browser-refresh>'
, 169: '<browser-stop>'
, 170: '<browser-search>'
, 171: '<browser-favorites>'
, 172: '<browser-home>'

  // ff/osx reports '<volume-mute>' for '-'
, 173: isOSX && maybeFirefox ? '-' : '<volume-mute>'
, 174: '<volume-down>'
, 175: '<volume-up>'
, 176: '<next-track>'
, 177: '<prev-track>'
, 178: '<stop>'
, 179: '<play-pause>'
, 180: '<launch-mail>'
, 181: '<launch-media-select>'
, 182: '<launch-app 1>'
, 183: '<launch-app 2>'
, 186: ';'
, 187: '='
, 188: ','
, 189: '-'
, 190: '.'
, 191: '/'
, 192: '`'
, 219: '['
, 220: '\\'
, 221: ']'
, 222: "'"
, 223: '<meta>'
, 224: '<meta>'       // firefox reports meta here.
, 226: '<alt-gr>'
, 229: '<ime-process>'
, 231: isOpera ? '`' : '<unicode>'
, 246: '<attention>'
, 247: '<crsel>'
, 248: '<exsel>'
, 249: '<erase-eof>'
, 250: '<play>'
, 251: '<zoom>'
, 252: '<no-name>'
, 253: '<pa-1>'
, 254: '<clear>'
}

for(i = 58; i < 65; ++i) {
  output[i] = String.fromCharCode(i)
}

// 0-9
for(i = 48; i < 58; ++i) {
  output[i] = (i - 48)+''
}

// A-Z
for(i = 65; i < 91; ++i) {
  output[i] = String.fromCharCode(i)
}

// num0-9
for(i = 96; i < 106; ++i) {
  output[i] = '<num-'+(i - 96)+'>'
}

// F1-F24
for(i = 112; i < 136; ++i) {
  output[i] = 'F'+(i-111)
}

},{}],62:[function(require,module,exports){
"use strict"

var EventEmitter = require("events").EventEmitter
  , util         = require("util")
  , domready     = require("domready")
  , vkey         = require("vkey")
  , invert       = require("invert-hash")
  , uniq         = require("uniq")
  , bsearch      = require("binary-search-bounds")
  , iota         = require("iota-array")
  , min          = Math.min

//Browser compatibility hacks
require("./lib/raf-polyfill.js")
var addMouseWheel = require("./lib/mousewheel-polyfill.js")
var hrtime = require("./lib/hrtime-polyfill.js")

//Remove angle braces and other useless crap
var filtered_vkey = (function() {
  var result = new Array(256)
    , i, j, k
  for(i=0; i<256; ++i) {
    result[i] = "UNK"
  }
  for(i in vkey) {
    k = vkey[i]
    if(k.charAt(0) === '<' && k.charAt(k.length-1) === '>') {
      k = k.substring(1, k.length-1)
    }
    k = k.replace(/\s/g, "-")
    result[parseInt(i)] = k
  }
  return result
})()

//Compute minimal common set of keyboard functions
var keyNames = uniq(Object.keys(invert(filtered_vkey)))

//Translates a virtual keycode to a normalized keycode
function virtualKeyCode(key) {
  return bsearch.eq(keyNames, key)
}

//Maps a physical keycode to a normalized keycode
function physicalKeyCode(key) {
  return virtualKeyCode(filtered_vkey[key])
}

//Game shell
function GameShell() {
  EventEmitter.call(this)
  this._curKeyState  = new Array(keyNames.length)
  this._pressCount   = new Array(keyNames.length)
  this._releaseCount = new Array(keyNames.length)
  
  this._tickInterval = null
  this._rafHandle = null
  this._tickRate = 0
  this._lastTick = hrtime()
  this._frameTime = 0.0
  this._paused = true
  this._width = 0
  this._height = 0
  
  this._wantFullscreen = false
  this._wantPointerLock = false
  this._fullscreenActive = false
  this._pointerLockActive = false
  
  this._render = render.bind(undefined, this)

  this.preventDefaults = true
  this.stopPropagation = false
  
  for(var i=0; i<keyNames.length; ++i) {
    this._curKeyState[i] = false
    this._pressCount[i] = this._releaseCount[i] = 0
  }
  
  //Public members
  this.element = null
  this.bindings = {}
  this.frameSkip = 100.0
  this.tickCount = 0
  this.frameCount = 0
  this.startTime = hrtime()
  this.tickTime = this._tickRate
  this.frameTime = 10.0
  this.stickyFullscreen = false
  this.stickyPointLock = false
  
  //Scroll stuff
  this.scroll = [0,0,0]
    
  //Mouse state
  this.mouseX = 0
  this.mouseY = 0
  this.prevMouseX = 0
  this.prevMouseY = 0
}

util.inherits(GameShell, EventEmitter)

var proto = GameShell.prototype

//Bind keynames
proto.keyNames = keyNames

//Binds a virtual keyboard event to a physical key
proto.bind = function(virtual_key) {
  //Look up previous key bindings
  var arr
  if(virtual_key in this.bindings) {
    arr = this.bindings[virtual_key]
  } else {
    arr = []
  }
  //Add keys to list
  var physical_key
  for(var i=1, n=arguments.length; i<n; ++i) {
    physical_key = arguments[i]
    if(virtualKeyCode(physical_key) >= 0) {
      arr.push(physical_key)
    } else if(physical_key in this.bindings) {
      var keybinds = this.bindings[physical_key]
      for(var j=0; j<keybinds.length; ++j) {
        arr.push(keybinds[j])
      }
    }
  }
  //Remove any duplicate keys
  arr = uniq(arr)
  if(arr.length > 0) {
    this.bindings[virtual_key] = arr
  }
  this.emit('bind', virtual_key, arr)
}

//Unbinds a virtual keyboard event
proto.unbind = function(virtual_key) {
  if(virtual_key in this.bindings) {
    delete this.bindings[virtual_key]
  }
  this.emit('unbind', virtual_key)
}

//Checks if a key is set in a given state
function lookupKey(state, bindings, key) {
  if(key in bindings) {
    var arr = bindings[key]
    for(var i=0, n=arr.length; i<n; ++i) {
      if(state[virtualKeyCode(arr[i])]) {
        return true
      }
    }
    return false
  }
  var kc = virtualKeyCode(key)
  if(kc >= 0) {
    return state[kc]
  }
  return false
}

//Checks if a key is set in a given state
function lookupCount(state, bindings, key) {
  if(key in bindings) {
    var arr = bindings[key], r = 0
    for(var i=0, n=arr.length; i<n; ++i) {
      r += state[virtualKeyCode(arr[i])]
    }
    return r
  }
  var kc = virtualKeyCode(key)
  if(kc >= 0) {
    return state[kc]
  }
  return 0
}

//Checks if a key (either physical or virtual) is currently held down
proto.down = function(key) {
  return lookupKey(this._curKeyState, this.bindings, key)
}

//Checks if a key was ever down
proto.wasDown = function(key) {
  return this.down(key) || !!this.press(key)
}

//Opposite of down
proto.up = function(key) {
  return !this.down(key)
}

//Checks if a key was released during previous frame
proto.wasUp = function(key) {
  return this.up(key) || !!this.release(key)
}

//Returns the number of times a key was pressed since last tick
proto.press = function(key) {
  return lookupCount(this._pressCount, this.bindings, key)
}

//Returns the number of times a key was released since last tick
proto.release = function(key) {
  return lookupCount(this._releaseCount, this.bindings, key)
}

//Pause/unpause the game loop
Object.defineProperty(proto, "paused", {
  get: function() {
    return this._paused
  },
  set: function(state) {
    var ns = !!state
    if(ns !== this._paused) {
      if(!this._paused) {
        this._paused = true
        this._frameTime = min(1.0, (hrtime() - this._lastTick) / this._tickRate)
        clearInterval(this._tickInterval)
        //cancelAnimationFrame(this._rafHandle)
      } else {
        this._paused = false
        this._lastTick = hrtime() - Math.floor(this._frameTime * this._tickRate)
        this._tickInterval = setInterval(tick, this._tickRate, this)
        this._rafHandle = requestAnimationFrame(this._render)
      }
    }
  }
})

//Fullscreen state toggle

function tryFullscreen(shell) {
  //Request full screen
  var elem = shell.element
  
  if(shell._wantFullscreen && !shell._fullscreenActive) {
    var fs = elem.requestFullscreen ||
             elem.requestFullScreen ||
             elem.webkitRequestFullscreen ||
             elem.webkitRequestFullScreen ||
             elem.mozRequestFullscreen ||
             elem.mozRequestFullScreen ||
             function() {}
    fs.call(elem)
  }
  if(shell._wantPointerLock && !shell._pointerLockActive) {
    var pl =  elem.requestPointerLock ||
              elem.webkitRequestPointerLock ||
              elem.mozRequestPointerLock ||
              elem.msRequestPointerLock ||
              elem.oRequestPointerLock ||
              function() {}
    pl.call(elem)
  }
}

var cancelFullscreen = document.exitFullscreen ||
                       document.cancelFullscreen ||  //Why can no one agree on this?
                       document.cancelFullScreen ||
                       document.webkitCancelFullscreen ||
                       document.webkitCancelFullScreen ||
                       document.mozCancelFullscreen ||
                       document.mozCancelFullScreen ||
                       function(){}

Object.defineProperty(proto, "fullscreen", {
  get: function() {
    return this._fullscreenActive
  },
  set: function(state) {
    var ns = !!state
    if(!ns) {
      this._wantFullscreen = false
      cancelFullscreen.call(document)
    } else {
      this._wantFullscreen = true
      tryFullscreen(this)
    }
    return this._fullscreenActive
  }
})

function handleFullscreen(shell) {
  shell._fullscreenActive = document.fullscreen ||
                            document.mozFullScreen ||
                            document.webkitIsFullScreen ||
                            false
  if(!shell.stickyFullscreen && shell._fullscreenActive) {
    shell._wantFullscreen = false
  }
}

//Pointer lock state toggle
var exitPointerLock = document.exitPointerLock ||
                      document.webkitExitPointerLock ||
                      document.mozExitPointerLock ||
                      function() {}

Object.defineProperty(proto, "pointerLock", {
  get: function() {
    return this._pointerLockActive
  },
  set: function(state) {
    var ns = !!state
    if(!ns) {
      this._wantPointerLock = false
      exitPointerLock.call(document)
    } else {
      this._wantPointerLock = true
      tryFullscreen(this)
    }
    return this._pointerLockActive
  }
})

function handlePointerLockChange(shell, event) {
  shell._pointerLockActive = shell.element === (
      document.pointerLockElement ||
      document.mozPointerLockElement ||
      document.webkitPointerLockElement ||
      null)
  if(!shell.stickyPointerLock && shell._pointerLockActive) {
    shell._wantPointerLock = false
  }
}

//Width and height
Object.defineProperty(proto, "width", {
  get: function() {
    return this.element.clientWidth
  }
})
Object.defineProperty(proto, "height", {
  get: function() {
    return this.element.clientHeight
  }
})

//Set key state
function setKeyState(shell, key, state) {
  var ps = shell._curKeyState[key]
  if(ps !== state) {
    if(state) {
      shell._pressCount[key]++
    } else {
      shell._releaseCount[key]++
    }
    shell._curKeyState[key] = state
  }
}

//Ticks the game state one update
function tick(shell) {
  var skip = hrtime() + shell.frameSkip
    , pCount = shell._pressCount
    , rCount = shell._releaseCount
    , i, s, t
    , tr = shell._tickRate
    , n = keyNames.length
  while(!shell._paused &&
        hrtime() >= shell._lastTick + tr) {
    
    //Skip frames if we are over budget
    if(hrtime() > skip) {
      shell._lastTick = hrtime() + tr
      return
    }
    
    //Tick the game
    s = hrtime()
    shell.emit("tick")
    t = hrtime()
    shell.tickTime = t - s
    
    //Update counters and time
    ++shell.tickCount
    shell._lastTick += tr
    
    //Shift input state
    for(i=0; i<n; ++i) {
      pCount[i] = rCount[i] = 0
    }
    if(shell._pointerLockActive) {
      shell.prevMouseX = shell.mouseX = shell.width>>1
      shell.prevMouseY = shell.mouseY = shell.height>>1
    } else {
      shell.prevMouseX = shell.mouseX
      shell.prevMouseY = shell.mouseY
    }
    shell.scroll[0] = shell.scroll[1] = shell.scroll[2] = 0
  }
}

//Render stuff
function render(shell) {

  //Request next frame
  shell._rafHandle = requestAnimationFrame(shell._render)

  //Tick the shell
  tick(shell)
  
  //Compute frame time
  var dt
  if(shell._paused) {
    dt = shell._frameTime
  } else {
    dt = min(1.0, (hrtime() - shell._lastTick) / shell._tickRate)
  }
  
  //Draw a frame
  ++shell.frameCount
  var s = hrtime()
  shell.emit("render", dt)
  var t = hrtime()
  shell.frameTime = t - s
  
}

function isFocused(shell) {
  return (document.activeElement === document.body) ||
         (document.activeElement === shell.element)
}

function handleEvent(shell, ev) {
  if(shell.preventDefaults) {
    ev.preventDefault()
  }
  if(shell.stopPropagation) {
    ev.stopPropagation()
  }
}

//Set key up
function handleKeyUp(shell, ev) {
  handleEvent(shell, ev)
  var kc = physicalKeyCode(ev.keyCode || ev.char || ev.which || ev.charCode)
  if(kc >= 0) {
    setKeyState(shell, kc, false)
  }
}

//Set key down
function handleKeyDown(shell, ev) {
  if(!isFocused(shell)) {
    return
  }
  handleEvent(shell, ev)
  if(ev.metaKey) {
    //Hack: Clear key state when meta gets pressed to prevent keys sticking
    handleBlur(shell, ev)
  } else {
    var kc = physicalKeyCode(ev.keyCode || ev.char || ev.which || ev.charCode)
    if(kc >= 0) {
      setKeyState(shell, kc, true)
    }
  }
}

//Mouse events are really annoying
var mouseCodes = iota(32).map(function(n) {
  return virtualKeyCode("mouse-" + (n+1))
})

function setMouseButtons(shell, buttons) {
  for(var i=0; i<32; ++i) {
    setKeyState(shell, mouseCodes[i], !!(buttons & (1<<i)))
  }
}

function handleMouseMove(shell, ev) {
  handleEvent(shell, ev)
  if(shell._pointerLockActive) {
    var movementX = ev.movementX       ||
                    ev.mozMovementX    ||
                    ev.webkitMovementX ||
                    0,
        movementY = ev.movementY       ||
                    ev.mozMovementY    ||
                    ev.webkitMovementY ||
                    0
    shell.mouseX += movementX
    shell.mouseY += movementY
  } else {
    shell.mouseX = ev.clientX - shell.element.offsetLeft
    shell.mouseY = ev.clientY - shell.element.offsetTop
  }
  return false
}

function handleMouseDown(shell, ev) {
  handleEvent(shell, ev)
  setKeyState(shell, mouseCodes[ev.button], true)
  return false
}

function handleMouseUp(shell, ev) {
  handleEvent(shell, ev)
  setKeyState(shell, mouseCodes[ev.button], false)
  return false
}

function handleMouseEnter(shell, ev) {
  handleEvent(shell, ev)
  if(shell._pointerLockActive) {
    shell.prevMouseX = shell.mouseX = shell.width>>1
    shell.prevMouseY = shell.mouseY = shell.height>>1
  } else {
    shell.prevMouseX = shell.mouseX = ev.clientX - shell.element.offsetLeft
    shell.prevMouseY = shell.mouseY = ev.clientY - shell.element.offsetTop
  }
  return false
}

function handleMouseLeave(shell, ev) {
  handleEvent(shell, ev)
  setMouseButtons(shell, 0)
  return false
}

//Handle mouse wheel events
function handleMouseWheel(shell, ev) {
  handleEvent(shell, ev)
  var scale = 1
  switch(ev.deltaMode) {
    case 0: //Pixel
      scale = 1
    break
    case 1: //Line
      scale = 12
    break
    case 2: //Page
       scale = shell.height
    break
  }
  //Add scroll
  shell.scroll[0] +=  ev.deltaX * scale
  shell.scroll[1] +=  ev.deltaY * scale
  shell.scroll[2] += (ev.deltaZ * scale)||0.0
  return false
}

function handleContexMenu(shell, ev) {
  handleEvent(shell, ev)
  return false
}

function handleBlur(shell, ev) {
  var n = keyNames.length
    , c = shell._curKeyState
    , r = shell._releaseCount
    , i
  for(i=0; i<n; ++i) {
    if(c[i]) {
      ++r[i]
    }
    c[i] = false
  }
  return false
}

function handleResizeElement(shell, ev) {
  var w = shell.element.clientWidth|0
  var h = shell.element.clientHeight|0
  if((w !== shell._width) || (h !== shell._height)) {
    shell._width = w
    shell._height = h
    shell.emit("resize", w, h)
  }
}

function makeDefaultContainer() {
  var container = document.createElement("div")
  container.tabindex = 1
  container.style.position = "absolute"
  container.style.left = "0px"
  container.style.right = "0px"
  container.style.top = "0px"
  container.style.bottom = "0px"
  container.style.height = "100%"
  container.style.overflow = "hidden"
  document.body.appendChild(container)
  document.body.style.overflow = "hidden" //Prevent bounce
  document.body.style.height = "100%"
  return container
}

function createShell(options) {
  options = options || {}
  
  //Check fullscreen and pointer lock flags
  var useFullscreen = !!options.fullscreen
  var usePointerLock = useFullscreen
  if(typeof options.pointerLock !== undefined) {
    usePointerLock = !!options.pointerLock
  }
  
  //Create initial shell
  var shell = new GameShell()
  shell._tickRate = options.tickRate || 30
  shell.frameSkip = options.frameSkip || (shell._tickRate+5) * 5
  shell.stickyFullscreen = !!options.stickyFullscreen || !!options.sticky
  shell.stickyPointerLock = !!options.stickPointerLock || !options.sticky
  
  //Set bindings
  if(options.bindings) {
    shell.bindings = bindings
  }
  
  //Wait for dom to intiailize
  setTimeout(function() { domready(function initGameShell() {
    
    //Retrieve element
    var element = options.element
    if(typeof element === "string") {
      var e = document.querySelector(element)
      if(!e) {
        e = document.getElementById(element)
      }
      if(!e) {
        e = document.getElementByClass(element)[0]
      }
      if(!e) {
        e = makeDefaultContainer()
      }
      shell.element = e
    } else if(typeof element === "object" && !!element) {
      shell.element = element
    } else if(typeof element === "function") {
      shell.element = element()
    } else {
      shell.element = makeDefaultContainer()
    }
    
    //Disable user-select
    if(shell.element.style) {
      shell.element.style["-webkit-touch-callout"] = "none"
      shell.element.style["-webkit-user-select"] = "none"
      shell.element.style["-khtml-user-select"] = "none"
      shell.element.style["-moz-user-select"] = "none"
      shell.element.style["-ms-user-select"] = "none"
      shell.element.style["user-select"] = "none"
    }
    
    //Hook resize handler
    shell._width = shell.element.clientWidth
    shell._height = shell.element.clientHeight
    var handleResize = handleResizeElement.bind(undefined, shell)
    if(typeof MutationObserver !== "undefined") {
      var observer = new MutationObserver(handleResize)
      observer.observe(shell.element, {
        attributes: true,
        subtree: true
      })
    } else {
      shell.element.addEventListener("DOMSubtreeModified", handleResize, false)
    }
    window.addEventListener("resize", handleResize, false)
    
    //Hook keyboard listener
    window.addEventListener("keydown", handleKeyDown.bind(undefined, shell), false)
    window.addEventListener("keyup", handleKeyUp.bind(undefined, shell), false)
    
    //Disable right click
    shell.element.oncontextmenu = handleContexMenu.bind(undefined, shell)
    
    //Hook mouse listeners
    shell.element.addEventListener("mousedown", handleMouseDown.bind(undefined, shell), false)
    shell.element.addEventListener("mouseup", handleMouseUp.bind(undefined, shell), false)
    shell.element.addEventListener("mousemove", handleMouseMove.bind(undefined, shell), false)
    shell.element.addEventListener("mouseenter", handleMouseEnter.bind(undefined, shell), false)
    
    //Mouse leave
    var leave = handleMouseLeave.bind(undefined, shell)
    shell.element.addEventListener("mouseleave", leave, false)
    shell.element.addEventListener("mouseout", leave, false)
    window.addEventListener("mouseleave", leave, false)
    window.addEventListener("mouseout", leave, false)
    
    //Blur event 
    var blur = handleBlur.bind(undefined, shell)
    shell.element.addEventListener("blur", blur, false)
    shell.element.addEventListener("focusout", blur, false)
    shell.element.addEventListener("focus", blur, false)
    window.addEventListener("blur", blur, false)
    window.addEventListener("focusout", blur, false)
    window.addEventListener("focus", blur, false)

    //Mouse wheel handler
    addMouseWheel(shell.element, handleMouseWheel.bind(undefined, shell), false)

    //Fullscreen handler
    var fullscreenChange = handleFullscreen.bind(undefined, shell)
    document.addEventListener("fullscreenchange", fullscreenChange, false)
    document.addEventListener("mozfullscreenchange", fullscreenChange, false)
    document.addEventListener("webkitfullscreenchange", fullscreenChange, false)

    //Stupid fullscreen hack
    shell.element.addEventListener("click", tryFullscreen.bind(undefined, shell), false)

    //Pointer lock change handler
    var pointerLockChange = handlePointerLockChange.bind(undefined, shell)
    document.addEventListener("pointerlockchange", pointerLockChange, false)
    document.addEventListener("mozpointerlockchange", pointerLockChange, false)
    document.addEventListener("webkitpointerlockchange", pointerLockChange, false)
    document.addEventListener("pointerlocklost", pointerLockChange, false)
    document.addEventListener("webkitpointerlocklost", pointerLockChange, false)
    document.addEventListener("mozpointerlocklost", pointerLockChange, false)
    
    //Update flags
    shell.fullscreen = useFullscreen
    shell.pointerLock = usePointerLock
  
    //Default mouse button aliases
    shell.bind("mouse-left",   "mouse-1")
    shell.bind("mouse-right",  "mouse-3")
    shell.bind("mouse-middle", "mouse-2")
    
    //Initialize tick counter
    shell._lastTick = hrtime()
    shell.startTime = hrtime()

    //Unpause shell
    shell.paused = false
    
    //Emit initialize event
    shell.emit("init")
  })}, 0)
  
  return shell
}

module.exports = createShell

},{"./lib/hrtime-polyfill.js":53,"./lib/mousewheel-polyfill.js":54,"./lib/raf-polyfill.js":55,"binary-search-bounds":56,"domready":57,"events":8,"invert-hash":58,"iota-array":59,"uniq":60,"util":12,"vkey":61}],63:[function(require,module,exports){
module.exports=require(24)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/node_modules/weak-map/weak-map.js":24}],64:[function(require,module,exports){
module.exports=require(25)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/webglew.js":25,"weak-map":63}],65:[function(require,module,exports){
module.exports=require(14)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/ndarray-ops.js":14,"cwise-compiler":66}],66:[function(require,module,exports){
module.exports=require(15)
},{"./lib/thunk.js":68,"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/node_modules/cwise-compiler/compiler.js":15}],67:[function(require,module,exports){
module.exports=require(16)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/node_modules/cwise-compiler/lib/compile.js":16,"uniq":69}],68:[function(require,module,exports){
module.exports=require(17)
},{"./compile.js":67,"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/node_modules/cwise-compiler/lib/thunk.js":17}],69:[function(require,module,exports){
module.exports=require(18)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray-ops/node_modules/cwise-compiler/node_modules/uniq/uniq.js":18}],70:[function(require,module,exports){
module.exports=require(19)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray/ndarray.js":19,"buffer":4,"iota-array":71}],71:[function(require,module,exports){
module.exports=require(20)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/ndarray/node_modules/iota-array/iota.js":20}],72:[function(require,module,exports){
module.exports=require(21)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/typedarray-pool/node_modules/bit-twiddle/twiddle.js":21}],73:[function(require,module,exports){
module.exports=require(22)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/typedarray-pool/node_modules/dup/dup.js":22}],74:[function(require,module,exports){
module.exports=require(23)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/typedarray-pool/pool.js":23,"bit-twiddle":72,"buffer":4,"dup":73}],75:[function(require,module,exports){
module.exports=require(24)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/node_modules/weak-map/weak-map.js":24}],76:[function(require,module,exports){
module.exports=require(25)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/webglew.js":25,"weak-map":75}],77:[function(require,module,exports){
'use strict'

var ndarray = require('ndarray')
var ops     = require('ndarray-ops')
var pool    = require('typedarray-pool')
var webglew = require('webglew')

module.exports = createTexture2D

var linearTypes = null
var filterTypes = null
var wrapTypes   = null

function lazyInitLinearTypes(gl) {
  linearTypes = [
    gl.LINEAR,
    gl.NEAREST_MIPMAP_LINEAR,
    gl.LINEAR_MIPMAP_NEAREST,
    gl.LINEAR_MIPMAP_NEAREST
  ]
  filterTypes = [
    gl.NEAREST,
    gl.LINEAR,
    gl.NEAREST_MIPMAP_NEAREST,
    gl.NEAREST_MIPMAP_LINEAR,
    gl.LINEAR_MIPMAP_NEAREST,
    gl.LINEAR_MIPMAP_LINEAR
  ]
  wrapTypes = [
    gl.REPEAT,
    gl.CLAMP_TO_EDGE,
    gl.MIRRORED_REPEAT
  ]
}

var convertFloatToUint8 = function(out, inp) {
  ops.muls(out, inp, 255.0)
}

function reshapeTexture(tex, w, h) {
  var gl = tex.gl
  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(w < 0 || w > maxSize || h < 0 || h > maxSize) {
    throw new Error('gl-texture2d: Invalid texture size')
  }
  tex._shape = [w, h]
  tex.bind()
  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null)
  tex._mipLevels = [0]
  return tex
}

function Texture2D(gl, handle, width, height, format, type) {
  this.gl = gl
  this.handle = handle
  this.format = format
  this.type = type
  this._shape = [width, height]
  this._mipLevels = [0]
  this._magFilter = gl.NEAREST
  this._minFilter = gl.NEAREST
  this._wrapS = gl.CLAMP_TO_EDGE
  this._wrapT = gl.CLAMP_TO_EDGE
  this._anisoSamples = 1

  var parent = this
  var wrapVector = [this._wrapS, this._wrapT]
  Object.defineProperties(wrapVector, [
    {
      get: function() {
        return parent._wrapS
      },
      set: function(v) {
        return parent.wrapS = v
      }
    },
    {
      get: function() {
        return parent._wrapT
      },
      set: function(v) {
        return parent.wrapT = v
      }
    }
  ])
  this._wrapVector = wrapVector

  var shapeVector = [this._shape[0], this._shape[1]]
  Object.defineProperties(shapeVector, [
    {
      get: function() {
        return parent._shape[0]
      },
      set: function(v) {
        return parent.width = v
      }
    },
    {
      get: function() {
        return parent._shape[1]
      },
      set: function(v) {
        return parent.height = v
      }
    }
  ])
  this._shapeVector = shapeVector
}

var proto = Texture2D.prototype

Object.defineProperties(proto, {
  minFilter: {
    get: function() {
      return this._minFilter
    },
    set: function(v) {
      this.bind()
      var gl = this.gl
      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
        if(!webglew(gl).texture_float_linear) {
          v = gl.NEAREST
        }
      }
      if(filterTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown filter mode ' + v)
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)
      return this._minFilter = v
    }
  },
  magFilter: {
    get: function() {
      return this._magFilter
    },
    set: function(v) {
      this.bind()
      var gl = this.gl
      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
        if(!webglew(gl).texture_float_linear) {
          v = gl.NEAREST
        }
      }
      if(filterTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown filter mode ' + v)
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)
      return this._magFilter = v
    }
  },
  mipSamples: {
    get: function() {
      return this._anisoSamples
    },
    set: function(i) {
      var psamples = this._anisoSamples
      this._anisoSamples = Math.max(i, 1)|0
      if(psamples !== this._anisoSamples) {
        var ext = webglew(this.gl).EXT_texture_filter_anisotropic
        if(ext) {
          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)
        }
      }
      return this._anisoSamples
    }
  },
  wrapS: {
    get: function() {
      return this._wrapS
    },
    set: function(v) {
      this.bind()
      if(wrapTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown wrap mode ' + v)
      }
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)
      return this._wrapS = v
    }
  },
  wrapT: {
    get: function() {
      return this._wrapT
    },
    set: function(v) {
      this.bind()
      if(wrapTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown wrap mode ' + v)
      }
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)
      return this._wrapT = v
    }
  },
  wrap: {
    get: function() {
      return this._wrapVector
    },
    set: function(v) {
      if(!Array.isArray(v)) {
        v = [v,v]
      }
      if(v.length !== 2) {
        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns')
      }
      for(var i=0; i<2; ++i) {
        if(wrapTypes.indexOf(v[i]) < 0) {
          throw new Error('gl-texture2d: Unknown wrap mode ' + v)
        }
      }
      this._wrapS = v[0]
      this._wrapT = v[1]

      var gl = this.gl
      this.bind()
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)

      return v
    }
  },
  shape: {
    get: function() {
      return this._shapeVector
    }, 
    set: function(x) {
      if(!Array.isArray(x)) {
        x = [x|0,x|0]
      } else {
        if(x.length !== 2) {
          throw new Error('gl-texture2d: Invalid texture shape')
        }
      }
      reshapeTexture(this, x[0]|0, x[1]|0)
      return [x[0]|0, x[1]|0]
    }
  },
  width: {
    get: function() {
      return this._shape[0]
    },
    set: function(w) {
      w = w|0
      reshapeTexture(this, w, this._shape[1])
      return w
    }
  },
  height: {
    get: function() {
      return this._shape[1]
    },
    set: function(h) {
      h = h|0
      reshapeTexture(this, this._shape[0], h)
      return h
    }
  }
})

proto.bind = function(unit) {
  var gl = this.gl
  if(unit !== undefined) {
    gl.activeTexture(gl.TEXTURE0 + (unit|0))
  }
  gl.bindTexture(gl.TEXTURE_2D, this.handle)
  if(unit !== undefined) {
    return (unit|0)
  }
  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0
}

proto.dispose = function() {
  this.gl.deleteTexture(this.handle)
}

proto.generateMipmap = function() {
  this.bind()
  this.gl.generateMipmap(this.gl.TEXTURE_2D)
  
  //Update mip levels
  var l = Math.min(this._shape[0], this._shape[1])
  for(var i=0; l>0; ++i, l>>>=1) {
    if(this._mipLevels.indexOf(i) < 0) {
      this._mipLevels.push(i)
    }
  }
}

proto.setPixels = function(data, x_off, y_off, mip_level) {
  var gl = this.gl
  this.bind()
  if(Array.isArray(x_off)) {
    mip_level = y_off
    y_off = x_off[1]|0
    x_off = x_off[0]|0
  } else {
    x_off = x_off || 0
    y_off = y_off || 0
  }
  mip_level = mip_level || 0
  if(data instanceof HTMLCanvasElement ||
     data instanceof ImageData ||
     data instanceof HTMLImageElement ||
     data instanceof HTMLVideoElement) {
    var needsMip = this._mipLevels.indexOf(mip_level) < 0
    if(needsMip) {
      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, data)
      this._mipLevels.push(mip_level)
    } else {
      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, data)
    }
  } else if(data.shape && data.stride && data.data) {
    if(data.shape.length < 2 ||
       x_off + data.shape[1] > this._shape[1]>>>mip_level ||
       y_off + data.shape[0] > this._shape[0]>>>mip_level ||
       x_off < 0 ||
       y_off < 0) {
      throw new Error('gl-texture2d: Texture dimensions are out of bounds')
    }
    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)
  } else {
    throw new Error('gl-texture2d: Unsupported data type')
  }
}


function isPacked(shape, stride) {
  if(shape.length === 3) {
    return  (stride[2] === 1) && 
            (stride[1] === shape[0]*shape[2]) &&
            (stride[0] === shape[2])
  }
  return  (stride[0] === 1) && 
          (stride[1] === shape[0])
}

function texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {
  var dtype = array.dtype
  var shape = array.shape.slice()
  if(shape.length < 2 || shape.length > 3) {
    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d')
  }
  var type = 0, format = 0
  var packed = isPacked(shape, array.stride.slice())
  if(dtype === 'float32') {
    type = gl.FLOAT
  } else if(dtype === 'float64') {
    type = gl.FLOAT
    packed = false
    dtype = 'float32'
  } else if(dtype === 'uint8') {
    type = gl.UNSIGNED_BYTE
  } else {
    type = gl.UNSIGNED_BYTE
    packed = false
    dtype = 'uint8'
  }
  var channels = 1
  if(shape.length === 2) {
    format = gl.LUMINANCE
    shape = [shape[0], shape[1], 1]
    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)
  } else if(shape.length === 3) {
    if(shape[2] === 1) {
      format = gl.ALPHA
    } else if(shape[2] === 2) {
      format = gl.LUMINANCE_ALPHA
    } else if(shape[2] === 3) {
      format = gl.RGB
    } else if(shape[2] === 4) {
      format = gl.RGBA
    } else {
      throw new Error('gl-texture2d: Invalid shape for pixel coords')
    }
    channels = shape[2]
  } else {
    throw new Error('gl-texture2d: Invalid shape for texture')
  }
  //For 1-channel textures allow conversion between formats
  if((format  === gl.LUMINANCE || format  === gl.ALPHA) &&
     (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {
    format = cformat
  }
  if(format !== cformat) {
    throw new Error('gl-texture2d: Incompatible texture format for setPixels')
  }
  var size = array.size
  var needsMip = mipLevels.indexOf(mip_level) < 0
  if(needsMip) {
    mipLevels.push(mip_level)
  }
  if(type === ctype && packed) {
    //Array data types are compatible, can directly copy into texture
    if(array.offset === 0 && array.data.length === size) {
      if(needsMip) {
        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data)
      } else {
        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data)
      }
    } else {
      if(needsMip) {
        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset+size))
      } else {
        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset+size))
      }
    }
  } else {
    //Need to do type conversion to pack data into buffer
    var pack_buffer
    if(ctype === gl.FLOAT) {
      pack_buffer = pool.mallocFloat32(size)
    } else {
      pack_buffer = pool.mallocUint8(size)
    }
    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2]*shape[0], 1])
    if(type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {
      convertFloatToUint8(pack_view, array)
    } else {
      ops.assign(pack_view, array)
    }
    if(needsMip) {
      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size))
    } else {
      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size))
    }
    if(ctype === gl.FLOAT) {
      pool.freeFloat32(pack_buffer)
    } else {
      pool.freeUint8(pack_buffer)
    }
  }
}

function initTexture(gl) {
  var tex = gl.createTexture()
  gl.bindTexture(gl.TEXTURE_2D, tex)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
  return tex
}

function createTextureShape(gl, width, height, format, type) {
  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(width < 0 || width > maxTextureSize || height < 0 || height  > maxTextureSize) {
    throw new Error('gl-texture2d: Invalid texture shape')
  }
  if(type === gl.FLOAT && !webglew(gl).texture_float) {
    throw new Error('gl-texture2d: Floating point textures not supported on this platform')
  }
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)
  return new Texture2D(gl, tex, width, height, format, type)
}

function createTextureDOM(gl, element, format, type) {
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, element)
  return new Texture2D(gl, tex, element.width|0, element.height|0, format, type)
}

//Creates a texture from an ndarray
function createTextureArray(gl, array) {
  var dtype = array.dtype
  var shape = array.shape.slice()
  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {
    throw new Error('gl-texture2d: Invalid texture size')
  }
  var packed = isPacked(shape, array.stride.slice())
  var type = 0
  if(dtype === 'float32') {
    type = gl.FLOAT
  } else if(dtype === 'float64') {
    type = gl.FLOAT
    packed = false
    dtype = 'float32'
  } else if(dtype === 'uint8') {
    type = gl.UNSIGNED_BYTE
  } else {
    type = gl.UNSIGNED_BYTE
    packed = false
    dtype = 'uint8'
  }
  var format = 0
  if(shape.length === 2) {
    format = gl.LUMINANCE
    shape = [shape[0], shape[1], 1]
    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)
  } else if(shape.length === 3) {
    if(shape[2] === 1) {
      format = gl.ALPHA
    } else if(shape[2] === 2) {
      format = gl.LUMINANCE_ALPHA
    } else if(shape[2] === 3) {
      format = gl.RGB
    } else if(shape[2] === 4) {
      format = gl.RGBA
    } else {
      throw new Error('gl-texture2d: Invalid shape for pixel coords')
    }
  } else {
    throw new Error('gl-texture2d: Invalid shape for texture')
  }
  if(type === gl.FLOAT && !webglew(gl).texture_float) {
    type = gl.UNSIGNED_BYTE
    packed = false
  }
  var buffer, buf_store
  var size = array.size
  if(!packed) {
    var stride = [shape[2], shape[2]*shape[0], 1]
    buf_store = pool.malloc(size, dtype)
    var buf_array = ndarray(buf_store, shape, stride, 0)
    if((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {
      convertFloatToUint8(buf_array, array)
    } else {
      ops.assign(buf_array, array)
    }
    buffer = buf_store.subarray(0, size)
  } else if (array.offset === 0 && array.data.length === size) {
    buffer = array.data
  } else {
    buffer = array.data.subarray(array.offset, array.offset + size)
  }
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer)
  if(!packed) {
    pool.free(buf_store)
  }
  return new Texture2D(gl, tex, shape[0], shape[1], format, type)
}

function createTexture2D(gl) {
  if(arguments.length <= 1) {
    throw new Error('gl-texture2d: Missing arguments for texture2d constructor')
  }
  if(!linearTypes) {
    lazyInitLinearTypes(gl)
  }
  if(typeof arguments[1] === 'number') {
    return createTextureShape(gl, arguments[1], arguments[2], arguments[3]||gl.RGBA, arguments[4]||gl.UNSIGNED_BYTE)
  }
  if(Array.isArray(arguments[1])) {
    return createTextureShape(gl, arguments[1][0]|0, arguments[1][1]|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)
  }
  if(typeof arguments[1] === 'object') {
    var obj = arguments[1]
    if(obj instanceof HTMLCanvasElement ||
       obj instanceof HTMLImageElement ||
       obj instanceof HTMLVideoElement ||
       obj instanceof ImageData) {
      return createTextureDOM(gl, obj, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)
    } else if(obj.shape && obj.data && obj.stride) {
      return createTextureArray(gl, obj)
    }
  }
  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor')
}

},{"ndarray":70,"ndarray-ops":65,"typedarray-pool":74,"webglew":76}],78:[function(require,module,exports){
"use strict"

function doBind(gl, elements, attributes) {
  if(elements) {
    elements.bind()
  } else {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)
  }
  var nattribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS)|0
  if(attributes) {
    if(attributes.length > nattribs) {
      throw new Error("gl-vao: Too many vertex attributes")
    }
    for(var i=0; i<attributes.length; ++i) {
      var attrib = attributes[i]
      if(attrib.buffer) {
        var buffer = attrib.buffer
        var size = attrib.size || 4
        var type = attrib.type || gl.FLOAT
        var normalized = !!attrib.normalized
        var stride = attrib.stride || 0
        var offset = attrib.offset || 0
        buffer.bind()
        gl.enableVertexAttribArray(i)
        gl.vertexAttribPointer(i, size, type, normalized, stride, offset)
      } else {
        if(typeof attrib === "number") {
          gl.vertexAttrib1f(i, attrib)
        } else if(attrib.length === 1) {
          gl.vertexAttrib1f(i, attrib[0])
        } else if(attrib.length === 2) {
          gl.vertexAttrib2f(i, attrib[0], attrib[1])
        } else if(attrib.length === 3) {
          gl.vertexAttrib3f(i, attrib[0], attrib[1], attrib[2])
        } else if(attrib.length === 4) {
          gl.vertexAttrib4f(i, attrib[0], attrib[1], attrib[2], attrib[3])
        } else {
          throw new Error("gl-vao: Invalid vertex attribute")
        }
        gl.disableVertexAttribArray(i)
      }
    }
    for(; i<nattribs; ++i) {
      gl.disableVertexAttribArray(i)
    }
  } else {
    gl.bindBuffer(gl.ARRAY_BUFFER, null)
    for(var i=0; i<nattribs; ++i) {
      gl.disableVertexAttribArray(i)
    }
  }
}

module.exports = doBind
},{}],79:[function(require,module,exports){
"use strict"

var bindAttribs = require("./do-bind.js")

function VAOEmulated(gl) {
  this.gl = gl
  this._elements = null
  this._attributes = null
  this._elementsType = gl.UNSIGNED_SHORT
}

VAOEmulated.prototype.bind = function() {
  bindAttribs(this.gl, this._elements, this._attributes)
}

VAOEmulated.prototype.update = function(attributes, elements, elementsType) {
  this._elements = elements
  this._attributes = attributes
  this._elementsType = elementsType || this.gl.UNSIGNED_SHORT
}

VAOEmulated.prototype.dispose = function() { }
VAOEmulated.prototype.unbind = function() { }

VAOEmulated.prototype.draw = function(mode, count, offset) {
  offset = offset || 0
  var gl = this.gl
  if(this._elements) {
    gl.drawElements(mode, count, this._elementsType, offset)
  } else {
    gl.drawArrays(mode, offset, count)
  }
}

function createVAOEmulated(gl) {
  return new VAOEmulated(gl)
}

module.exports = createVAOEmulated
},{"./do-bind.js":78}],80:[function(require,module,exports){
"use strict"

var bindAttribs = require("./do-bind.js")

function VertexAttribute(location, dimension, a, b, c, d) {
  this.location = location
  this.dimension = dimension
  this.a = a
  this.b = b
  this.c = c
  this.d = d
}

VertexAttribute.prototype.bind = function(gl) {
  switch(this.dimension) {
    case 1:
      gl.vertexAttrib1f(this.location, this.a)
    break
    case 2:
      gl.vertexAttrib2f(this.location, this.a, this.b)
    break
    case 3:
      gl.vertexAttrib3f(this.location, this.a, this.b, this.c)
    break
    case 4:
      gl.vertexAttrib4f(this.location, this.a, this.b, this.c, this.d)
    break
  }
}

function VAONative(gl, ext, handle) {
  this.gl = gl
  this._ext = ext
  this.handle = handle
  this._attribs = []
  this._useElements = false
  this._elementsType = gl.UNSIGNED_SHORT
}

VAONative.prototype.bind = function() {
  this._ext.bindVertexArrayOES(this.handle)
  for(var i=0; i<this._attribs.length; ++i) {
    this._attribs[i].bind(this.gl)
  }
}

VAONative.prototype.unbind = function() {
  this._ext.bindVertexArrayOES(null)
}

VAONative.prototype.dispose = function() {
  this._ext.deleteVertexArrayOES(this.handle)
}

VAONative.prototype.update = function(attributes, elements, elementsType) {
  this.bind()
  bindAttribs(this.gl, elements, attributes)
  this.unbind()
  this._attribs.length = 0
  if(attributes)
  for(var i=0; i<attributes.length; ++i) {
    var a = attributes[i]
    if(typeof a === "number") {
      this._attribs.push(new VertexAttribute(i, 1, a))
    } else if(Array.isArray(a)) {
      this._attribs.push(new VertexAttribute(i, a.length, a[0], a[1], a[2], a[3]))
    }
  }
  this._useElements = !!elements
  this._elementsType = elementsType || this.gl.UNSIGNED_SHORT
}

VAONative.prototype.draw = function(mode, count, offset) {
  offset = offset || 0
  var gl = this.gl
  if(this._useElements) {
    gl.drawElements(mode, count, this._elementsType, offset)
  } else {
    gl.drawArrays(mode, offset, count)
  }
}

function createVAONative(gl, ext) {
  return new VAONative(gl, ext, ext.createVertexArrayOES())
}

module.exports = createVAONative
},{"./do-bind.js":78}],81:[function(require,module,exports){
module.exports=require(24)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/node_modules/weak-map/weak-map.js":24}],82:[function(require,module,exports){
module.exports=require(25)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/webglew/webglew.js":25,"weak-map":81}],83:[function(require,module,exports){
"use strict"

var webglew = require("webglew")
var createVAONative = require("./lib/vao-native.js")
var createVAOEmulated = require("./lib/vao-emulated.js")

function createVAO(gl, attributes, elements, elementsType) {
  var ext = webglew(gl).OES_vertex_array_object
  var vao
  if(ext) {
    vao = createVAONative(gl, ext)
  } else {
    vao = createVAOEmulated(gl)
  }
  vao.update(attributes, elements, elementsType)
  return vao
}

module.exports = createVAO
},{"./lib/vao-emulated.js":79,"./lib/vao-native.js":80,"webglew":82}],84:[function(require,module,exports){
module.exports = programify

var shader = require('gl-shader-core')

function programify(vertex, fragment, uniforms, attributes) {
  return function(gl) {
    return shader(gl, vertex, fragment, uniforms, attributes)
  }
}

},{"gl-shader-core":90}],85:[function(require,module,exports){
module.exports = noop

function noop() {
  throw new Error(
      'You should bundle your code ' +
      'using `glslify` as a transform.'
  )
}

},{}],86:[function(require,module,exports){
'use strict'

module.exports = createAttributeWrapper

//Shader attribute class
function ShaderAttribute(gl, program, location, dimension, name, constFunc, relink) {
  this._gl = gl
  this._program = program
  this._location = location
  this._dimension = dimension
  this._name = name
  this._constFunc = constFunc
  this._relink = relink
}

var proto = ShaderAttribute.prototype

proto.pointer = function setAttribPointer(type, normalized, stride, offset) {
  var gl = this._gl
  gl.vertexAttribPointer(this._location, this._dimension, type||gl.FLOAT, !!normalized, stride||0, offset||0)
  this._gl.enableVertexAttribArray(this._location)
}

Object.defineProperty(proto, 'location', {
  get: function() {
    return this._location
  }
  , set: function(v) {
    if(v !== this._location) {
      this._location = v
      this._gl.bindAttribLocation(this._program, v, this._name)
      this._gl.linkProgram(this._program)
      this._relink()
    }
  }
})


//Adds a vector attribute to obj
function addVectorAttribute(gl, program, location, dimension, obj, name, doLink) {
  var constFuncArgs = [ 'gl', 'v' ]
  var varNames = []
  for(var i=0; i<dimension; ++i) {
    constFuncArgs.push('x'+i)
    varNames.push('x'+i)
  }
  constFuncArgs.push([
    'if(x0.length===void 0){return gl.vertexAttrib', dimension, 'f(v,', varNames.join(), ')}else{return gl.vertexAttrib', dimension, 'fv(v,x0)}'
  ].join(''))
  var constFunc = Function.apply(undefined, constFuncArgs)
  var attr = new ShaderAttribute(gl, program, location, dimension, name, constFunc, doLink)
  Object.defineProperty(obj, name, {
    set: function(x) {
      gl.disableVertexAttribArray(attr._location)
      constFunc(gl, attr._location, x)
      return x
    }
    , get: function() {
      return attr
    }
    , enumerable: true
  })
}

//Create shims for attributes
function createAttributeWrapper(gl, program, attributes, doLink) {
  var obj = {}
  for(var i=0, n=attributes.length; i<n; ++i) {
    var a = attributes[i]
    var name = a.name
    var type = a.type
    var location = gl.getAttribLocation(program, name)
    
    switch(type) {
      case 'bool':
      case 'int':
      case 'float':
        addVectorAttribute(gl, program, location, 1, obj, name, doLink)
      break
      
      default:
        if(type.indexOf('vec') >= 0) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new Error('gl-shader: Invalid data type for attribute ' + name + ': ' + type)
          }
          addVectorAttribute(gl, program, location, d, obj, name, doLink)
        } else {
          throw new Error('gl-shader: Unknown data type for attribute ' + name + ': ' + type)
        }
      break
    }
  }
  return obj
}
},{}],87:[function(require,module,exports){
'use strict'

var dup = require('dup')
var coallesceUniforms = require('./reflect')

module.exports = createUniformWrapper

//Binds a function and returns a value
function identity(x) {
  var c = new Function('y', 'return function(){return y}')
  return c(x)
}

//Create shims for uniforms
function createUniformWrapper(gl, program, uniforms, locations) {

  function makeGetter(index) {
    var proc = new Function('gl', 'prog', 'locations', 
      'return function(){return gl.getUniform(prog,locations[' + index + '])}') 
    return proc(gl, program, locations)
  }

  function makePropSetter(path, index, type) {
    switch(type) {
      case 'bool':
      case 'int':
      case 'sampler2D':
      case 'samplerCube':
        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')'
      case 'float':
        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')'
      default:
        var vidx = type.indexOf('vec')
        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new Error('gl-shader: Invalid data type')
          }
          switch(type.charAt(0)) {
            case 'b':
            case 'i':
              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')'
            case 'v':
              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')'
            default:
              throw new Error('gl-shader: Unrecognized data type for vector ' + name + ': ' + type)
          }
        } else if(type.indexOf('mat') === 0 && type.length === 4) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new Error('gl-shader: Invalid uniform dimension type for matrix ' + name + ': ' + type)
          }
          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')'
        } else {
          throw new Error('gl-shader: Unknown uniform data type for ' + name + ': ' + type)
        }
      break
    }
  }

  function enumerateIndices(prefix, type) {
    if(typeof type !== 'object') {
      return [ [prefix, type] ]
    }
    var indices = []
    for(var id in type) {
      var prop = type[id]
      var tprefix = prefix
      if(parseInt(id) + '' === id) {
        tprefix += '[' + id + ']'
      } else {
        tprefix += '.' + id
      }
      if(typeof prop === 'object') {
        indices.push.apply(indices, enumerateIndices(tprefix, prop))
      } else {
        indices.push([tprefix, prop])
      }
    }
    return indices
  }

  function makeSetter(type) {
    var code = [ 'return function updateProperty(obj){' ]
    var indices = enumerateIndices('', type)
    for(var i=0; i<indices.length; ++i) {
      var item = indices[i]
      var path = item[0]
      var idx  = item[1]
      if(locations[idx]) {
        code.push(makePropSetter(path, idx, uniforms[idx].type))
      }
    }
    code.push('return obj}')
    var proc = new Function('gl', 'prog', 'locations', code.join('\n'))
    return proc(gl, program, locations)
  }

  function defaultValue(type) {
    switch(type) {
      case 'bool':
        return false
      case 'int':
      case 'sampler2D':
      case 'samplerCube':
        return 0
      case 'float':
        return 0.0
      default:
        var vidx = type.indexOf('vec')
        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new Error('gl-shader: Invalid data type')
          }
          if(type.charAt(0) === 'b') {
            return dup(d, false)
          }
          return dup(d)
        } else if(type.indexOf('mat') === 0 && type.length === 4) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new Error('gl-shader: Invalid uniform dimension type for matrix ' + name + ': ' + type)
          }
          return dup([d,d])
        } else {
          throw new Error('gl-shader: Unknown uniform data type for ' + name + ': ' + type)
        }
      break
    }
  }

  function storeProperty(obj, prop, type) {
    if(typeof type === 'object') {
      var child = processObject(type)
      Object.defineProperty(obj, prop, {
        get: identity(child),
        set: makeSetter(type),
        enumerable: true,
        configurable: false
      })
    } else {
      if(locations[type]) {
        Object.defineProperty(obj, prop, {
          get: makeGetter(type),
          set: makeSetter(type),
          enumerable: true,
          configurable: false
        })
      } else {
        obj[prop] = defaultValue(uniforms[type].type)
      }
    }
  }

  function processObject(obj) {
    var result
    if(Array.isArray(obj)) {
      result = new Array(obj.length)
      for(var i=0; i<obj.length; ++i) {
        storeProperty(result, i, obj[i])
      }
    } else {
      result = {}
      for(var id in obj) {
        storeProperty(result, id, obj[id])
      }
    }
    return result
  }

  //Return data
  var coallesced = coallesceUniforms(uniforms, true)
  return {
    get: identity(processObject(coallesced)),
    set: makeSetter(coallesced),
    enumerable: true,
    configurable: true
  }
}

},{"./reflect":88,"dup":89}],88:[function(require,module,exports){
'use strict'

module.exports = makeReflectTypes

//Construct type info for reflection.
//
// This iterates over the flattened list of uniform type values and smashes them into a JSON object.
//
// The leaves of the resulting object are either indices or type strings representing primitive glslify types
function makeReflectTypes(uniforms, useIndex) {
  var obj = {}
  for(var i=0; i<uniforms.length; ++i) {
    var n = uniforms[i].name
    var parts = n.split(".")
    var o = obj
    for(var j=0; j<parts.length; ++j) {
      var x = parts[j].split("[")
      if(x.length > 1) {
        if(!(x[0] in o)) {
          o[x[0]] = []
        }
        o = o[x[0]]
        for(var k=1; k<x.length; ++k) {
          var y = parseInt(x[k])
          if(k<x.length-1 || j<parts.length-1) {
            if(!(y in o)) {
              if(k < x.length-1) {
                o[y] = []
              } else {
                o[y] = {}
              }
            }
            o = o[y]
          } else {
            if(useIndex) {
              o[y] = i
            } else {
              o[y] = uniforms[i].type
            }
          }
        }
      } else if(j < parts.length-1) {
        if(!(x[0] in o)) {
          o[x[0]] = {}
        }
        o = o[x[0]]
      } else {
        if(useIndex) {
          o[x[0]] = i
        } else {
          o[x[0]] = uniforms[i].type
        }
      }
    }
  }
  return obj
}
},{}],89:[function(require,module,exports){
module.exports=require(22)
},{"/Users/andy/dev/glsl-image-maker/node_modules/gl-buffer/node_modules/typedarray-pool/node_modules/dup/dup.js":22}],90:[function(require,module,exports){
'use strict'

var createUniformWrapper = require('./lib/create-uniforms')
var createAttributeWrapper = require('./lib/create-attributes')
var makeReflect = require('./lib/reflect')

//Shader object
function Shader(gl, prog, vertShader, fragShader) {
  this.gl = gl
  this.handle = prog
  this.attributes = null
  this.uniforms = null
  this.types = null
  this.vertexShader = vertShader
  this.fragmentShader = fragShader
}

//Binds the shader
Shader.prototype.bind = function() {
  this.gl.useProgram(this.handle)
}

//Destroy shader, release resources
Shader.prototype.dispose = function() {
  var gl = this.gl
  gl.deleteShader(this.vertexShader)
  gl.deleteShader(this.fragmentShader)
  gl.deleteProgram(this.handle)
}

Shader.prototype.updateExports = function(uniforms, attributes) {
  var locations = new Array(uniforms.length)
  var program = this.handle
  var gl = this.gl

  var doLink = relinkUniforms.bind(void 0,
    gl,
    program,
    locations,
    uniforms
  )
  doLink()

  this.types = {
    uniforms: makeReflect(uniforms),
    attributes: makeReflect(attributes)
  }

  this.attributes = createAttributeWrapper(
    gl,
    program,
    attributes,
    doLink
  )

  Object.defineProperty(this, 'uniforms', createUniformWrapper(
    gl,
    program,
    uniforms,
    locations
  ))
}

//Relinks all uniforms
function relinkUniforms(gl, program, locations, uniforms) {
  for(var i=0; i<uniforms.length; ++i) {
    locations[i] = gl.getUniformLocation(program, uniforms[i].name)
  }
}

//Compiles and links a shader program with the given attribute and vertex list
function createShader(
    gl
  , vertSource
  , fragSource
  , uniforms
  , attributes) {
  
  //Compile vertex shader
  var vertShader = gl.createShader(gl.VERTEX_SHADER)
  gl.shaderSource(vertShader, vertSource)
  gl.compileShader(vertShader)
  if(!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(vertShader)
    console.error('gl-shader: Error compling vertex shader:', errLog)
    throw new Error('gl-shader: Error compiling vertex shader:' + errLog)
  }
  
  //Compile fragment shader
  var fragShader = gl.createShader(gl.FRAGMENT_SHADER)
  gl.shaderSource(fragShader, fragSource)
  gl.compileShader(fragShader)
  if(!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(fragShader)
    console.error('gl-shader: Error compiling fragment shader:', errLog)
    throw new Error('gl-shader: Error compiling fragment shader:' + errLog)
  }
  
  //Link program
  var program = gl.createProgram()
  gl.attachShader(program, fragShader)
  gl.attachShader(program, vertShader)

  //Optional default attriubte locations
  attributes.forEach(function(a) {
    if (typeof a.location === 'number') 
      gl.bindAttribLocation(program, a.location, a.name)
  })

  gl.linkProgram(program)
  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program)
    console.error('gl-shader: Error linking shader program:', errLog)
    throw new Error('gl-shader: Error linking shader program:' + errLog)
  }
  
  //Return final linked shader object
  var shader = new Shader(
    gl,
    program,
    vertShader,
    fragShader
  )
  shader.updateExports(uniforms, attributes)

  return shader
}

module.exports = createShader

},{"./lib/create-attributes":86,"./lib/create-uniforms":87,"./lib/reflect":88}],91:[function(require,module,exports){
/* jshint unused:true, asi:true, laxcomma:true, -W097, -W008 */
/* global module */
"use strict";

// 
// Helper class to manage polygon data for this project.
// 
// vertArr is [x,y,z, xyz, xyz,   ..] per poly (len=3*numVerts)
// colArr = [r,g,b,a, rgba, rgba, ..] per poly (len=4*numVerts)
//

var vertArr, colArr,
		oldVertArr, oldColArr


// experimental settings...
var minAlpha = .01
var maxAlpha = .6
var flattenedZ = false

// typing
var floor = Math.floor
var rand = Math.random




function init(numTris) {
	vertArr = []
	colArr = []
	var i
	for (i=0; i<numTris; i++) {
		addPoly()
	}
	// sort initially
	sortPolygonsByZ()
}

// for reading in data already calculated
function setArrays(varr,carr) {
	vertArr = varr.slice()
	colArr  = carr.slice()
}



// generate scaled alpha values
function newAlpha() {
	var a = rand()
	return a*(maxAlpha-minAlpha) + minAlpha
}

// add a random poly
function addPoly() {
	for (var i=0; i<9; i++) {
		vertArr.push(rand())
	}
	if (flattenedZ) {
		var len = vertArr.length
		vertArr[len-1] = vertArr[len-4] = vertArr[len-7]
	}
	for (i=0; i<12; i++) {
		var c = (i%4==3) ? newAlpha() : rand()
		colArr.push(c)
	}
}

// add a new poly that's a clone of an existing one with one vertex moved
// conceptually like making a 3-poly into a folded quad
function clonePoly() {
	var index = floor( vertArr.length/9 * rand() )
	// clone colors as-are
	for (i=0; i<12; i++) {
		colArr.push( colArr[index*12+i] )
	}
	// clone 2 of 3 position vertices, then push a random one
	var skip = floor( 3*rand() )
	for (var i=0; i<9; i++) {
		if (floor(i/3)!=skip) { vertArr.push(vertArr[index*9+i]) }
	}
	for (i=0; i<3; i++) { vertArr.push( rand() ) }
	// in flat mode, give new position z from one of the others
	if (flattenedZ) {
		var len = vertArr.length
		vertArr[len-1] = (rand()>.5) ? vertArr[len-4] : vertArr[len-7]
	}
}

// remove a random poly
function removePoly() {
	if (vertArr.length < 18) { return } // already at 1 poly
	var index = floor( vertArr.length/9 * rand() )
	vertArr.splice(index*9, 9)
	colArr.splice(index*12, 12)
}

// randomize one RGBA/XYZ value
function mutateValue() {
	if (rand() < 0.5) { // do a color
		var i = floor( colArr.length * rand() )
		colArr[i] = (i%4==3) ? newAlpha() : rand()
	} else { // do a position
		var v = floor( vertArr.length/3 * rand() )
		var offs = (flattenedZ) ? 2 : 3
		var offset = floor( rand() * offs )
		vertArr[v*3 + offset] = rand()
	}
}

// randomize either all RGBA or all XYZ of one vertex
function mutateVertex() {
	var vnum = floor( getNumVerts()*rand() )
	if (rand() < 0.5) { // randomize a vertex's color
		colArr[vnum*4]   = rand()
		colArr[vnum*4+1] = rand()
		colArr[vnum*4+2] = rand()
		colArr[vnum*4+3] = newAlpha()
	} else { // randomize a position
		vertArr[vnum*3]   = rand()
		vertArr[vnum*3+1] = rand()
		vertArr[vnum*3+2] = rand()
		
		if (flattenedZ) { // if flat polys, change Z of whole poly
			var z = vertArr[vnum*3+2]
			var pnum = floor(vnum/3)
			vertArr[pnum*9+2] = z
			vertArr[pnum*9+5] = z
			vertArr[pnum*9+8] = z
		}
	}
}







function cacheDataNow() {
	oldVertArr = vertArr.slice()
	oldColArr = colArr.slice()
}
function restoreCachedData() {
	vertArr = oldVertArr
	colArr = oldColArr
}

function sortPolygonsByZ() {
	var i,j
	// make and sort an arr of z values averaged over each poly
	var sortdat = []
	for (i=0; i<vertArr.length; i+=9) {
		var zavg = (vertArr[i+2] + vertArr[i+5] + vertArr[i+8]) / 3
		sortdat.push({ index:i/9, z:zavg })
	}
	sortdat.sort(sortFcn)
	var oldV = vertArr.slice()
	var oldC = colArr.slice()
	for (i=0; i<sortdat.length; i++) {
		var item = sortdat[i]
		for (j=0; j<9; j++) {
			vertArr[i*9+j] = oldV[item.index*9+j]
		}
		for (j=0; j<12; j++) {
			colArr[i*12+j] =  oldC[item.index*12+j]
		}
	}
}
function sortFcn(a,b) {
	return (a.z<b.z) ? 1 : -1
}



function setAlphaRange(a,b) {
	a = parseFloat(a)
	b = parseFloat(b)
	minAlpha = Math.min(a,b)
	maxAlpha = Math.max(a,b)
}

function setFlattenedness(bool) {
	flattenedZ = bool
}


function getNumVerts() {
	return vertArr.length / 3
}


var poly = {
	  init: init
	, setArrays: setArrays
	, sortPolygonsByZ: sortPolygonsByZ
	, cacheDataNow: cacheDataNow
	, restoreCachedData: restoreCachedData
	, mutateVertex: mutateVertex
	, mutateValue: mutateValue
	, addPoly: addPoly
	, clonePoly: clonePoly
	, removePoly: removePoly
	, setAlphaRange: setAlphaRange
	, setFlattenedness: setFlattenedness
//	, debug: debug
	, makeTestData: makeTestData
//	, testAlpha: testAlpha
}
Object.defineProperty(poly, 'numVerts',{get: function(){ return getNumVerts() }})
Object.defineProperty(poly, 'vertArr', {get: function(){ return vertArr }})
Object.defineProperty(poly, 'colArr',  {get: function(){ return colArr }})
Object.defineProperty(poly, 'minAlpha',  {get: function(){ return minAlpha }})
Object.defineProperty(poly, 'maxAlpha',  {get: function(){ return maxAlpha }})
	

module.exports = poly





//function logArr(arr) {
//	console.log(arr.map(function(n){ return(Math.round(n*100)) }))
//}
//
//function debug(label) {
////	console.log(label, ' vert: ',
////							vertArr.map(function(n){ return(Math.round(n*100)) }) )
//	console.log(label, ' colr: ',
//							colArr.map(function(n){ return(Math.round(n*100)) }) )
//}
//function testAlpha(label) {
//	for (var i=3; i<colArr.length; i+=4) {
//		var c = colArr[i] 
//		if (c<minAlpha || c>maxAlpha) {
//			console.log('err?', i, c)
//			return true }
//	}
//	return false
//}
function makeTestData() {
	init(3)
	vertArr = [ 0,0,.5,  1,0,.5,  0,1,.5,
						  1,1,1,  1,0,1,  0,1,1,
						  0,0,0,  0,1,0,  1,1,0
						]
	var c = .7
	var a = .2
	colArr = [ c,0,0,a,  c,0,0,a,  c,0,0,a, 
						 0,c,0,1,  0,c,0,1,  0,c,0,1, 
						 0,0,c,a,  0,0,c,a,  0,0,c,a 
						]
	sortPolygonsByZ()
}
},{}]},{},[1]);
